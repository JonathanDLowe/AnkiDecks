Canvas	ClipOutPath|Rect()&nbsp; &nbsp; getHeight()|Width()<div>clopPath|Rect()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; save() | restore()<br>Drawing: scale()&nbsp; &nbsp; rotate()&nbsp; &nbsp; translate()&nbsp; &nbsp; skew()</div><div>drawARGB(int,int,int,int) - full canvas with color</div><div>drawArc(...)&nbsp; &nbsp; drawBitmap(...)&nbsp; &nbsp; drawCircle() drawColor()</div><div>drawLine()&nbsp; &nbsp;drawLines()&nbsp; &nbsp; drawOval()&nbsp; &nbsp; drawPaint()</div><div>drawPath() drawPoint()&nbsp; &nbsp;drawPoints()</div><div>drawRect()&nbsp; &nbsp;drawRoundRect() drawText()</div><div>drawTextOnPath()</div>
Path	addArc() addCircle() addOval()<div>addPath() adREct() addRoundRect()</div><div>arcTo() cubicTo() lineTo() quadTo()</div><div><br></div><div>close()</div><div>rewind()</div><div>reset()</div>
Formatter	%[arg_index$][flags][width][.precision] conversion<div>'b' 'B' boolean</div><div>'h' 'H' hashCode() toHexString()</div><div>'s' 'S' String</div><div>'c' 'C' Unicode character</div><div>'d' decimal</div><div>'o' octal</div><div>'x' 'X' hexadecimal</div><div>'e' 'E' scientific notation</div><div>'f' float</div><div>'t' 'T' date/time</div>
android.location.*	android.location.*<div>- Address</div><div>- Geocode</div><div>- Location</div>
MotionEvent	ACTION_DOWN, ACTION_MOVE, ACTION_UP<div>often delivered via onTouchEvent(MotionEvent)</div><div>getX() | getX(int pointerIdx) | getY() | getY(int)</div><div>getAction() | getActionButton() | getActionIndex()</div><div>getActionMasked()</div><div>getPointerId()</div><div>getPressure()</div>
AsyncTask&lt;T,U,V&gt;	AsyncTask&lt;T,U,V&gt; T - param, U - Progress, V - Result<div>boolean cancel(boolean mayInterrupt)</div><div>AsyncTask execute(T)</div><div>AsyncTask executeOnExecutor( Executor, T)</div><div>getStatus() // AsyncTask.Status</div><div>get() block/wait get(long, TimeUnit) wait for a time</div><div>onPreExecute() | onPostExecute() // UI Thread</div><div>publishProgress() //background onProgressUpdate() //UI</div><div>&gt;= HoneyComb, serially. Use executor for parallel execution.&nbsp;</div>
Settings	android.provider.Settings<div>Setting provider contains globals</div><div>system-level device preferences</div><div>constains many(all?) Action constants for launching a setting activity</div>
ColorSpace	ColorSpace.Adaptation<div>ColorSpace.Connector</div><div>ColorSpace.Model</div><div>ColorSpace.Named</div>
Color	BLACK|BLUE|CYAN|DKGRAY|GREEN...<div>HSVToColor(float[]) | HSVToColor(float alpha, float[])</div><div>RGBToHSV(int red, int green, int blue, float[])</div><div>argb(int alpha, int red, int green, int blue)</div><div>argb(float alpha, float red, float green, float blue)<br></div><div>alpha() red() blue() green()</div><div>Static Helpers <br>alpha(Color) red(Color) blue(Color) green(Color)</div><div>Color convert(ColorSpace&nbsp;colorSpace)<br></div><div>Many more ColorSpace conversion functions</div>
Paint	Paint.Style.STROKE&nbsp; &nbsp; setTypeface(TypeFace)<div>Paint.Join.ROUND&nbsp; &nbsp; setTextSize(float)</div><div>Paint.Cap.ROUND&nbsp; &nbsp;&nbsp;</div><div>setARGB(int, int, int, int)</div><div>setColor(int color)</div><div>setStrokeCap(Paint.Cap)</div><div>setStrokeJoin(Paint.Join)</div><div>setStrokeWidth(float)<br><div><br></div></div>
SurfaceView	SurfaceHolder getHolder()<div>draw(Canvas)</div>
Surface	boolean isValid()<div>lockCanvas(Rect inOutDirty) gets a Canvas for&nbsp; drawing into Surface unlockCanvasAndPost(Canvas) to post new contents to surface.</div>
ObjectAnimator	<div>String getPropertyName()</div><div>Object getTarget()</div><div>of&lt;propertyType&gt;()</div><div>setAutoCancel()//when another ObjectAnimator on the same property starts</div><div>set&lt;propertyTypes&gt;Values(Type...) values to animate between</div><div>start()</div>
VideoView	canPause() canSeekBackward() canSeekForward()<div>getDuration isPlaying()</div><div>pause() resume()</div><div>seekTo(int msec)</div><div>setMediaController()</div><div>setOnPreparedListener()<br></div><div>setOnCompletionListener()</div><div>setVideoURI() setVideoPath()</div><div>start() stopPlayback() suspend()</div>
MediaController	Widget<div>hide() isShowing() show() show(int timeout)</div><div>setMediaPlayer() setMediaPlayer(VideoView)</div><div><br></div>
Fix Overdraw	Eliminate unnecessary backgrounds<div>Remove invisible views</div><div>In custom views, clip generously</div><div>Reduce transparency</div><div>- using a transparency to create a color</div><div>- preprocess images instead using transparency</div><div>Flaten and reorganize view hierarchy</div><div>Resize/ Rearrange views to reduce overlap</div>
LayoutInspector	"Tools &gt; LayoutInspector<div><br></div><div>static ""snapshot: of view heirarchy as defined in XML</div><div>does not connect to running app</div><div>Layout Inspector can help find places to optimize view hierarchy.</div>"
Android Emulator Limitations	Doesn't include virtual hardware for:<div>Bluetooth Device-attached headphones</div><div>NFC&nbsp; &nbsp;USB&nbsp; &nbsp;SD card insert/eject</div><div>Extended sensors such as biometrics</div><div>Missing specialized sensors that some devices have</div>
AppWidget	New &gt; Widget &gt; AppWidget<div>appwidgetprovider - Javaclass thatextends</div><div>AppWidgetProvider which inherits BroadcastReceiver</div><div>REmoteViews</div><div>onClickPendingIntent()</div><div>onEnabled() | onDisbled() open resources on first widget clean up after last wdiget removed</div><div>&lt;appwidget-provider&gt;</div><div>android:initialLayout + midWidth+ minHeight</div>
Vibrator	Context.getSystemServices(VIBRATOR_SERVICE)<div>vibrate(VibrationEffect effect)</div>
VibrationEffect	static VibrationEffect createOneShot(long milli, int amplitude)<div>static VibrationEffect createWaveform(long[] timings, int repeat)</div><div>static VibrationEffect creatveWaveform(long[] timings, int[] amplitudes, int repeat)</div>
PackageManager	Class for retrieving various kinds of Information related to the Application packages that are currently installed on the device.<br><br>Drawable getApplicationIcon(ApplicationInfo|String packageName)<div>List&lt;ApplicationInfo&gt; getInstalledApplication(int flags)</div><div>List&lt;PackageInfo&gt; getInstalledPackages(int flags)</div><div>CharSequences getApplicationLabel(ApplicationInfo)</div>
Class for retrieving various kinds of Information related to the Application packages that are currently installed on the device.	PackageManager
&lt;application&gt;	AndroidManifest.xml
Android Build Process(Update needed)	1) Compiler converts src into DEX(Dalvik EXE) files<div>2) APK Packager combines DEX files Android compiled resources into<br>3) APK Packager signs APK using debug or release keystore</div><div>4) APK Packager uses zipalign to optimize memory usage on device</div><div>5) Final APK generated</div>
BluetoothAdapter	enable() disable() cancelDiscovery()<div>static checkBluetoothAddres(String addres)</div><div>String getAddres()</div><div>Set&lt;BluetoothDevice&gt; getBondedDevices()</div><div>static getDefaultAdapter()</div><div>String getName()</div><div>int getState() isDiscovering()&nbsp; isEnabled()</div><div>setName(String name)</div><div>startDiscovery()</div>
Fragments	subclass Fragment, public no args constructor required<div>&lt;fragment/&gt; //static</div><div>Or FragmentManager::getSupportFragmentManager()</div><div>FragmentTransaction, FragmentManager::beginTransaction</div>
FragmentTransaction	add(int containerId, Fragment, String tag)<div>add(int containerId, Fragment)</div><div>addSharedElement(View element name)</div><div>addToBackStack(String name)</div><div>commit() | commitNow()</div><div>add() | remove() | replace()<br></div>
Threadpools	Only for massive, parallel tasks.
JobScheduler Needs update	Batch background work<div>JobInfo.Builder(int id, ComponentName cn)</div><div>ComponentName(getPackageName(), MyClass.class JobScheduler getSystemService(JobScheduler.class)</div><div>schedule(JobInfo)</div><div>enqueue(JobInfo)</div>
<div>Protocol Buffers</div>	Nano proto buff<div>flat buff</div>
AsyncTask Call Process	Helpful, but potentially bad<div>Executes serially after Honeycomb because parallel causd errors</div><div>Steps</div><div>1) onPreExecute() - UI</div><div>2) doInBackground()</div><div>3) onProgressUpdate - UI</div><div>4) onPostExecute() - UI</div><div>cancel() | isCancelled()</div><div>executeOnExecutor() for parallel</div><div>with AsyncTask.THREAD_POOL_EXECUTOR</div>
Class for getting current Android build info.	android.os.Build<div>ex. Build.VERSION</div><div>ex. Build.VERSION_CODES</div>
IntentService	Considering using&nbsp; JobIntentService<div>onhandleIntent(Intent) //executes on worker thread</div><div>onBind()</div><div>onStart()</div><div><br></div><div>Stops self after intents are handled</div><div>No stopSelf() needed.<br><div><br></div></div>
Service	Watch for Started vs Bound services<div>startService() | stopService() | bindService() unbind()</div><div>must match number of binds and unbinds for service to stop.</div>
Room Database	Architectural Components<div>Database layer on top of SQLite</div><div>database that takes care of mundane tasks that you&nbsp; used to handle with a helper class. Room database uses the DAO to issue queries to the SQLite database base on functions call. Uses annotations to generate SQL query.</div>
Repository(Room)	Architecture Component<div>A class you create for mananging multiple data sources. In addition to a Room database, the Repository could manage remote data sources such as a server</div>
ViewModel Needs Update	Architectural Components<br>Provides data to the UI and can act as a communication center between the Repository and the UI. Hides backend from UI. ViewModel instances survive device config changes.
LiveData&lt;T&gt;	Architectural Components<div>Data Holder class that follows the observer patter which meants that it can be observed.<br>LiveData is lifecycle-aware, so it automatically manages stopping and resuming observation base on the state.</div>
DAO Needs update	Data Access Object<div><br></div><div>mapping of SQL queries to fuctions. Replaces old method of defining queries in helper class using DAO call functions and component handles the rest.</div>
SQLite Database	Applicate database used by Android.<div>Room persistence library creats and maintains this data base for you.</div>
Entity(Room)	"Annotated class that describes a database table<div>@Entity(tableName=""tableName"")</div><div>@PrimaryKey</div><div>@NotNull</div><div>@ColumnInfo(name=""word"")</div>"
@NotNull	Annotation that declares an argument cannot be null.
An annotation that declares an argument cannot be null.	@NotNull
NavigationUI	Class whic hooks up elements of navigation<div>Associated with the Navigation Graph</div>
Configuration	Contains the current configuration values<div>Received in onConfigurationChanged(Configuartioin newConfig)</div><div>Can be read to manually handle configuration changes&nbsp;</div><div>getResources().getConfiguration() to read the current configuration values.</div>
Lifecycle	Arch. Component
Task	"Collection of activities that user interacts with while performing a job<div>Cohesive unit that can move to the ""background"" when user begins a new task or pressed Home.</div>"
ActivityManager	Class gives info about, and interacts with activies, services, and the containing process.
ActivityManager.AppTask	AppTask allows you to manage your own app's task.<div>ActivityManager.getAppTask()</div>
Lifecycle.State	Used in ActivityScenario for testing<div>CREATED</div><div>DESTROYED</div><div>INITIALIZED</div><div>RESUMED</div><div>STARTED</div>
FLAG_ACTIVITY_NEW_TASK	"Intent Flag<div>started activity will become the start of a new activity</div><div>Used to present ""launcher"" style behavior i.e. list of separate things that are otherwise run completel independently</div><div>If task is already runing current taskgroud to foreground</div><div>See *_MULTIPLE_TASK for flag to disable.</div>"
FLAG_ACTIVITY_CELAR_TOP	Intent Flag<div>If set, and activity being launched is already running in current task then isntead of new instance, all activities on top of it will be closed and intent will be delivered to now on top&nbsp; existing activity's onNewIntent(FLAG_ACTIVITY_SINGLE_TOP) or it will be finished() and recreated with new intent.</div><div>_CLEAR_TOP | _NEW_TASK to pull existing task to foreground and clears to root state&nbsp;</div>
Core App Components (6)	Activities<div>Fragments</div><div>Services</div><div>Broadcast Receivers</div><div>Intent Filters</div><div>Content Providers</div>
FLAG_ACTIVITY_SINGLE_TOP	Intent flag<div><br></div><div>If set, the activity will not be lauched if it is already running at the top of the history stack.</div>
Log	Log.v(), Log.d() Log.i() Log.w() Log.e()<div>Verbosity(Least to most)&nbsp;</div><div>ERROR, WARN, INFO, DEBUG, VERBOSE</div><div>Verbose should never be compiled in except for dev builds.</div><div>Debug are compiled in but stripped at runtime.</div><div>Error, warn, info always kept</div><div>BP: declare TAG constant</div><div>BP: beware of allocation in Log. Filtered messages would be doing useless work.</div>
<div>ExecutorCompletionService</div>	CompletionService
MessageQueue	"Low-level class holding messages to be dispatched by a lopper<div>Messagers not added directly, but through handlers</div><div>See Handler::<br>sendMessage(Message), <br>sendMessageDelayed (Message msg, long delayMillis)</div><div><a href=""https://developer.android.com/reference/android/os/Handler#sendMessageAtTime(android.os.Message,%20long)"">sendMessageAtTime</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">(</span><a href=""https://developer.android.com/reference/android/os/Message"">Message</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">&nbsp;msg,&nbsp;long uptimeMillis)</span><br></div><div>Message obtainMessage (int what, Object obj)<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);""><br></span></div>"
Handler	"<div>A Handler allows you to send and process&nbsp;Message&nbsp;and Runnable objects associated with a thread's&nbsp;MessageQueue. Each Handler instance is associated with a single thread and that thread's message queue. When you create a new Handler it is bound to a&nbsp;Looper. It will deliver messages and runnables to that Looper's message queue and execute them on that Looper's thread.</div><div>sendMessage*() handled by thread of Lupper used to instance</div><div>sendMessage(Message),&nbsp;&nbsp;<br>sendMessageDelayed (Message msg, long delayMillis)</div><div><a href=""https://developer.android.com/reference/android/os/Handler#sendMessageAtTime(android.os.Message,%20long)"">sendMessageAtTime</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">(</span><a href=""https://developer.android.com/reference/android/os/Message"">Message</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">&nbsp;msg,&nbsp;long uptimeMillis)</span><br></div><div>Message obtainMessage (int what, Object obj)</div><div>dispateMessage(Message) - direct call, runs handleMessage() on current thread<br></div>"
HandlerThread	Thread with a Looper<div>Lopper can be used to creat Handlers</div><div>Call Thread.start() like other threads</div><div>If run() is overriden remember to use Lopper::prepare()</div><div>and end w/ Looper::loop()</div>
Message	Defines a message containing a description and arbitrary data<div>get\setData(Bundle)</div><div>what Int - user-defined code</div><div>arg1 int - low-cost data</div><div>arg2 int low-cost data<br></div><div>obj Object</div><div>obtain()</div><div>sendToTarget()<br></div>
ANR	Application Not Responding<div>UI thread blocked</div><div>Blocking main thread prevents ui updates. responding to touch/ user evends, and drawing</div><div>Shown when:</div><div>1 UI thread doesn't respond in 5 SECONDS</div><div>2 BroadcastReceiver hasn't finished in considerable time while an activity of your app is not in foreground</div><div>ANRs excessive if:</div><div>1+ ANRs in 0.47% of daily sessions</div><div>2+ ANRs in 0.24% of daily sessions</div>
Looper	Class to create message loop for Thead<div>prepare() - innit current thread as looper</div><div>create handlers that reference the Looper then loop() to run loop.</div><div>quit() terminate immediately</div><div>quitSafely() therminate whenn all messages are handled</div><div>delated messages won't happen. New messages are refused</div><div>&nbsp;Send message will return false</div><div>quit and quitSafely() on HandlerThread forwarded to the Looper</div>
"<span style=""color: rgb(55, 71, 79); background-color: rgb(241, 243, 244);"">AdvertisingIdClient (Update)</span>"	AdvertisingIdInfo
Intent	"<span style=""color: rgb(32, 33, 36);"">a passive data structure holding an abstract description of an action to be performed with data.<br>Ex. launching and passing data to other activites in app, requesting external actions like send email or get picture</span><div><font color=""#202124""><br></font><div><font color=""#202124"">Intent(String action), Intent(String action, Uri uri), Intent(Context packageContext, Class&lt;?&gt; cls) - launching activity directly<br></font><div><span style=""color: rgb(32, 33, 36);"">putExtra(String key, &lt;Type&gt; value)</span></div><div><span style=""color: rgb(32, 33, 36);"">get&lt;Type&gt;Extra(key, default value)</span></div></div></div>"
Intent Structure	- action<div>- data</div><div>Optional</div><div>- category</div><div>- type</div><div>- component</div><div>- extras</div>
Ninja Build System Component	Used to build parts of Androi
OnLifecycleEvent	annotation
MVVM	Model-View-ViewModel Pattern
InstrumentationRegistry	androidx.test.platform.app
DiffUtil	class in RecyclerView<div>Eugene W. Meyer's Difference Algorithm</div>
BluetoothManager	Context.getSystemService(BluetoothManager.class)<div>BluetoothAdapter getAdapter()</div><div>Context.getSystemService(Context.BLUETOOTH_SERVICE)</div><div>List&lt;BluetoohtDevice&gt; getConnectedDevices(int profile)</div><div>int getConnectionState(BluetoothDevice device, int profile)</div>
InputMethodManager	<div>input method framework (IMF) architecture</div>input method manager<div>input method</div><div>client application</div><div>Input Method Service</div>
ConfigurationInfo	"<span style=""color: rgb(32, 33, 36);"">Information you can retrieve about hardware configuration preferences declared by an application. This corresponds to information collected from the AndroidManifest.xml's &lt;uses-configuration&gt; and &lt;uses-feature&gt; tags.</span>"
FeatureGroupInfo	A set of features that can be requested by an application. This corresponds to information collected from the AndroidManifest.xml's&nbsp;&lt;feature-group&gt;&nbsp;tag.
PermissionInfo	Information you can retrieve about a particular security permission known to the system. This corresponds to information collected from the AndroidManifest.xml's &lt;permission&gt; tags.
ProviderInfo	Holds information about a specific&nbsp;content provider. This is returned by&nbsp;PackageManager.resolveContentProvider().
FeatureInfo	<div>Definition of a single optional hardware or software feature of an Android device.</div><div><br></div><div>This object is used to represent both features supported by a device and features requested by an app. Apps can request that certain features be available as a prerequisite to being installed through the&nbsp;uses-feature&nbsp;tag in their manifests.</div><div><br></div><div>Starting in&nbsp;Build.VERSION_CODES.N, features can have a version, which must always be backwards compatible. That is, a device claiming to support version 3 of a specific feature must support apps requesting version 1 of that feature.</div>
ServiceInfo	Information you can retrieve about a particular application service. This corresponds to information collected from the AndroidManifest.xml's &lt;service&gt; tags.
AAPT2	"<div>AAPT2 (Android Asset Packaging Tool) is a build tool that Android Studio and Android Gradle Plugin use to compile and package your app’s&nbsp;<a href=""https://developer.android.com/guide/topics/resources/providing-resources"">resources</a>. AAPT2 parses, indexes, and compiles the resources into a binary format that is optimized for the Android platform.</div><div>Android Gradle Plugin 3.0.0 and higher enable AAPT2 by default, and you typically won't need to invoke&nbsp;<code>aapt2</code>&nbsp;yourself. However, if you prefer to use your terminal and your own build system over Android Studio, you can use AAPT2 from the command line. You can also debug build errors related to AAPT2 from the command line. To do so, you can find AAPT2 as a standalone tool in&nbsp;<a href=""https://developer.android.com/studio/releases/build-tools"">Android SDK Build Tools</a>&nbsp;26.0.2 and higher.</div>"
sdkmanager	<div>The&nbsp;sdkmanager&nbsp;is a command line tool that allows you to view, install, update, and uninstall packages for the Android SDK. If you're using Android Studio, then you do not need to use this tool and you can instead&nbsp;manage your SDK packages from the IDE.</div><div>The&nbsp;sdkmanager&nbsp;tool is provided in the Android SDK Tools package (25.2.3 and higher) and is located in&nbsp;android_sdk/tools/bin/.</div>
&lt;manifest&gt;	
&lt;uses-permission...&gt;	
&lt;activity&gt;	Declares an activity (an&nbsp;Activity&nbsp;subclass) that implements part of the application's visual user interface.
onCreate()	The only lifecycle that must be implemented in an Activity.&nbsp;<div><br></div><div>Must call setContentView() to define layout for UI<br><div><br></div><div>Initialized essental components of activity here.</div></div>
What lifecycle callback follows onCreate()?	onStart()
onStart()	Entered after onCreate() exits.<br><br>Enters Started state.<div><br></div><div>Activity's final preparation for coming to the foreground and becoming interactive.</div>
OnResume()	Invoked just before activity becomes interactive.<br><br>It is on top of the stack and captures all UI input.<br><br>Most of app functionality will be implemented here.<div><br></div><div>onPause() always follows onResume()</div>
What is the first lifecycle callback invoked for an activity?	onCreate()
What lifecycle callback follows onStart()?	onResume()
What lifecycle callback always follows onResume()?	onPause()
onPause()	Called when activity loses focus and enters a Paused state.<div><br></div><div>Activities still visible, but often indicates user is leaving activity.</div><div><br></div><div>DO NOT use onPause for saving app data, making network calls, or execute database transactions.</div>
What callbacks may follow onPause()?	onStop() if activity is no longer visible or onResume() if user returns to app.&nbsp;
onStop()	"Called when activity is no longer visible to the user.&nbsp;<div><br></div><div><span style=""color: rgb(32, 33, 36);"">This may happen because the activity is being destroyed, a new activity is starting, or an existing activity is entering a Resumed state and is covering the stopped activity.&nbsp;</span></div>"
What lifecycle callbacks may follow onStop()?	Either onRestart() if user is coming back to app, or onDestroy() if activity is completely terminating
onRestart()	Called after an activity has entered a Stopped state and user returned.
onDestroy()	Callback invoked before an activity is destroyed.<div><br>onDestroy()&nbsp;is usually implemented to ensure that all of an activity’s resources are released when the activity, or the process containing it, is destroyed.<br></div>
setContentView()	public void setContentView (int layoutResID)<div>public void setContentView (View view)<br></div>
Bundle	A mapping from String keys to various&nbsp;Parcelable&nbsp;values
"<span style=""color: rgb(32, 33, 36);"">@OnLifecycleEvent(</span>Lifecycle.Event<span style=""color: rgb(32, 33, 36);"">)</span>"	Marks a method of a LifecycleObserver to be called when the Lifecycle.Event is triggered.<br>
Types of Lifecycle.Event	ON_ANY<div>ON_CREATE<br></div><div>ON_DESTROY</div><div>ON_PAUSE</div><div>ON_RESUME</div><div>ON_START</div><div>ON_STOP<br></div>
LifecycleObserver	Marks a class as a LifecycleObserver. It does not have any methods, instead, relies on&nbsp;OnLifecycleEvent&nbsp;annotated methods.
Created state activity's likelihood of being killed	Least
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Started&nbsp;</span>state activity's likelihood of being killed"	Least
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Resumed&nbsp;</span>state activity's likelihood of being killed<br>"	Least
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Paused&nbsp;</span>state activity's likelihood of being killed"	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">More</span>"
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Stopped&nbsp;</span>state activity's likelihood of being killed"	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Most</span>"
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Destroyed&nbsp;</span>state activity's likelihood of being killed"	Most
Activity states most likely to be killed&nbsp;	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Stopped</span><div><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Destroyed</span><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);""><br></span></div>"
Activity states more likely to be killed&nbsp;	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Paused</span>"
Activity states lease likely to be killed&nbsp;	<table><tbody><tr><td>Created<br>Started<br>Resumed</td></tr><tr></tr></tbody></table>
onSaveInstanceState(Bundle)	"<span style=""color: rgb(32, 33, 36);"">This method is called before an activity may be killed so that when it comes back some time in the future it can restore its state<br><br>&nbsp;</span>Always call super.onSaveInstanceState(Bundle)&nbsp;so the default implementation can restore the state of the view hierarchy.<div><span style=""color: rgb(32, 33, 36);""><br>Not called after finish()</span></div>"
onRestoreInstanceState(Bundle)	Always call super.onRestoreInstanceState()&nbsp;so the default implementation can restore the state of the view hierarchy.<br><br>This method is called after&nbsp;onStart()&nbsp;when the activity is being re-initialized from a previously saved state.<br><div><br></div><div>Most implementation will do this in onCreate(Bundle)</div>
onPostCreate(Bundle)	Applications will generally not implement this method; it is intended for system classes to do final initialization after application code has run.
startActivityForResult	<div>Launch an activity for which you would like a result when it finished. When this activity exits, your onActivityResult() method will be called with the given requestCode<br></div><div><br></div>public void startActivityForResult (Intent intent, int requestCode)&nbsp;
"<span style=""color: rgb(32, 33, 36);"">Lifecycle transition</span>"	"<span style=""color: rgb(32, 33, 36);"">When one activity starts another, they both experience lifecycle transitions<br><br></span>1. Activity A's&nbsp;onPause()&nbsp;method executes.<div>2. Activity B's&nbsp;onCreate(),&nbsp;onStart(), and&nbsp;onResume()&nbsp;methods execute in sequence. (Activity B now has user focus.)<div>3. Then, if Activity A is no longer visible on screen, its&nbsp;onStop()&nbsp;method executes.<span style=""color: rgb(32, 33, 36);""><br></span></div></div>"
onConfigurationChanged(Configuration)	Called by the system when the device configuration changes while your activity is running. Note that this will&nbsp;only&nbsp;be called if you have selected configurations you would like to handle with the&nbsp;R.attr.configChanges&nbsp;attribute in your manifest.&nbsp;
&lt;action&gt;	"<span style=""color: rgb(32, 33, 36);"">Adds an action to an intent filter.&nbsp;</span>"
&lt;activity-alias&gt;	"<span style=""color: rgb(32, 33, 36);"">The alias presents the target activity as an independent entity. It can have its own set of intent filters, and they, rather than the intent filters on the target activity itself, determine which intents can activate the target through the alias and how the system treats the alias.&nbsp;</span>"
&lt;category&gt;	"<span style=""color: rgb(32, 33, 36);"">Adds a category name to an intent filter.</span>"
&lt;compatible-screens&gt;	
&lt;data&gt;	
&lt;grant-uri-permission&gt;	
&lt;instrumentation&gt;	
&lt;intent-filter&gt;	
&lt;meta-data&gt;	
&lt;path-permission&gt;	
&lt;permission&gt;	
&lt;permission-group&gt;	
&lt;permission-tree&gt;	
&lt;provider&gt;	
&lt;receiver&gt;	
&lt;service&gt;	
&lt;supports-gl-texture&gt;	
&lt;supports-screens&gt;	
&lt;uses-configuration&gt;	
&lt;uses-feature&gt;	
&lt;uses-library&gt;	
&lt;uses-permission&gt;	
&lt;uses-permission-sdk- 23&gt;	
&lt;uses-sdk&gt;	
onBackPressed()	"By default, doesn't trigger onSaveInstanceState()<div><br></div><div>Override to implement some custom behavior, for e.g. a ""confirm-quit"" dialog.<br></div>"
Fragment	
