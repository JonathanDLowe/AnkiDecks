Canvas	ClipOutPath|Rect()&nbsp; &nbsp; getHeight()|Width()<div>clopPath|Rect()&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; save() | restore()<br>Drawing: scale()&nbsp; &nbsp; rotate()&nbsp; &nbsp; translate()&nbsp; &nbsp; skew()</div><div>drawARGB(int,int,int,int) - full canvas with color</div><div>drawArc(...)&nbsp; &nbsp; drawBitmap(...)&nbsp; &nbsp; drawCircle() drawColor()</div><div>drawLine()&nbsp; &nbsp;drawLines()&nbsp; &nbsp; drawOval()&nbsp; &nbsp; drawPaint()</div><div>drawPath() drawPoint()&nbsp; &nbsp;drawPoints()</div><div>drawRect()&nbsp; &nbsp;drawRoundRect() drawText()</div><div>drawTextOnPath()</div>
Path	addArc() addCircle() addOval()<div>addPath() adREct() addRoundRect()</div><div>arcTo() cubicTo() lineTo() quadTo()</div><div><br></div><div>close()</div><div>rewind()</div><div>reset()</div>
Formatter	%[arg_index$][flags][width][.precision] conversion<div>'b' 'B' boolean</div><div>'h' 'H' hashCode() toHexString()</div><div>'s' 'S' String</div><div>'c' 'C' Unicode character</div><div>'d' decimal</div><div>'o' octal</div><div>'x' 'X' hexadecimal</div><div>'e' 'E' scientific notation</div><div>'f' float</div><div>'t' 'T' date/time</div>
android.location.*	android.location.*<div>- Address</div><div>- Geocode</div><div>- Location</div>
MotionEvent	ACTION_DOWN, ACTION_MOVE, ACTION_UP<div>often delivered via onTouchEvent(MotionEvent)</div><div>getX() | getX(int pointerIdx) | getY() | getY(int)</div><div>getAction() | getActionButton() | getActionIndex()</div><div>getActionMasked()</div><div>getPointerId()</div><div>getPressure()</div>
AsyncTask&lt;T,U,V&gt;	AsyncTask&lt;T,U,V&gt; T - param, U - Progress, V - Result<div>boolean cancel(boolean mayInterrupt)</div><div>AsyncTask execute(T)</div><div>AsyncTask executeOnExecutor( Executor, T)</div><div>getStatus() // AsyncTask.Status</div><div>get() block/wait get(long, TimeUnit) wait for a time</div><div>onPreExecute() | onPostExecute() // UI Thread</div><div>publishProgress() //background onProgressUpdate() //UI</div><div>&gt;= HoneyComb, serially. Use executor for parallel execution.&nbsp;</div>
Settings	android.provider.Settings<div>Setting provider contains globals</div><div>system-level device preferences</div><div>constains many(all?) Action constants for launching a setting activity</div>
ColorSpace	ColorSpace.Adaptation<div>ColorSpace.Connector</div><div>ColorSpace.Model</div><div>ColorSpace.Named</div>
Color	BLACK|BLUE|CYAN|DKGRAY|GREEN...<div>HSVToColor(float[]) | HSVToColor(float alpha, float[])</div><div>RGBToHSV(int red, int green, int blue, float[])</div><div>argb(int alpha, int red, int green, int blue)</div><div>argb(float alpha, float red, float green, float blue)<br></div><div>alpha() red() blue() green()</div><div>Static Helpers <br>alpha(Color) red(Color) blue(Color) green(Color)</div><div>Color convert(ColorSpace&nbsp;colorSpace)<br></div><div>Many more ColorSpace conversion functions</div>
Paint	Paint.Style.STROKE&nbsp; &nbsp; setTypeface(TypeFace)<div>Paint.Join.ROUND&nbsp; &nbsp; setTextSize(float)</div><div>Paint.Cap.ROUND&nbsp; &nbsp;&nbsp;</div><div>setARGB(int, int, int, int)</div><div>setColor(int color)</div><div>setStrokeCap(Paint.Cap)</div><div>setStrokeJoin(Paint.Join)</div><div>setStrokeWidth(float)<br><div><br></div></div>
SurfaceView	SurfaceHolder getHolder()<div>draw(Canvas)</div>
Surface	boolean isValid()<div>lockCanvas(Rect inOutDirty) gets a Canvas for&nbsp; drawing into Surface unlockCanvasAndPost(Canvas) to post new contents to surface.</div>
ObjectAnimator	<div>String getPropertyName()</div><div>Object getTarget()</div><div>of&lt;propertyType&gt;()</div><div>setAutoCancel()//when another ObjectAnimator on the same property starts</div><div>set&lt;propertyTypes&gt;Values(Type...) values to animate between</div><div>start()</div>
VideoView	canPause() canSeekBackward() canSeekForward()<div>getDuration isPlaying()</div><div>pause() resume()</div><div>seekTo(int msec)</div><div>setMediaController()</div><div>setOnPreparedListener()<br></div><div>setOnCompletionListener()</div><div>setVideoURI() setVideoPath()</div><div>start() stopPlayback() suspend()</div>
MediaController	Widget<div>hide() isShowing() show() show(int timeout)</div><div>setMediaPlayer() setMediaPlayer(VideoView)</div><div><br></div>
Fix Overdraw	Eliminate unnecessary backgrounds<div>Remove invisible views</div><div>In custom views, clip generously</div><div>Reduce transparency</div><div>- using a transparency to create a color</div><div>- preprocess images instead using transparency</div><div>Flaten and reorganize view hierarchy</div><div>Resize/ Rearrange views to reduce overlap</div>
LayoutInspector	"Tools &gt; LayoutInspector<div><br></div><div>static ""snapshot: of view heirarchy as defined in XML</div><div>does not connect to running app</div><div>Layout Inspector can help find places to optimize view hierarchy.</div>"
Android Emulator Limitations	Doesn't include virtual hardware for:<div>Bluetooth Device-attached headphones</div><div>NFC&nbsp; &nbsp;USB&nbsp; &nbsp;SD card insert/eject</div><div>Extended sensors such as biometrics</div><div>Missing specialized sensors that some devices have</div>
AppWidget	New &gt; Widget &gt; AppWidget<div>appwidgetprovider - Javaclass thatextends</div><div>AppWidgetProvider which inherits BroadcastReceiver</div><div>REmoteViews</div><div>onClickPendingIntent()</div><div>onEnabled() | onDisbled() open resources on first widget clean up after last wdiget removed</div><div>&lt;appwidget-provider&gt;</div><div>android:initialLayout + midWidth+ minHeight</div>
Vibrator	Context.getSystemServices(VIBRATOR_SERVICE)<div>vibrate(VibrationEffect effect)</div>
VibrationEffect	static VibrationEffect createOneShot(long milli, int amplitude)<div>static VibrationEffect createWaveform(long[] timings, int repeat)</div><div>static VibrationEffect creatveWaveform(long[] timings, int[] amplitudes, int repeat)</div>
PackageManager	Class for retrieving various kinds of Information related to the Application packages that are currently installed on the device.<br><br>Drawable getApplicationIcon(ApplicationInfo|String packageName)<div>List&lt;ApplicationInfo&gt; getInstalledApplication(int flags)</div><div>List&lt;PackageInfo&gt; getInstalledPackages(int flags)</div><div>CharSequences getApplicationLabel(ApplicationInfo)</div>
Class for retrieving various kinds of Information related to the Application packages that are currently installed on the device.	PackageManager
&lt;application&gt;	"<div>Contained in:</div><div>&nbsp; &nbsp; &lt;manifest&gt;</div><div><br></div>AndroidManifest.xml<div><br></div><div><span style=""color: rgb(32, 33, 36);"">The declaration of the application. This element contains subelements that declare each of the application's components and has attributes that can affect all the components</span><br></div><div><span style=""color: rgb(32, 33, 36);""><br></span></div><div><font color=""#202124"">Can Contain:<br></font>&lt;activity&gt;<br>&lt;activity-alias&gt;<br>&lt;meta-data&gt;<br>&lt;service&gt;<br>&lt;receiver&gt;<br>&lt;provider&gt;<br>&lt;uses-library&gt;<font color=""#202124""><br></font></div>"
Android Build Process(Update needed)	1) Compiler converts src into DEX(Dalvik EXE) files<div>2) APK Packager combines DEX files Android compiled resources into<br>3) APK Packager signs APK using debug or release keystore</div><div>4) APK Packager uses zipalign to optimize memory usage on device</div><div>5) Final APK generated</div>
BluetoothAdapter	enable() disable() cancelDiscovery()<div>static checkBluetoothAddres(String addres)</div><div>String getAddres()</div><div>Set&lt;BluetoothDevice&gt; getBondedDevices()</div><div>static getDefaultAdapter()</div><div>String getName()</div><div>int getState() isDiscovering()&nbsp; isEnabled()</div><div>setName(String name)</div><div>startDiscovery()</div>
Fragments	subclass Fragment, public no args constructor required<div>&lt;fragment/&gt; //static</div><div>Add Fragment to View dynamically</div><div>add() to add Fragment</div><div>replace() to replace a Fragment already in a View.</div><div>Or FragmentManager::getSupportFragmentManager()</div><div>FragmentTransaction, FragmentManager::beginTransaction<br><br>Graphical fragments, which contain a user interface. To launch this type of fragment, call&nbsp;launchFragmentInContainer().&nbsp;FragmentScenario&nbsp;attaches the fragment to an activity's root view controller. This containing activity is otherwise empty.<br><br>Non-graphical fragments&nbsp;(sometimes referred to as&nbsp;headless fragments), which store or perform short-term processing on information included in several activities. To launch this type of fragment, call&nbsp;launchFragment().&nbsp;FragmentScenario&nbsp;attaches this type of fragment to an entirely empty activity, one that doesn't have a root view.<br></div>
FragmentTransaction	add(int containerId, Fragment, String tag)<div>add(int containerId, Fragment)</div><div>addSharedElement(View element name)</div><div>addToBackStack(String name)</div><div>commit() | commitNow()</div><div>add() | remove() | replace()<br></div>
Threadpools	Only for massive, parallel tasks.
JobScheduler Needs update	Batch background work<div>JobInfo.Builder(int id, ComponentName cn)</div><div>ComponentName(getPackageName(), MyClass.class JobScheduler getSystemService(JobScheduler.class)</div><div>schedule(JobInfo)</div><div>enqueue(JobInfo)</div>
<div>Protocol Buffers</div>	Nano proto buff<div>flat buff</div>
AsyncTask Call Process	Helpful, but potentially bad<div>Executes serially after Honeycomb because parallel causd errors</div><div>Steps</div><div>1) onPreExecute() - UI</div><div>2) doInBackground()</div><div>3) onProgressUpdate - UI</div><div>4) onPostExecute() - UI</div><div>cancel() | isCancelled()</div><div>executeOnExecutor() for parallel</div><div>with AsyncTask.THREAD_POOL_EXECUTOR</div>
Class for getting current Android build info.	android.os.Build<div>ex. Build.VERSION</div><div>ex. Build.VERSION_CODES</div>
IntentService	Considering using&nbsp; JobIntentService<div>onhandleIntent(Intent) //executes on worker thread</div><div>onBind()</div><div>onStart()</div><div><br></div><div>Stops self after intents are handled</div><div>No stopSelf() needed.<br><div><br></div></div>
Service	Watch for Started vs Bound services<div>startService() | stopService() | bindService() unbind()</div><div>must match number of binds and unbinds for service to stop.</div>
Room Database	Architectural Components<div>Database layer on top of SQLite</div><div>database that takes care of mundane tasks that you&nbsp; used to handle with a helper class. Room database uses the DAO to issue queries to the SQLite database base on functions call. Uses annotations to generate SQL query.</div>
Repository(Room)	Architecture Component<div>A class you create for mananging multiple data sources. In addition to a Room database, the Repository could manage remote data sources such as a server</div>
ViewModel Needs Update	Architectural Components<br>Provides data to the UI and can act as a communication center between the Repository and the UI. Hides backend from UI. ViewModel instances survive device config changes.
LiveData&lt;T&gt;	Architectural Components<div>Data Holder class that follows the observer patter which meants that it can be observed.<br>LiveData is lifecycle-aware, so it automatically manages stopping and resuming observation base on the state.</div>
DAO Needs update	Data Access Object<div><br></div><div>mapping of SQL queries to fuctions. Replaces old method of defining queries in helper class using DAO call functions and component handles the rest.</div>
SQLite Database	Applicate database used by Android.<div>Room persistence library creats and maintains this data base for you.</div>
Entity(Room)	"Annotated class that describes a database table<div>@Entity(tableName=""tableName"")</div><div>@PrimaryKey</div><div>@NotNull</div><div>@ColumnInfo(name=""word"")</div>"
@NotNull	Annotation that declares an argument cannot be null.
An annotation that declares an argument cannot be null.	@NotNull
NavigationUI	Class whic hooks up elements of navigation<div>Associated with the Navigation Graph</div>
Configuration	Contains the current configuration values<div>Received in onConfigurationChanged(Configuartioin newConfig)</div><div>Can be read to manually handle configuration changes&nbsp;</div><div>getResources().getConfiguration() to read the current configuration values.</div>
Lifecycle	Arch. Component
Task	"Collection of activities that user interacts with while performing a job<div>Cohesive unit that can move to the ""background"" when user begins a new task or pressed Home.</div>"
ActivityManager	Class gives info about, and interacts with activies, services, and the containing process.
ActivityManager.AppTask	AppTask allows you to manage your own app's task.<div>ActivityManager.getAppTask()</div>
Lifecycle.State	Used in ActivityScenario for testing<div>CREATED</div><div>DESTROYED</div><div>INITIALIZED</div><div>RESUMED</div><div>STARTED</div>
FLAG_ACTIVITY_NEW_TASK	"Intent Flag<div>started activity will become the start of a new activity</div><div>Used to present ""launcher"" style behavior i.e. list of separate things that are otherwise run completel independently</div><div>If task is already runing current taskgroud to foreground</div><div>See *_MULTIPLE_TASK for flag to disable.</div>"
FLAG_ACTIVITY_CLEAR_TOP	Intent Flag<div>If set, and activity being launched is already running in current task then isntead of new instance, all activities on top of it will be closed and intent will be delivered to now on top&nbsp; existing activity's onNewIntent(FLAG_ACTIVITY_SINGLE_TOP) or it will be finished() and recreated with new intent.</div><div>_CLEAR_TOP | _NEW_TASK to pull existing task to foreground and clears to root state&nbsp;</div>
Core App Components (6)	Activities<div>Fragments</div><div>Services</div><div>Broadcast Receivers</div><div>Intent Filters</div><div>Content Providers</div>
FLAG_ACTIVITY_SINGLE_TOP	Intent flag<div><br></div><div>If set, the activity will not be lauched if it is already running at the top of the history stack.</div>
Log	Log.v(), Log.d() Log.i() Log.w() Log.e()<div>Verbosity(Least to most)&nbsp;</div><div>ERROR, WARN, INFO, DEBUG, VERBOSE</div><div>Verbose should never be compiled in except for dev builds.</div><div>Debug are compiled in but stripped at runtime.</div><div>Error, warn, info always kept</div><div>BP: declare TAG constant</div><div>BP: beware of allocation in Log. Filtered messages would be doing useless work.</div>
<div>ExecutorCompletionService</div>	CompletionService
MessageQueue	"Low-level class holding messages to be dispatched by a lopper<div>Messagers not added directly, but through handlers</div><div>See Handler::<br>sendMessage(Message), <br>sendMessageDelayed (Message msg, long delayMillis)</div><div><a href=""https://developer.android.com/reference/android/os/Handler#sendMessageAtTime(android.os.Message,%20long)"">sendMessageAtTime</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">(</span><a href=""https://developer.android.com/reference/android/os/Message"">Message</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">&nbsp;msg,&nbsp;long uptimeMillis)</span><br></div><div>Message obtainMessage (int what, Object obj)<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);""><br></span></div>"
Handler	"<div>A Handler allows you to send and process&nbsp;Message&nbsp;and Runnable objects associated with a thread's&nbsp;MessageQueue. Each Handler instance is associated with a single thread and that thread's message queue. When you create a new Handler it is bound to a&nbsp;Looper. It will deliver messages and runnables to that Looper's message queue and execute them on that Looper's thread.</div><div>sendMessage*() handled by thread of Lupper used to instance</div><div>sendMessage(Message),&nbsp;&nbsp;<br>sendMessageDelayed (Message msg, long delayMillis)</div><div><a href=""https://developer.android.com/reference/android/os/Handler#sendMessageAtTime(android.os.Message,%20long)"">sendMessageAtTime</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">(</span><a href=""https://developer.android.com/reference/android/os/Message"">Message</a><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">&nbsp;msg,&nbsp;long uptimeMillis)</span><br></div><div>Message obtainMessage (int what, Object obj)</div><div>dispateMessage(Message) - direct call, runs handleMessage() on current thread<br></div>"
HandlerThread	Thread with a Looper<div>Lopper can be used to creat Handlers</div><div>Call Thread.start() like other threads</div><div>If run() is overriden remember to use Lopper::prepare()</div><div>and end w/ Looper::loop()</div>
Message	Defines a message containing a description and arbitrary data<div>get\setData(Bundle)</div><div>what Int - user-defined code</div><div>arg1 int - low-cost data</div><div>arg2 int low-cost data<br></div><div>obj Object</div><div>obtain()</div><div>sendToTarget()<br></div>
ANR	Application Not Responding<div>UI thread blocked</div><div>Blocking main thread prevents ui updates. responding to touch/ user evends, and drawing</div><div>Shown when:</div><div>1 UI thread doesn't respond in 5 SECONDS</div><div>2 BroadcastReceiver hasn't finished in considerable time while an activity of your app is not in foreground</div><div>ANRs excessive if:</div><div>1+ ANRs in 0.47% of daily sessions</div><div>2+ ANRs in 0.24% of daily sessions</div>
Looper	Class to create message loop for Thead<div>prepare() - innit current thread as looper</div><div>create handlers that reference the Looper then loop() to run loop.</div><div>quit() terminate immediately</div><div>quitSafely() therminate whenn all messages are handled</div><div>delated messages won't happen. New messages are refused</div><div>&nbsp;Send message will return false</div><div>quit and quitSafely() on HandlerThread forwarded to the Looper</div>
"<span style=""color: rgb(55, 71, 79); background-color: rgb(241, 243, 244);"">AdvertisingIdClient (Update)</span>"	AdvertisingIdInfo
Intent	"<div>The primary pieces of information in an intent are:</div><ul><li><div><b>action</b>&nbsp;-- The general action to be performed, such as&nbsp;ACTION_VIEW,&nbsp;ACTION_EDIT,&nbsp;ACTION_MAIN,&nbsp;etc.</div></li><li><div><b>data</b>&nbsp;-- The data to operate on, such as a person record in the contacts database, expressed as a&nbsp;Uri.</div></li></ul><span style=""color: rgb(32, 33, 36);""><br>a passive data structure holding an abstract description of an action to be performed with data.<br>Ex. launching and passing data to other activites in app, requesting external actions like send email or get picture</span><div><font color=""#202124""><br></font><div><font color=""#202124"">Intent(String action), Intent(String action, Uri uri), Intent(Context packageContext, Class&lt;?&gt; cls) - launching activity directly<br></font><div><span style=""color: rgb(32, 33, 36);"">putExtra(String key, &lt;Type&gt; value)</span></div><div><span style=""color: rgb(32, 33, 36);"">get&lt;Type&gt;Extra(key, default value)</span></div></div></div>"
Intent Structure	- action<div>- data</div><div>Optional</div><div>- category</div><div>- type</div><div>- component</div><div>- extras</div>
Ninja Build System Component	Used to build parts of Androi
OnLifecycleEvent	annotation
MVVM	Model-View-ViewModel Pattern
InstrumentationRegistry	androidx.test.platform.app
DiffUtil	class in RecyclerView<div>Eugene W. Meyer's Difference Algorithm</div>
BluetoothManager	Context.getSystemService(BluetoothManager.class)<div>BluetoothAdapter getAdapter()</div><div>Context.getSystemService(Context.BLUETOOTH_SERVICE)</div><div>List&lt;BluetoohtDevice&gt; getConnectedDevices(int profile)</div><div>int getConnectionState(BluetoothDevice device, int profile)</div>
InputMethodManager	<div>input method framework (IMF) architecture</div>input method manager<div>input method</div><div>client application</div><div>Input Method Service</div>
ConfigurationInfo	"<span style=""color: rgb(32, 33, 36);"">Information you can retrieve about hardware configuration preferences declared by an application. This corresponds to information collected from the AndroidManifest.xml's &lt;uses-configuration&gt; and &lt;uses-feature&gt; tags.</span>"
FeatureGroupInfo	A set of features that can be requested by an application. This corresponds to information collected from the AndroidManifest.xml's&nbsp;&lt;feature-group&gt;&nbsp;tag.
PermissionInfo	Information you can retrieve about a particular security permission known to the system. This corresponds to information collected from the AndroidManifest.xml's &lt;permission&gt; tags.
ProviderInfo	Holds information about a specific&nbsp;content provider. This is returned by&nbsp;PackageManager.resolveContentProvider().
FeatureInfo	<div>Definition of a single optional hardware or software feature of an Android device.</div><div><br></div><div>This object is used to represent both features supported by a device and features requested by an app. Apps can request that certain features be available as a prerequisite to being installed through the&nbsp;uses-feature&nbsp;tag in their manifests.</div><div><br></div><div>Starting in&nbsp;Build.VERSION_CODES.N, features can have a version, which must always be backwards compatible. That is, a device claiming to support version 3 of a specific feature must support apps requesting version 1 of that feature.</div>
ServiceInfo	Information you can retrieve about a particular application service. This corresponds to information collected from the AndroidManifest.xml's &lt;service&gt; tags.
AAPT2	"<div>AAPT2 (Android Asset Packaging Tool) is a build tool that Android Studio and Android Gradle Plugin use to compile and package your app’s&nbsp;<a href=""https://developer.android.com/guide/topics/resources/providing-resources"">resources</a>. AAPT2 parses, indexes, and compiles the resources into a binary format that is optimized for the Android platform.</div><div>Android Gradle Plugin 3.0.0 and higher enable AAPT2 by default, and you typically won't need to invoke&nbsp;<code>aapt2</code>&nbsp;yourself. However, if you prefer to use your terminal and your own build system over Android Studio, you can use AAPT2 from the command line. You can also debug build errors related to AAPT2 from the command line. To do so, you can find AAPT2 as a standalone tool in&nbsp;<a href=""https://developer.android.com/studio/releases/build-tools"">Android SDK Build Tools</a>&nbsp;26.0.2 and higher.</div>"
sdkmanager	<div>The&nbsp;sdkmanager&nbsp;is a command line tool that allows you to view, install, update, and uninstall packages for the Android SDK. If you're using Android Studio, then you do not need to use this tool and you can instead&nbsp;manage your SDK packages from the IDE.</div><div>The&nbsp;sdkmanager&nbsp;tool is provided in the Android SDK Tools package (25.2.3 and higher) and is located in&nbsp;android_sdk/tools/bin/.</div>
&lt;manifest&gt;	The root element of the AndroidManifest.xml file. It must contain an&nbsp;&lt;application&gt;&nbsp;element and specify&nbsp;xmlns:android&nbsp;and&nbsp;package&nbsp;attributes.<br><br>Must contain:<br><div>&nbsp; &nbsp; &lt;application&gt;</div><div><br></div><div>Can contain:</div><div>&nbsp; &nbsp; &lt;compatible-screens&gt;<br>&nbsp; &nbsp;&nbsp;&lt;instrumentation&gt;<br>&nbsp; &nbsp;&nbsp;&lt;permission&gt;<br>&nbsp; &nbsp;&nbsp;&lt;permission-group&gt;<br>&nbsp; &nbsp;&nbsp;&lt;permission-tree&gt;<br>&nbsp; &nbsp;&nbsp;&lt;supports-gl-texture&gt;<br>&nbsp; &nbsp;&nbsp;&lt;supports-screens&gt;<br>&nbsp; &nbsp;&nbsp;&lt;uses-configuration&gt;<br>&nbsp; &nbsp;&nbsp;&lt;uses-feature&gt;<br>&nbsp; &nbsp;&nbsp;&lt;uses-permission&gt;<br>&nbsp; &nbsp;&nbsp;&lt;uses-permission-sdk-23&gt;<br>&nbsp; &nbsp;&nbsp;&lt;uses-sdk&gt;</div>
&lt;activity&gt;	Declares an activity (an&nbsp;Activity&nbsp;subclass) that implements part of the application's visual user interface.
onCreate()	The only lifecycle that must be implemented in an Activity.&nbsp;<div><br></div><div>Must call setContentView() to define layout for UI<br><div><br></div><div>Initialized essental components of activity here.</div></div>
What lifecycle callback follows onCreate()?	onStart()
onStart()	Entered after onCreate() exits.<br><br>Enters Started state.<div><br></div><div>Activity's final preparation for coming to the foreground and becoming interactive.</div>
OnResume()	Invoked just before activity becomes interactive.<br><br>It is on top of the stack and captures all UI input.<br><br>Most of app functionality will be implemented here.<div><br></div><div>onPause() always follows onResume()</div>
What is the first lifecycle callback invoked for an activity?	onCreate()
What lifecycle callback follows onStart()?	onResume()
What lifecycle callback always follows onResume()?	onPause()
onPause()	Called when activity loses focus and enters a Paused state.<div><br></div><div>Activities still visible, but often indicates user is leaving activity.</div><div><br></div><div>DO NOT use onPause for saving app data, making network calls, or execute database transactions.</div>
What callbacks may follow onPause()?	onStop() if activity is no longer visible or onResume() if user returns to app.&nbsp;
onStop()	"Called when activity is no longer visible to the user.&nbsp;<div><br></div><div><span style=""color: rgb(32, 33, 36);"">This may happen because the activity is being destroyed, a new activity is starting, or an existing activity is entering a Resumed state and is covering the stopped activity.&nbsp;</span></div>"
What lifecycle callbacks may follow onStop()?	Either onRestart() if user is coming back to app, or onDestroy() if activity is completely terminating
onRestart()	Called after an activity has entered a Stopped state and user returned.
onDestroy()	Callback invoked before an activity is destroyed.<div><br>onDestroy()&nbsp;is usually implemented to ensure that all of an activity’s resources are released when the activity, or the process containing it, is destroyed.<br></div>
setContentView()	public void setContentView (int layoutResID)<div>public void setContentView (View view)<br></div>
Bundle	A mapping from String keys to various&nbsp;Parcelable&nbsp;values<br>
"<span style=""color: rgb(32, 33, 36);"">@OnLifecycleEvent(</span>Lifecycle.Event<span style=""color: rgb(32, 33, 36);"">)</span>"	Marks a method of a LifecycleObserver to be called when the Lifecycle.Event is triggered.<br>
Types of Lifecycle.Event	ON_ANY<div>ON_CREATE<br></div><div>ON_DESTROY</div><div>ON_PAUSE</div><div>ON_RESUME</div><div>ON_START</div><div>ON_STOP<br></div>
LifecycleObserver	Marks a class as a LifecycleObserver. It does not have any methods, instead, relies on&nbsp;OnLifecycleEvent&nbsp;annotated methods.
Created state activity's likelihood of being killed	Least
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Started&nbsp;</span>state activity's likelihood of being killed"	Least
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Resumed&nbsp;</span>state activity's likelihood of being killed<br>"	Least
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Paused&nbsp;</span>state activity's likelihood of being killed"	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">More</span>"
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Stopped&nbsp;</span>state activity's likelihood of being killed"	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Most</span>"
"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Destroyed&nbsp;</span>state activity's likelihood of being killed"	Most
Activity states most likely to be killed&nbsp;	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Stopped</span><div><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Destroyed</span><span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);""><br></span></div>"
Activity states more likely to be killed&nbsp;	"<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">Paused</span>"
Activity states lease likely to be killed&nbsp;	<table><tbody><tr><td>Created<br>Started<br>Resumed</td></tr><tr></tr></tbody></table>
onSaveInstanceState(Bundle)	"<span style=""color: rgb(32, 33, 36);"">This method is called before an activity may be killed so that when it comes back some time in the future it can restore its state<br><br>&nbsp;</span>Always call super.onSaveInstanceState(Bundle)&nbsp;so the default implementation can restore the state of the view hierarchy.<div><span style=""color: rgb(32, 33, 36);""><br>Not called after finish()</span></div>"
onRestoreInstanceState(Bundle)	Always call super.onRestoreInstanceState()&nbsp;so the default implementation can restore the state of the view hierarchy.<br><br>This method is called after&nbsp;onStart()&nbsp;when the activity is being re-initialized from a previously saved state.<br><div><br></div><div>Most implementation will do this in onCreate(Bundle)</div>
onPostCreate(Bundle)	Applications will generally not implement this method; it is intended for system classes to do final initialization after application code has run.
startActivityForResult	<div>Launch an activity for which you would like a result when it finished. When this activity exits, your onActivityResult() method will be called with the given requestCode<br></div><div><br></div>public void startActivityForResult (Intent intent, int requestCode)&nbsp;
"<span style=""color: rgb(32, 33, 36);"">Lifecycle transition</span>"	"<span style=""color: rgb(32, 33, 36);"">When one activity starts another, they both experience lifecycle transitions<br><br></span>1. Activity A's&nbsp;onPause()&nbsp;method executes.<div>2. Activity B's&nbsp;onCreate(),&nbsp;onStart(), and&nbsp;onResume()&nbsp;methods execute in sequence. (Activity B now has user focus.)<div>3. Then, if Activity A is no longer visible on screen, its&nbsp;onStop()&nbsp;method executes.<span style=""color: rgb(32, 33, 36);""><br></span></div></div>"
onConfigurationChanged(Configuration)	Called by the system when the device configuration changes while your activity is running. Note that this will&nbsp;only&nbsp;be called if you have selected configurations you would like to handle with the&nbsp;R.attr.configChanges&nbsp;attribute in your manifest.&nbsp;
&lt;action&gt;	"<span style=""color: rgb(32, 33, 36);"">Adds an action to an intent filter.&nbsp;</span>"
&lt;activity-alias&gt;	"<span style=""color: rgb(32, 33, 36);"">The alias presents the target activity as an independent entity. It can have its own set of intent filters, and they, rather than the intent filters on the target activity itself, determine which intents can activate the target through the alias and how the system treats the alias.&nbsp;</span>"
&lt;category&gt;	"<span style=""color: rgb(32, 33, 36);"">Adds a category name to an intent filter.</span>"
&lt;compatible-screens&gt;	"<span style=""color: rgb(32, 33, 36);"">Specifies each screen configuration with which the application is compatible. Only one instance of the&nbsp;</span><code>&lt;compatible-screens&gt;</code><span style=""color: rgb(32, 33, 36);"">&nbsp;element is allowed in the manifest, but it can contain multiple&nbsp;</span><code>&lt;screen&gt;</code><span style=""color: rgb(32, 33, 36);"">&nbsp;elements. Each&nbsp;</span><code>&lt;screen&gt;</code><span style=""color: rgb(32, 33, 36);"">&nbsp;element specifies a specific screen size-density combination with which the application is compatible.</span><div><span style=""color: rgb(32, 33, 36);""><br></span></div><div>Caution:&nbsp;Normally,&nbsp;you should not use this manifest element.<span style=""color: rgb(32, 33, 36);""><br></span></div>"
&lt;data&gt;	"Adds a data specification to an intent filter. The specification can be just a data type (the&nbsp;mimeType&nbsp;attribute), just a URI, or both a data type and a URI. A URI is specified by separate attributes for each of its parts:<br><br>&lt;data android:scheme=""string""<br>&nbsp; &nbsp; &nbsp; android:host=""string""<br>&nbsp; &nbsp; &nbsp; android:port=""string""<br>&nbsp; &nbsp; &nbsp; android:path=""string""<br>&nbsp; &nbsp; &nbsp; android:pathPattern=""string""<br>&nbsp; &nbsp; &nbsp; android:pathPrefix=""string""<br>&nbsp; &nbsp; &nbsp; android:mimeType=""string"" /&gt;<br>"
&lt;grant-uri-permission&gt;	"<span style=""color: rgb(32, 33, 36);"">Specifies the subsets of app data that the parent content provider has permission to access.</span>"
&lt;instrumentation&gt;	Declares an&nbsp;Instrumentation&nbsp;class that enables you to monitor an application's interaction with the system. The Instrumentation object is instantiated before any of the application's components.
&lt;intent-filter&gt;	"<span style=""color: rgb(32, 33, 36);"">Specifies the types of intents that an activity, service, or broadcast receiver can respond to. An intent filter declares the capabilities of its parent component — what an activity or service can do and what types of broadcasts a receiver can handle. It opens the component to receiving intents of the advertised type, while filtering out those that are not meaningful for the component.</span><br><br>must contain:<div>&lt;action&gt;</div><div>can contain:</div><div>&lt;category&gt;<br>&lt;data&gt;</div>"
&lt;meta-data&gt;	A name-value pair for an item of additional, arbitrary data that can be supplied to the parent component. A component element can contain any number of&nbsp;&lt;meta-data&gt;&nbsp;subelements. The values from all of them are collected in a single&nbsp;Bundle&nbsp;object and made available to the component as the&nbsp;PackageItemInfo.metaData&nbsp;field.
&lt;path-permission&gt;	"<span style=""color: rgb(32, 33, 36);"">Defines the path and required permissions for a specific subset of data within a content provider. This element can be specified multiple times to supply multiple paths.</span>"
&lt;permission&gt;	contained in:<div>&nbsp; &nbsp; &lt;manifest&gt;</div><div><br></div><div>Declares a security permission that can be used to limit access to specific components or features of this or other applications. See the&nbsp;Permissions&nbsp;section in the introduction, and the&nbsp;Security and Permissions&nbsp;document for more information on how permissions work.<br></div>
&lt;permission-group&gt;	Contained in:<div>&nbsp; &nbsp; &lt;manifest&gt;<br><br>Declares a name for a logical grouping of related permissions. Individual permission join the group through the&nbsp;permissionGroup&nbsp;attribute of the&nbsp;&lt;permission&gt;&nbsp;element. Members of a group are presented together in the user interface.<div>Note that this element does not declare a permission itself, only a category in which permissions can be placed. See the&nbsp;&lt;permission&gt;&nbsp;element for element for information on declaring permissions and assigning them to groups.</div></div>
&lt;permission-tree&gt;	Declares the base name for a tree of permissions. The application takes ownership of all names within the tree. It can dynamically add new permissions to the tree by calling&nbsp;PackageManager.addPermission(). Names within the tree are separated by periods ('.').
&lt;provider&gt;	<div>Declares a content provider component. A content provider is a subclass of&nbsp;ContentProvider&nbsp;that supplies structured access to data managed by the application. All content providers in your application must be defined in a&nbsp;&lt;provider&gt;&nbsp;element in the manifest file; otherwise, the system is unaware of them and doesn't run them.<br></div><div><br></div>Contained in:<div>&nbsp; &nbsp; &lt;application&gt;<br><br>Can contain:</div><div>&nbsp; &nbsp; &lt;meta-data&gt;<br>&nbsp; &nbsp; &lt;grant-uri-permission&gt;<br>&nbsp; &nbsp; &lt;path-permission&gt;</div>
&lt;receiver&gt;	Declares a broadcast receiver (a&nbsp;BroadcastReceiver&nbsp;subclass) as one of the application's components. Broadcast receivers enable applications to receive intents that are broadcast by the system or by other applications, even when other components of the application are not running.<br><br>Contained in:<div>&nbsp; &nbsp; &lt;application&gt;</div><div>Can contain:</div><div>&nbsp; &nbsp; &lt;intent-filter&gt;</div><div>&nbsp; &nbsp; &lt;meta-data&gt;</div>
&lt;service&gt;	"<span style=""color: rgb(32, 33, 36);"">Declares a service (a&nbsp;</span><code><a href=""https://developer.android.com/reference/android/app/Service"">Service</a></code><span style=""color: rgb(32, 33, 36);"">&nbsp;subclass) as one of the application's components. Unlike activities, services lack a visual user interface. They're used to implement long-running background operations or a rich communications API that can be called by other applications.</span>"
&lt;supports-gl-texture&gt;	"<span style=""color: rgb(32, 33, 36);"">Declares a single GL texture compression format that the app supports.</span>"
&lt;supports-screens&gt;	"<span style=""color: rgb(32, 33, 36);"">Lets you specify the screen sizes your application supports and enable screen compatibility mode for screens larger than what your application supports. It's important that you always use this element in your application to specify the screen sizes your application supports.</span><div><span style=""color: rgb(32, 33, 36);""><br></span></div><div>Note:&nbsp;Screen compatibility mode is&nbsp;not&nbsp;a mode in which you should want your application to run—it causes pixelation and blurring in your UI, due to zooming.&nbsp;<span style=""color: rgb(32, 33, 36);""><br></span></div>"
&lt;uses-configuration&gt;	Indicates what hardware and software features the application requires. For example, an application might specify that it requires a physical keyboard or a particular navigation device, like a trackball. The specification is used to avoid installing the application on devices where it will not work.<br><br>Note: Most apps should not use this manifest tag.&nbsp;You should&nbsp;always&nbsp;support input with a directional pad (d-pad) in order to assist sight-impaired users and support devices that provide d-pad input in addition to or instead of touch.<br>
&lt;uses-feature&gt;	Declares a single hardware or software feature that is used by the application.<div>The purpose of a&nbsp;&lt;uses-feature&gt;&nbsp;declaration is to inform any external entity of the set of hardware and software features on which your application depends. The element offers a&nbsp;required&nbsp;attribute that lets you specify whether your application requires and cannot function without the declared feature, or whether it prefers to have the feature but can function without it.</div>
&lt;uses-library&gt;	"<span style=""color: rgb(32, 33, 36);"">Specifies a shared library that the application must be linked against. This element tells the system to include the library's code in the class loader for the package.</span>"
&lt;uses-permission&gt;	
&lt;uses-permission-sdk- 23&gt;	"Contained in:<div>&lt;manifest&gt;<div><span style=""color: rgb(32, 33, 36);""><br></span></div><div><span style=""color: rgb(32, 33, 36);"">Specifies that an app wants a particular permission, but only if the app is installed on a device running Android 6.0 (</span><a href=""https://developer.android.com/guide/topics/manifest/uses-sdk-element#ApiLevels"">API level</a><span style=""color: rgb(32, 33, 36);"">&nbsp;23) or higher. If the device is running API level 22 or lower, the app does not have the specified permission.</span><div>&lt;uses-permission-sdk-23 android:name=""string""<br>&nbsp; &nbsp; &nbsp; &nbsp; android:maxSdkVersion=""integer"" /&gt;<span style=""color: rgb(32, 33, 36);""><br></span></div></div></div>"
&lt;uses-sdk&gt;	"<span style=""color: rgb(32, 33, 36);"">Lets you express an application's compatibility with one or more versions of the Android platform, by means of an API Level integer. The API Level expressed by an application will be compared to the API Level of a given Android system, which may vary among different Android devices.</span><div><span style=""color: rgb(32, 33, 36);""><br></span></div><div>&lt;uses-sdk android:minSdkVersion=""integer""<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; android:targetSdkVersion=""integer""<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; android:maxSdkVersion=""integer"" /&gt;<span style=""color: rgb(32, 33, 36);""><br></span></div>"
onBackPressed()	"By default, doesn't trigger onSaveInstanceState()<div><br></div><div>Override to implement some custom behavior, for e.g. a ""confirm-quit"" dialog.<br></div>"
Fragment	<div>Lifecycle methods</div><div>onCreate()</div><div>onCreateView()</div><div>onPause()</div><div><br></div>final&nbsp;FragmentActivity getActivity()<br>final&nbsp;Bundle getArguments()<div>Context getContext()<br></div><div>final&nbsp;FragmentManager getFragmentManager()<br></div><div>Lifecycle getLifecycle()<br></div>
How it retrieve an ActivityScenario for testing?	ActivityTestRule::launchActivity&lt;MyActivity&gt;()
launchActivity&lt;MyActivity&gt;()	
Annotation for marking an a test function	@RunWith(AndroidJUnit4::class)
@get:Rule	
Method for driving activity to new state.	ActivityScenario::moveToState(State)
@NonConfigurationInstance	
What is a problem that can occur when getting a result from test activity?	&nbsp;ActivityScenario&nbsp;doesn't call&nbsp;finish()&nbsp;on the activity. If the activity under test isn't finishing or finished, getting result times out and throws a runtime exception.
"<span style=""color: rgb(55, 71, 79); background-color: rgb(241, 243, 244);"">android:taskAffinity</span>"	"&lt;activity&gt;<br><br><span style=""color: rgb(32, 33, 36);"">The task that the activity has an affinity for. Activities with the same affinity conceptually belong to the same task (to the same ""application"" from the user's perspective).<br></span><br><span style=""color: rgb(32, 33, 36);"">By default, all activities in an application have the same affinity. You can set this attribute to group them differently, and even place activities defined in different applications within the same task.</span><br>"
"<span style=""color: rgb(55, 71, 79); background-color: rgb(241, 243, 244);"">android:launchMode</span>"	"&lt;activity&gt;<div><span style=""color: rgb(32, 33, 36);"">An instruction on how the activity should be launched.</span><br></div><div>""standard"" - default, always create new instance<br>""singleTop"" - if activity is on top, routes intent instead of creating new instance<br>""singleTask"" - new&nbsp;<span style=""color: rgb(32, 33, 36); background-color: rgba(255, 255, 255, 0.95);"">activity created at the root of a new task and routes the intent to it, unless it already exists</span><br>""singleInstance"" -&nbsp;<span style=""background-color: rgba(255, 255, 255, 0.95); color: rgb(32, 33, 36);"">The activity is always the single and only member of its task.</span><span style=""color: rgb(32, 33, 36);""><br></span></div><div><br></div>"
"<span style=""color: rgb(55, 71, 79); background-color: rgb(241, 243, 244);"">android:allowTaskReparenting</span>"	"&lt;activity&gt;<div><br></div><div><span style=""color: rgb(32, 33, 36);"">Whether or not the activity can move from the task that started it to the task it has an affinity for when that task is next brought to the front&nbsp;</span><br></div>"
"<span style=""color: rgb(55, 71, 79); background-color: rgb(241, 243, 244);"">android:clearTaskOnLaunch</span>"	"&lt;activity&gt;<div><br></div><div><span style=""color: rgb(32, 33, 36);"">Whether or not all activities will be removed from the task, except for the root activity, whenever it is re-launched from the home screen</span><br></div>"
android:alwaysRetainTaskState	"Whether or not the state of the task that the activity is in will always be maintained by the system — ""true"" if it will be, and ""false"" if the system is allowed to reset the task to its initial state in certain situations.&nbsp;"
android:finishOnTaskLaunch	Whether or not an existing instance of the activity should be shut down (finished) whenever the user again launches its task (chooses the task on the home screen)&nbsp;
&nbsp;Foreground process	"<span style=""color: rgb(32, 33, 36);"">A process that is required for what the user is currently doing.</span>"
Service process	A process that is holding a Service that has been started with the startService().
Cached process	"A process&nbsp;<span style=""color: rgb(32, 33, 36);"">that is not currently needed, so the system is free to kill it as desired when resources like memory are needed elsewhere.</span><div><font color=""#202124""><br></font><div><span style=""color: rgb(32, 33, 36);"">In a normally behaving system, these are the only processes involved in resource management: a well running system will have multiple cached processes always available (for more efficient switching between applications)</span><span style=""color: rgb(32, 33, 36);""><br></span></div><div><span style=""color: rgb(32, 33, 36);""><br></span></div><div><span style=""color: rgb(32, 33, 36);"">Only in very critical (and undesireable) situations will the system get to a point where all cached processes are killed and it must start killing service processes.</span><span style=""color: rgb(32, 33, 36);""><br></span></div></div>"
FragmentActivity	Base class for activities that want to use the support-based&nbsp;Fragments
Fragment lifecycle callbacks	onAttach() - Called when the fragment has been associated with the activity (the&nbsp;Activity&nbsp;is passed in here).<div>onCreateView() - Called to create the view hierarchy associated with the fragment.</div><div>onActivityCreated() - Called when the activity's&nbsp;onCreate()&nbsp;method has returned.</div><div>onDestroyView() - Called when the view hierarchy associated with the fragment is being removed.</div><div>onDetach() - Called when the fragment is being disassociated from the activity.</div>
FragmentScenario	Provides API to start and drive a Fragment's lifecycle state for testing. It works with arbitrary fragments and works consistently across different versions of the Android framework.
Fragment Communication	Often you will want one Fragment to communicate with another, for example to change the content based on a user event. All Fragment-to-Fragment communication is done either through a shared&nbsp;ViewModel&nbsp;or through the associated Activity.<b> Two Fragments should never communicate directly.</b><br><br>The host activity can deliver messages to a fragment by capturing the&nbsp;Fragment&nbsp;instance with&nbsp;findFragmentById(), then directly call the fragment's public methods.<br>
Android App Links	
Uri	
Verify There is an App to Receive the Intent	packageManager.queryIntentActivities(<br>&nbsp; &nbsp; &nbsp; &nbsp; intent,<br>&nbsp; &nbsp; &nbsp; &nbsp; PackageManager.MATCH_DEFAULT_ONLY<br>).isNotEmpty()<br><br>Caution:&nbsp;If you invoke an intent and there is no app available on the device that can handle the intent, your app will crash.<br>
ActivityResultContract	"<span style=""color: rgb(32, 33, 36);"">A contract specifying that an activity can be called with an input of type I and produce an output of type O Makes calling an activity for result type-safe.</span>"
ActivityResultCallback	A type-safe callback to be called when an&nbsp;activity result&nbsp;is available.
ActivityResultLauncher	<div>A launcher for a previously-prepared call&nbsp;to start the process of executing an&nbsp;ActivityResultContract.</div>
&nbsp;ActivityOptionsCompat	
ActivityResultRegistry	A registry that stores&nbsp;activity result callbacks&nbsp;for&nbsp;registered calls. You can create your own instance for testing by overriding&nbsp;invoke(int, ActivityResultContract, I, ActivityOptionsCompat)&nbsp;and calling&nbsp;dispatchResult(int, O)&nbsp;immediately within it, thus skipping the actual&nbsp;Activity.startActivityForResult(Intent, int)&nbsp;call. When testing, make sure to explicitly provide a registry instance whenever calling&nbsp;ActivityResultCaller.registerForActivityResult(ActivityResultContract, ActivityResultCallback), to be able to inject a test instance.
FragmentFactory	Interface used to control the instantiation of&nbsp;Fragment&nbsp;instances. Implementations can be registered with a&nbsp;FragmentManager&nbsp;via&nbsp;FragmentManager.setFragmentFactory(FragmentFactory).
ActivityResultContracts.StartActivityForResult	An&nbsp;ActivityResultContract&nbsp;that doesn't do any type conversion, taking raw&nbsp;Intent&nbsp;as an input and&nbsp;ActivityResult&nbsp;as an output. Can be used with&nbsp;ActivityResultCaller.registerForActivityResult(ActivityResultContract, ActivityResultCallback)&nbsp;to avoid having to manage request codes when calling an activity API for which a type-safe contract is not available.
ActivityResultContracts	"<span style=""color: rgb(32, 33, 36);"">A collection of some standard activity call contracts, as provided by android.</span>"
"<span style=""color: rgb(32, 33, 36); background-color: rgb(255, 255, 255);"">MIME</span>"	
Deep Link	
App Links Assistant	
android.intent.category.BROWSABLE	"<span style=""color: rgb(32, 33, 36);"">It is required in order for the intent filter to be accessible from a web browser. Without it, clicking a link in a browser cannot resolve to your app.</span>"
Android Debug Bridge	adb
How do you create deep links to app content?	"<a href=""https://developer.android.com/training/app-links/deep-linking"">https://developer.android.com/training/app-links/deep-linking</a>"
Digital Asset Links&nbsp;	<div>A&nbsp;Digital Asset Links&nbsp;JSON file must be published on your website to indicate the Android apps that are associated with the website and verify the app's URL intents. The JSON file uses the following fields to identify associated apps:</div>- package_name: The&nbsp;application ID&nbsp;declared in the app's&nbsp;build.gradle&nbsp;file.sha256_cert_fingerprints: The - -- SHA256 fingerprints of your app’s signing certificate. You can use the following command to generate the fingerprint via the Java keytool:
Loaders	"deprecated as of Android P (API 28)<span style=""color: rgb(1, 87, 155); background-color: rgb(225, 245, 254);""><br></span><div>Loaders solve these problems and includes other benefits. For example:</div>Loaders run on separate threads to prevent janky or unresponsive UI.Loaders simplify thread management by providing callback methods when events occur.Loaders persist and cache results across configuration changes to prevent duplicate queries.Loaders can implement an observer to monitor for changes in the underlying data source. For example,&nbsp;CursorLoader&nbsp;automatically registers a&nbsp;ContentObserver&nbsp;to trigger a reload when data changes.<span style=""color: rgb(1, 87, 155); background-color: rgb(225, 245, 254);""><br></span>"
Loader Manager	"<span style=""color: rgb(32, 33, 36);"">Static library support version of the framework's&nbsp;</span><code><a href=""https://developer.android.com/reference/android/app/LoaderManager.html"">LoaderManager</a></code><span style=""color: rgb(32, 33, 36);"">. Used to write apps that run on platforms prior to Android 3.0. When running on Android 3.0 or above, this implementation is still used; it does not try to switch to the framework's implementation. See the framework SDK documentation for a class overview.</span>"
LoaderManager.LoaderCallbacks	"<span style=""color: rgb(32, 33, 36);"">Callback interface for a client to interact with the manager.</span>"
Recents Screen	
documentLaunchMode	
android:maxRecents	
android:excludeFromRecents	
finishAndRemoveTask()	
android:autoRemoveFromRecents	
FLAG_ACTIVITY_RETAIN_IN_RECENTS	
Overview button	"<span style=""color: rgb(32, 33, 36);"">If the user performs a long press on the Overview button, the device puts the current activity in multi-window mode,</span>"
Overview screen	"<span style=""color: rgb(32, 33, 36);"">If the user opens the&nbsp;</span><a href=""https://developer.android.com/guide/components/recents"">Overview screen</a><span style=""color: rgb(32, 33, 36);"">&nbsp;and performs a long press on an activity title, they can drag that activity to a highlighted portion of the screen to put the activity in multi-window mode.</span>"
Picture-in-picture mode	
Multi-Window Lifecycle	In multi-window mode, only the activity the user has most recently interacted with is active at a given time. This activity is considered&nbsp;topmost, and is the only activity in the&nbsp;RESUMED&nbsp;state.<br><br>If an app needs to continue i.e. play video while not resumed app should used onStart/onStop instead of onPause
windowBackground	
android:resizeableActivity	
android:supportsPictureInPicture	
Multi-Window Mode	Note:&nbsp;If you build a multi-orientation app that targets API level 23 or lower, and the user uses the app in multi-window mode, the system forcibly resizes the app. The system presents a dialog box warning the user that the app may behave unexpectedly. The system does&nbsp;not&nbsp;resize fixed-orientation apps; if the user attempts to open a fixed-orientation app under multi-window mode, the app takes over the whole screen.
android:gravity	
Gravity	Standard constants and tools for placing an object within a potentially larger container.
Activity.enterPictureInPictureMode()	
AccessibilityService	
AutofillService	
CallRedirectionService	
HostApduService	
InCallService	
TileService	
VoiceInteractionService	
VrListenerService	
PendingIntent	
CompanionDeviceManager	
device policy controller	
device owner mode	
ShortcutManager	
Android App Bundle	"<span style=""color: rgb(32, 33, 36);"">An&nbsp;</span><em>Android App Bundle</em><span style=""color: rgb(32, 33, 36);"">&nbsp;is a publishing format that includes all your app’s compiled code and resources, and defers APK generation and signing to Google Play.</span>"
res/xml/shortcuts.xml	
Context.getSystemService()	
App Widgets Overview	Checklist<div>- Focus on small portions of glanceable information on your widget. Expand on the information in your app.&nbsp;</div><div>- Choose the right widget type for your purpose.&nbsp;</div><div>- For resizable widgets, plan how the content for your widget should adapt to different sizes.&nbsp;</div><div>- Make your widget orientation and device independent by ensuring that the layout is capable of stretching and contracting.</div>
AppWidgetProviderInfo	
ACTION_APPWIDGET_UPDATE	"<span style=""color: rgb(32, 33, 36);"">broadcast</span>"
&lt;appwidget-provider&gt;	
App Actions	
Slices	"<span style=""color: rgb(32, 33, 36);"">Slices are UI templates that can display rich, dynamic, and interactive content from your app from within the Google Search app and also in other places like the Google Assistant.&nbsp;</span><div><span style=""color: rgb(32, 33, 36);""><br></span></div><div><span style=""color: rgb(32, 33, 36);"">Slices can help users perform tasks faster by enabling engagement outside of the fullscreen app experience.&nbsp;</span></div><div><span style=""color: rgb(32, 33, 36);""><br></span></div><div><span style=""color: rgb(32, 33, 36);"">You can build Slices as enhancements to&nbsp;</span><a href=""https://developer.android.com/guide/actions"">App Actions</a><span style=""color: rgb(32, 33, 36);"">.</span><br></div>"
"<code>SliceProvider</code><span style=""color: rgb(32, 33, 36);"">&nbsp;</span>"	
SliceView	
Slice Viewer	
SliceAction	
ListBuilder	
HeaderBuilder	
Slice template	
RowBuilder	
GridBuilder	
RangeBuilder	
SliceProvider	
Actions.xml	
Google Play	
Google Play Console	
Google API Console	
Google Play Developer API	
purchase token	
order ID	
Play Core Library	
Dynamic Delivery	
Dynamic Asset Delivery	
.aab	
DEX files	
bundletool	
WebView	
PagedList	
Paging Library	
PagedListAdapter&nbsp;	
DataSource	
PagedList.BoundaryCallback	
RecyclerView	
Spinner	
AsyncListUtil	
ViewHolder	
PagedListAdapter	
PagedList.Callback	
AsyncPagedListDiffer	
LivePagedListBuilder	
DataSource.Factory	
PageKeyedDataSource	
ItemKeyedDataSource	
PositionalDataSource	
Room Persistence Library	
onSaveInstanceState()	
AndroidViewModel	
CursorLoader	
onConfigurationChanged()	
AbstractSavedStateViewModelFactory	
SavedStateHandle	
ViewModelScope	
LifecycleScope	
JobScheduler	
bindService()	
startService()	
sendBroadcast()	
sendOrderedBroadcast()	
Explicit Intent	
Implicit Intent	
ACTION_VIEW	
ACTION_SEND	
CATEGORY_BROWSABLE	
CATEGORY_LAUNCHER	
ACTION_EDIT	
ACTION_DIAL	
ACTION_MAIN	
ACTION_GET_CONTENT	
CATEGORY_HOME	
EXTRA_EMAIL	
Intent.createChooser()	
Intent Filter	Unlike Broadcast Receivers that can registered dynamically, intent filters must be declared in the manifest file.
queryIntentActivities()	
queryIntentServices()	
queryBroadcastReceivers()	
Intent Use Cases	<ul><li><b>Starting an activity</b></li><li><b>Starting a service</b></li><li><b>Delivering a broadcast</b></li></ul>
PendingIntent Use Cases	<ul><li>Declaring an intent to be executed when the&nbsp;user performs an action with your&nbsp;Notification&nbsp;(the Android system's&nbsp;NotificationManager&nbsp;executes the&nbsp;Intent).</li><li>Declaring&nbsp;an intent to be executed when the user performs an action with your&nbsp;App Widget&nbsp;(the Home screen app executes the&nbsp;Intent).</li><li>Declaring&nbsp;an intent to be executed at a specified future time (the Android system's&nbsp;AlarmManager&nbsp;executes the&nbsp;Intent).</li></ul>
ACTION_IMAGE_CAPTURE	
ACTION_VIDEO_CAPTURE	
ACTION_INSERT	
ACTION_SHOW_ALARMS	
ACTION_SET_TIMER	
INTENT_ACTION_STILL_IMAGE_CAMERA	
ACTION_PICK	
ACTION_SENDTO	
ACTION_SEND_MULTIPLE	
openFileDescriptor()	
CATEGORY_OPENABLE	
ACTION_OPEN_DOCUMENT	
Android supports what broad categories of sensors?	<ul><li>Motion sensors<div>These sensors measure acceleration forces and rotational forces along three axes. This category includes accelerometers, gravity sensors, gyroscopes, and rotational vector sensors.</div></li><li>Environmental sensors<div>These sensors measure various environmental parameters, such as ambient air temperature and pressure, illumination, and humidity. This category includes barometers, photometers, and thermometers.</div></li><li>Position sensors<div>These sensors measure the physical position of a device. This category includes orientation sensors and magnetometers.</div></li></ul>
SensorEventListener	"<span style=""color: rgb(32, 33, 36);"">You can use this interface to create two callback methods that receive notifications (sensor events) when sensor values change or when sensor accuracy changes.<br><br></span>To monitor raw sensor data you need to implement two callback methods that are exposed through the&nbsp;SensorEventListener&nbsp;interface:&nbsp;onAccuracyChanged()&nbsp;and&nbsp;onSensorChanged()<span style=""color: rgb(32, 33, 36);""><br></span>"
How is reference to a system service obtained?&nbsp;	1. Call Context.getSystemService(Context.SERVICE)<div>2. Cast to appropriate service type.</div><div>ex.</div><div>(SensorManager) getSystemService(Context.SENSOR_SERVICE)</div>
SensorManager.getDefaultSensor(Sensor.TYPE_*)	
How do you change the sampling rate(delay) for a sensor listener?	You can't. If you need to change it, you must unregister and reregister the sensor listener.
@Throws	
WorkManager	"<span style=""color: rgb(32, 33, 36);"">The WorkManager API makes it easy to schedule deferrable, asynchronous tasks that are expected to run even if the app exits or device restarts.</span>"
ListenableWorker	
Worker	
CallbackToFutureAdapter	
HttpsURLConnection	
NetworkOnMainThreadException	
NetworkFragment	
NavHost	
NavController	
&lt;navigation&gt;	
&lt;destination&gt;	
NavHostFragment	
<em>horizontal paging</em>	"<span style=""color: rgb(32, 33, 36);"">navigation pattern -&nbsp;</span><span style=""color: rgb(32, 33, 36);"">Swipe views allow you to navigate between sibling screens, such as tabs, with a horizontal finger gesture, or&nbsp;</span><em>swipe</em><span style=""color: rgb(32, 33, 36);"">.</span>"
FragmentPagerAdapter	
FragmentStatePagerAdapter	
ViewPager	
TabLayout	"setupWithViewPager(viewPager)<br><br>If you have a large or potentially infinite number of pages, set the&nbsp;android:tabMode&nbsp;attribute on your&nbsp;TabLayout&nbsp;to ""scrollable"". This prevents&nbsp;TabLayout&nbsp;from trying to fit all tabs on the screen at once and allows users to scroll through the list of tabs."
@Nullable	
Toolbar	
CollapsingToolbarLayout	
ActionBar	
AppBarConfiguration	
DrawerLayout	
BottomNavigationView&nbsp;	
Referencing style attributes	"<span style=""color: rgb(32, 33, 36);"">To reference a style attribute,&nbsp;</span>use a question-mark (?)."
What does it mean when a resource is prefixed with an ? instead of an @?	The ? indicates it is referencing an attribute in the current style instead of a fix resource.
Global actions<br>	You can use a&nbsp;global action&nbsp;to create a common action that multiple destinations can use. For example, you might want buttons in different destinations to navigate to the same main app screen.
Nested Graph	
Navigation.createNavigateOnClickListener()	
NavAction	
NavOptions	
NavDeepLinkRequest	
popUpTo	
popUpToInclusive	
"<span style=""color: rgb(32, 33, 36);"">FTUE</span>"	<em>first-time user experience</em>
ViewModelStoreOwner	
dp	"<em>density-independent pixels</em><div><span style=""color: rgb(32, 33, 36);"">Preserve the visible size of your UI on screens with different densities</span><em><br></em></div>"
dip	<em>Deprecated abbreviation for density-independent pixels.</em><div><i>Use dp instead.<br></i><div><br></div></div>
sp	"<em>scalable pixels</em><span style=""color: rgb(32, 33, 36);"">&nbsp;</span><div><span style=""color: rgb(32, 33, 36);"">The sp unit is the same size as dp, by default, but it resizes based on the user's preferred text size.</span><span style=""color: rgb(32, 33, 36);""><br></span></div>"
What is a drawback of broadcast receivers?	Having too many broadcast receivers set in app can affect app's performance and user's battery life.
PackageItemInfo.metaData	
PackageItemInfo	
