CountDownLatch	"<span style=""color: rgb(53, 56, 51);"">A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.<br><br></span>- void await()&nbsp;&nbsp;-&nbsp;Causes the current thread to wait until the latch has counted down to zero, unless the thread is&nbsp;interrupted.<br><br><div>-&nbsp;boolean await(long&nbsp;timeout,&nbsp;TimeUnit&nbsp;unit)&nbsp;- Causes the current thread to wait until the latch has counted down to zero, unless the thread is&nbsp;interrupted, or the specified waiting time elapses.<br><br></div><div>-&nbsp;void countDown()&nbsp;- Decrements the count of the latch, releasing all waiting threads if the count reaches zero.<br><br></div><div>-&nbsp;long getCount() - Returns the current count.</div>"
Executor (Java)	<div>Interface</div><div>An object that executes submitted&nbsp;Runnable&nbsp;tasks.<br></div><div><br></div>Primary Abstraction for task execution. Not Thread. Decouples task submission from task execution
ThreadPoolExecutor (Java)	"<div>An&nbsp;ExecutorService&nbsp;that executes each submitted task using one of possibly several pooled threads, normally configured using&nbsp;Executors&nbsp;factory methods.<br></div><div><br></div>Designed for extension<div>""hooks"" for subclasses to override</div><div>beforeExecute()</div><div>afterExecute()</div><div>terminated()</div>"
volatile	"<div><span style=""color: rgba(0, 0, 0, 0.84);"">Changes to a volatile variable are always visible to other threads.</span></div><span style=""color: rgba(0, 0, 0, 0.84);""><div><span style=""color: rgba(0, 0, 0, 0.84);""><br></span></div>“volatile” tells the compiler that the value of a variable must never be cached as its value may change outside of the scope of the program itself.</span><div><font color=""rgba(0, 0, 0, 0.83921568627451)""><br></font></div><div>Volatile variables are more efficien that accessing these variables through synchronized code.<br><div><div><span style=""color: rgba(0, 0, 0, 0.84);""><br></span></div><div><div>volatile vs synchronized:</div>- Mutual Exclusion:&nbsp;It means that only one thread or process can execute a block of code (critical section) at a time.</div><div>- Visibility: It means that changes made by one thread to shared data are visible to other threads.<br></div></div></div>"
ConcurrentMap&lt;K,V&gt; (Java)	Map interface providing thread safety and atomicity<div><br></div><div>Memory consistency effect: actions in thread before adding Object to ConccurencyMap as key or or value happen before actions subsquent to access or removal of that object from the map.</div>
ExecutorService (Java)	Extends Executor<div>addslifecycle management</div><div>3 lifecycle states: running, shutting down, terminated</div><div><br></div><div><br></div><div><div><br>An&nbsp;Executor&nbsp;that provides methods to manage termination and methods that can produce a&nbsp;Future&nbsp;for tracking progress of one or more asynchronous tasks.</div></div><div><br></div><div>booleanawaitTermination(long&nbsp;timeout,&nbsp;TimeUnit&nbsp;unit)<div>Blocks until all tasks have completed execution after a shutdown request, or the timeout occurs, or the current thread is interrupted, whichever happens first.</div>&lt;T&gt;&nbsp;List&lt;Future&lt;T&gt;&gt;invokeAll(Collection&lt;? extends&nbsp;Callable&lt;T&gt;&gt;&nbsp;tasks)<div>Executes the given tasks, returning a list of Futures holding their status and results when all complete.</div>&lt;T&gt;&nbsp;List&lt;Future&lt;T&gt;&gt;invokeAll(Collection&lt;? extends&nbsp;Callable&lt;T&gt;&gt;&nbsp;tasks, long&nbsp;timeout,&nbsp;TimeUnit&nbsp;unit)<div>Executes the given tasks, returning a list of Futures holding their status and results when all complete or the timeout expires, whichever happens first.</div>&lt;T&gt;&nbsp;TinvokeAny(Collection&lt;? extends&nbsp;Callable&lt;T&gt;&gt;&nbsp;tasks)<div>Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do.</div>&lt;T&gt;&nbsp;TinvokeAny(Collection&lt;? extends&nbsp;Callable&lt;T&gt;&gt;&nbsp;tasks, long&nbsp;timeout,&nbsp;TimeUnit&nbsp;unit)<div>Executes the given tasks, returning the result of one that has completed successfully (i.e., without throwing an exception), if any do before the given timeout elapses.</div>booleanisShutdown()<div>Returns&nbsp;true&nbsp;if this executor has been shut down.</div>booleanisTerminated()<div>Returns&nbsp;true&nbsp;if all tasks have completed following shut down.</div>voidshutdown()<div>Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted.</div>List&lt;Runnable&gt;shutdownNow()<div>Attempts to stop all actively executing tasks, halts the processing of waiting tasks, and returns a list of the tasks that were awaiting execution.</div>&lt;T&gt;&nbsp;Future&lt;T&gt;submit(Callable&lt;T&gt;&nbsp;task)<div>Submits a value-returning task for execution and returns a Future representing the pending results of the task.</div>Future&lt;?&gt;submit(Runnable&nbsp;task)<div>Submits a Runnable task for execution and returns a Future representing that task.</div>&lt;T&gt;&nbsp;Future&lt;T&gt;submit(Runnable&nbsp;task, T&nbsp;result)<div>Submits a Runnable task for execution and returns a Future representing that task.</div></div>
FutureTask&lt;V&gt; (Java)	"implements RunnableFuture&lt;V&gt;<div><span style=""color: rgb(53, 56, 51);"">A cancellable asynchronous computation.</span><br></div><div><span style=""color: rgb(53, 56, 51);""><br></span></div><div>Because&nbsp;FutureTask&nbsp;implements&nbsp;Runnable, a&nbsp;FutureTask&nbsp;can be submitted to an&nbsp;Executor&nbsp;for execution.<span style=""color: rgb(53, 56, 51);""><br></span></div>"
Callable&lt;V&gt; (Java)	"<span style=""color: rgb(53, 56, 51);"">A task that returns a result and may throw an exception</span><div>V call() - Computes a result, or throws an exception if unable to do so.<span style=""color: rgb(53, 56, 51);""><br></span></div>"
HashMap vs LinkedHashMap vs TreeMap (Java)	HashMap - key order indeterminant<div>LinkedHashMap - key order 'predicatable i.e. insertion</div><div>TreeMap - keys sorted by 'natural' order or Comparator</div><div><br></div>
ArrayDeque&lt;E&gt; (Java)	Resizable-array implementation of the&nbsp;Deque&nbsp;interface. Array deques have no capacity restrictions; they grow as necessary to support usage. They are not thread-safe; in the absence of external synchronization, they do not support concurrent access by multiple threads. Null elements are prohibited.&nbsp;<div><br></div><div>NOTE: Docs state that likely:&nbsp;</div><div>faster than&nbsp;Stack&nbsp;when used as a stack</div><div>faster than&nbsp;LinkedList&nbsp;when used as a queue.</div>
<div>List Interface</div>	"ex ArrayList, LInkedList, Vector, Stack<div>boolean add(E e), add(int idx, E e), addAll(Collections&lt;E&gt;)</div><div>clear(), isEmpty()</div><div>contains(Object o)</div><div>get(int idx), indexOf(Object o), subList(int fromInc, int toExcl )</div><div>remove(int idx), remove(Object o)</div><div>E set(int idx, E e) - like add, but also gets prev value</div><div>Object[] toArray()</div><div>sort(<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html"">Comparator</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&lt;? super&nbsp;</span><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/List.html"">E</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&gt;&nbsp;c</span>) *<span style=""color: rgb(53, 56, 51);"">well-suited to merging two or more sorted arrays</span></div><div>&lt;T&gt;&nbsp;T[] toArray(T[]&nbsp;a) - *Remember List contains objects, not primitives</div>"
Method Reference	"syntax sugar, clarity<div>sometimes lambda just calls existing function</div><div>Method reference clearer</div><div>ClassName::MedthodName &lt;- without ""()""</div>"
BitSet	"<div><span style=""color: rgb(53, 56, 51);"">a vector of bits that grows as needed. Uses booleans to represent whether set instead of 0 or 1.</span><br></div>and(BitSet) , andNot(BitSet) , or(BitSet)&nbsp;<div>set(index), set(int idx, boolean val), set(int fromInc, int toExcl)</div><div>set(int fromInc, int toExcln, boolean)<br></div><div>boolean get(int), BitSet get(fromInc, toExcl)</div><div>nextClearBit(int from), nextSetBit(int from)</div><div>flip(int), flip(fromInc, toExcl)</div><div>clear(), clear(from, to)</div><div><br></div><div><br></div>"
Iterator&lt;E&gt;	Iterator over a collection, Iterator Pattern<div>forEachRemaining(Consumer&lt;? super E&gt; action)</div><div>boolean hasNext()</div><div>E next()</div><div>default void remove() - if not implemented, throws&nbsp;UnsupportedOperationException&nbsp;<br><div><br></div></div>
"What is the meaning of ""? super E""? (Java)"	Lower Bounded Wildcard<div>Write a method that works on anything that might hold E values i.e. E or super classes of E</div><div>Here be dragons, but check that super class references actually hold the subclass.</div>
Lower Bounded Wildcard format (Java)	? super T
Unbounded Wildcards	Class&lt;?&gt; e.g. Class&lt;T&gt; where the methods used don't depend on the class being i.e. relies purely on Object class methods<div><br></div>
Upper Bounded Wildcards	? extends T<br>For methods that operate on T and all subclasses of T using T's methods.
"What is the meaning of ""? extends T""? (Java)<br>"	Upper Bounded Wildcards
Deadlock Prevention	<br>Causes of Deadlock:<div>1. Mutal Exclusion - only 1 process can access at a time.</div><div>2. Hold and wait: Process already holding a resource</div><div>3. No premption: one process cannot forcibly remove reources from another</div><div>4. Circular Wait: Two or more processes for a circular chain where each process is waiting on another resource in the chain</div><div>Remove 1 of 1-4 to prevent Deadlock</div><div>*Most often focuses on preventing circular wait</div>
Circular Wait	"<span style=""color: rgb(34, 34, 34);"">each process must be&nbsp;</span><b>waiting</b><span style=""color: rgb(34, 34, 34);"">&nbsp;for a resource which is being held by another process, which in turn is&nbsp;</span><b>waiting</b><span style=""color: rgb(34, 34, 34);"">&nbsp;for the first process to release the resource.</span>"
<div><div><div><div><div><div><div><div>Resource preemption</div></div></div></div></div></div></div></div>	"<span style=""color: rgb(34, 34, 34);"">Technique used to break a deadlock in a computer system<br>Drawbacks<br>1 Select Victim</span><div><span style=""color: rgb(34, 34, 34);"">2 How to rollback process</span></div><div><font color=""#222222"">3 Improper usage can lead to Starvation</font></div>"
Starvation	Problem encountered in&nbsp;concurrent computing&nbsp;where a&nbsp;process&nbsp;is perpetually denied necessary&nbsp;resources&nbsp;to process its work.<div>Caused by problems with scheduling, mutual exclusion algorithm, or resource leak.</div><div><br></div><div>Example: If a lock is shared between methods and one long running method is called frequently by one thread, other threads needing to access any of the methods using the same lock with be blocked as well.</div>
System	Static helpers<div>arraycopy(src, srcPos, dest, destPos, length)</div><div>currentTimeMillis()</div><div>exit()</div>
Arrays	Static helpers<div>Arrays.asList(T... args)</div><div>int binarySearch(T[], T key)</div><div>copyOf(T[], int newLength)</div><div>copyOfRange(T[]&nbsp;original, int&nbsp;from, int&nbsp;to)</div><div>equals(T[] arr1, T[]&nbsp; arr2)</div><div>fill(T[] arr, val)</div><div>toString(T[] a)</div>
Set interface	ex. HashSet, TreeSet<div>boolean add(E) // returns true if added i.e. E is unique</div><div>booleanaddAll(Collection&lt;? extends&nbsp;E&gt;&nbsp;c)<br></div><div>void clear(),&nbsp;<br></div><div>boolean contains(Object&nbsp;o),&nbsp;containsAll(Collection&lt;?&gt;&nbsp;c)<br></div><div>boolean remove(Object&nbsp;o), removeAll(Object&nbsp;o) - true if contained<br></div>
Lambdas<br>	1 arg a -&gt; a.doStuff()<div>1 arg with optional type (Animal a ) -&gt; {a.doStuff();}</div>
Supplier&lt;T&gt;	T get()
Consumer&lt;T&gt;	void accept(T t)
Biconsumer&lt;T, U&gt;	void accept(T t, U u)
Predicate&lt;T&gt;	boolean test(T t)
BiPredicate&lt;T,U&gt;	boolean test(T t, U u)
Function&lt;T,R&gt;	R apply(T t)
BiFunction&lt;T,U&gt;	R apply(T t, U u)
UnaryOperator&lt;T&gt;	T apply(T t)
BinaryOperator&lt;T,T&gt;	T apply(T t1, T t2)
Comparator	<div>- function interface</div><div>- custom sorting</div><div>- compare(a, b)</div><div>- lambda</div><div>- java.util</div><div>Collections.sort needs Comparator if not Comparable</div><div>Collections that sort have same requirement</div>
Comparable	- interface<div>- public int compareTo(T obj)</div><div>- java.lang</div><div>returns</div><div>0 if equal</div><div>-1 if arg obj is bigger</div><div>1 if arg obj is smaller</div><div>legacy code requires casting before generics inside object to compare</div>
ArrayList (Java)	"Implements List interface<br><div>boolean add(E e), add(int idx, E e), addAll(Collections&lt;E&gt;)</div><div>clear(), isEmpty()</div><div>contains(Object o)</div><div>get(int idx), indexOf(Object o),&nbsp;</div><div>subList(int fromInc, int toExcl )</div><div>remove(int idx), remove(Object o)</div><div>E set(int idx, E e) - like add, but also gets prev value</div><div>Object[] toArray()</div><div>sort(<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html"">Comparator</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&lt;? super&nbsp;</span><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/List.html"">E</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&gt;&nbsp;c</span>) *<span style=""color: rgb(53, 56, 51);"">well-suited to merging two or more sorted arrays</span></div><div>&lt;T&gt;&nbsp;T[] toArray(T[]&nbsp;a) - *Remember List contains objects, not primitives</div>"
System.arraycopy<br>(Method Signature)	System.arraycopy(src[], int srcPos, dest[], int destPos, int length)
Collections (Java)	Static Helpers<br>addAll(Collection c, T... element)<div>fill(List&lt;T&gt;, T obj)</div><div>min(Collection c), min( Collection, Comparator)</div>max(Collection c), max( Collection, Comparator)<div>frequency(Collection c, obj)</div><div>replaceAll(List, T oldVal, T newVal)</div><div>reverse()</div><div>reverseOrder(), reverseOrder(Comparator)</div><div>swap(List&lt;T&gt;)</div><div>synchronized&lt;Collection|List|Map|Set&gt;</div>
Map Interface	ex. HashMap, TreeMap, LinkedHashMap<div>Map&lt;K,V&gt;</div><div>V get(Object keys)</div><div>void put(K key, V value)</div><div>Set&lt;Entry&lt;K.V&gt;&gt; entrySet()</div><div>Set&lt;K&gt; keySet()</div><div>Collection&lt;V&gt;&nbsp; values()</div><div><br></div><div>merge(K&nbsp;key,&nbsp;V&nbsp;value,&nbsp;BiFunction&lt;? super&nbsp;V,? super&nbsp;V,? extends&nbsp;V&gt;&nbsp;remappingFunction)<br></div><div>compute(K&nbsp;key, BiFunction&lt;? super K,? super V,? extends V&gt;&nbsp;remappingFunction)</div><div>computeIfPresent(...)</div><div>computeIfAbsent(...)</div><div><br></div><div><br></div><div>Android</div><div>use ArrayMap to save memory for &lt;1000</div><div><br></div>
Deque Interface	<div>addLast() - add element or exception Queue</div><div>offerLast() - add element or bool Queue</div><div>removeFirst() //exception Queue And Stack</div><div>pollFirst() - remove/get element or null Queue And Stack</div><div>getFirst() //exception Queue And Stack</div><div>peekFirst() get element or null Queue And Stack</div>
String	Immutable<div>*concatenation creates new String obj</div><div>- length() -trim()</div><div>- charAt(int idx)&nbsp;</div><div>- indexOf(int&nbsp;ch) -indexOf(int ch, int fromIndex)</div><div>- indexOf(String str) -indexOf(String str, int fromIndex)<br></div><div>- substring(int&nbsp;beginIncl)</div><div>- substring(int&nbsp;beginIndex, int&nbsp;endExcl)</div><div>- startsWith(), endsWith()</div><div>- equals(), equalsIgnoreCase()</div><div>- contains(String s)</div><div>- replace(String regex, String replacement)</div>
StringBuilder	Many of String methods<div>- append(String str)</div><div>- insert(int offset, String&nbsp;</div>- delete(int&nbsp;start, int&nbsp;end), deleteCharAt(int idx)<div>- reverse()</div><div>- toString()</div>
Random	"<span style=""color: rgb(71, 71, 71);"">An instance of this class is used to generate a stream of pseudorandom numbers.</span><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);"">If two instances of&nbsp;</span><code>Random</code><span style=""color: rgb(71, 71, 71);"">&nbsp;are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers.&nbsp;</span><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);"">ThreadLocalRandom instead of shared Random class better for concurrency Math.random() for just doubles</span></div><div><font color=""#474747"">One random number nextBoolean(), nextInt(), nextDouble(), nextFloat()&nbsp;</font></div><div><font color=""#474747"">nextInt() has an overload that takes an int exclusiveBound</font></div><div><font color=""#474747"">Stream of random numbers doubles(), ints(), longs()</font></div><div><font color=""#474747"">Each stream type has an overload that takes an int for size</font></div><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);""><br></span></div>"
ReadWriteLock	readLock() acquire lock for reading.<div>Lock writeLock() acquire lock for writing</div>
Lock (Java)	<div>Interface<div><br></div><div>Lock&nbsp;implementations provide more extensive locking operations than can be obtained using&nbsp;synchronized&nbsp;methods and statements. They allow more flexible structuring, may have quite different properties, and may support multiple associated&nbsp;Condition&nbsp;objects.</div></div><div><br></div>Tool for controlling access to shared resource by multiple threads.<div>Synchronized methods/block aquire implicit lock and release in reverse, using lock allows a hand-over-hand locking algorithm</div><div>lock(), unlock()</div><div>lockInterruptibly()</div><div>Condition new Condition()</div><div>boolean tryLock()</div><div>boolean tryLock(long time, TimeUnit unit)</div><div><br></div><div>Important: Check the return values of tryLock() especially when multiple locks are involved. If all locks cannot be acquired, unlock the ones that failed.</div><div><br></div><div><br></div>
Multithreading	implement Runnable or use lambda<div>extend Thread and override run()</div><div>Future&lt;V&gt;</div><div>Callable&lt;V&gt;</div><div>synchronized modifier</div><div>synchronized(object) {} block private object</div><div>Lock lock;</div>
Collectors	averagingDouble(ToDoubleFunction&lt;? super T&gt;&nbsp;mapper)<div>averagingInt(ToIntFunction&lt;? super T&gt;&nbsp;mapper)<br>averagingLong(ToLongFunction&lt;? super T&gt;&nbsp;mapper)<br></div><div><br></div><div>counting()<br></div><div><br></div><div>groupingBy(Function&lt;? super T,? extends K&gt;&nbsp;classifier) - collects into Map<br></div><div><br></div><div>joining() - Stream to String<br></div><div><br></div><div>maxBy(Comparator&lt;? super T&gt;&nbsp;comparator)</div>minBy(Comparator&lt;? super T&gt;&nbsp;comparator)<div><br><div>partitioningBy(Predicate&lt;? super T&gt;&nbsp;predicate) - Map w/ only True and False<br></div></div>
Collector&lt;T,A,R&gt;	T - type of input elements to the reduction op<div>A - mutable accumulation type of reduction op</div><div>R - result type of reduction op</div><div>Supplier&lt;A&gt; supplier Biconsumer&lt;A,T&gt; accumulator</div><div>BinaryOperator cominder, Funciton&lt;A,R&gt; finisher()</div><div>static Collector.of(Supplier accumulator, combiner, finisher, Collector.Characteristics)</div>
Stream	Object toArray() &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt;)<div>Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator)</div><div>Stream&lt;T&gt; skip(long n)</div><div>Stream&lt;T&gt; of(T t) | of(T... values)</div><div>Optional&lt;T&gt; min(Comarator) max(Comparator)</div><div>Int | Long | DoubleStream mapToInt|Long|Double(Function mapper)</div><div>Stream&lt;T&gt; limit(long maxSize) stream of maxSize length shorter</div><div>Stream&lt;T&gt; generate( Supplier&lt;T&gt; s)</div><div>Stream&lt;T&gt; distinct()</div><div>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</div>
Comparator Methods	int compare(T obj1, T obj2)<div><br></div><div>Helper Methods</div><div>naturalOrdering() nullsFirst|Last(Comparator)</div><div>reversed() - Comparator reversed of this Comparator</div><div>reverseOrder() - reversed natural ordering<br></div><div>comparingInt|Long|Double(ToInt|Double|LongFunction)</div><div>thenComparing(...) - similar to above<br><div><br></div></div>
NavigableMap&lt;K,V&gt;	Allows for inexact key retrieval<div>Sorted Map</div><div>ceilingEntry(K key) entry for first key &lt;= key paramenter</div><div>firstEntry(), lastEntry(), pollFirstEntry(), pollLastEntry()</div><div>subMap(K from, K to), subMap(K from, boolean isIncl, K to, boolean isIncl),</div><div>&nbsp;</div>
Concurrent Collections	No ConcurrentModificationException<div>collections.synchronizedcollection(Collection|List|Map|Set)</div><div>ConcurrentHashMap (Java)</div><div>ConcurrentLinkedDeque (Java)</div><div>ConcurrentLinkedQueue (Java)</div><div>ConcurrentSkipListMap (Java)</div><div>ConcurrentSkipListSet (Java)</div><div>CopyOnWriteArraySet (Java)</div><div>CopyOnWriteArrayList (Java)</div><div>LinkedBlockingDeque (Java)</div><div>LinkedBlockingQueue (Java)</div>
Syncronization	synchronized on method or block<div>private synchronized void doStuff()</div><div>synchronized (privateFinalObject) {}</div><div><br></div><div>It is impossible for the statements within a method marked synchronized&nbsp; and synchronized that use the same lock object to interleave. When a synchronized method exits, it happens-before any following invocation of the synchronized method.</div><div><br></div><div>Note: Constructors cannot be synchronized.</div><div><br></div><div>if an object is visible to more than one thread, all reads or writes to that object's variables are done through&nbsp;<code>synchronized</code>&nbsp;methods.<br></div><div><br></div><div>WARNING: Watch for livenss problems.</div><div><br>EXCEPTION: Final fields can be read without synchonization because they never change.</div>
Future&lt;V&gt; (Java)	"<span style=""color: rgb(53, 56, 51);"">A&nbsp;</span>Future<span style=""color: rgb(53, 56, 51);"">&nbsp;represents the result of an asynchronous computation.<br></span><br><span style=""color: rgb(53, 56, 51);"">If you would like to use a&nbsp;</span>Future<span style=""color: rgb(53, 56, 51);"">&nbsp;for the sake of cancellability but not provide a usable result, you can declare types of the form&nbsp;</span><code>Future&lt;?&gt;</code><span style=""color: rgb(53, 56, 51);"">&nbsp;and return&nbsp;</span>null<span style=""color: rgb(53, 56, 51);"">&nbsp;as a result of the underlying task.</span><div><font color=""#353833""><br></font>boolean isDone()<div>boolean isCancelled()</div><div>boolean cancel()</div><div>V get()</div><div>V get(long timeout, TimeUnit units)</div></div>"
TimeUnit	TimeUnit.SECONDS<div>TimeUnit.MINUTES<br></div><div>TimeUnit.HOURS<br></div><div>TimeUnit.DAYS<br></div>
Constructors	first call super() if subclass<div>super() implicit when absent</div><div>super() after first functional line is compiler error</div><div>private constructor prevents subclassing</div>
Java Primitives	boolean<div>byte</div><div>short</div><div>int</div><div>long</div><div>float = 123.45f</div><div>double = 123.45</div><div>char = 'c' using only single-quotes</div><div>binary starts with 0b</div><div>hex starts with 0x</div><div>octal starts with 0</div>
Wrapper Classes	Important because Data Structures don't hold primitives<div>Primitives to Wrapper classes done via autoboxing, but be aware of autoboxing overhead</div><div>Boolean</div><div>Byte</div><div>Short</div><div>Integer</div><div>Long</div><div>Float</div><div>Double</div><div>Character</div>
Class Order of Initialization	1) Superclass if exists<div>2) Static variables, initializers blocks in order</div><div>3) Instance variables, initalizers, blocks in order</div><div>4) Constructor</div>
Aspects of an Immutable Class	1) No setters<div>2 All fields are final<br><div>3) Constructor sets final fields</div><div>4) Doesn't return mutable objects or...</div><div>5) Returns clones of internal mutable objects.</div></div>
Bitwise Operators	| - OR<div>&amp; - AND</div><div>^ - XOR</div><div>~ 0 Complement/Negation all bits inversed</div><div>&gt;&gt; - Signed Right Shift</div><div>&gt;&gt;&gt; - Unsigned Right Shift</div><div>&lt;&lt; Signed Left Shift</div><div>&lt;&lt;&lt; Unsigned Left Shift</div>
| Operator	OR inclusive<div>Set a bit even if set</div>
&amp; Operator	AND Operator<div>Set bit only already set</div><div>Used to check a bit is set i.e. flag</div>
^ Operator	Exclusive OR<br>Set a bit if either is 1, but unset if both are 1<div>Used to toggle a bit's value</div>
~ Operator	Negation/ Complement Operator<div>Flips the bits from 1 to 0 and 0 to 1</div>
Abstract Class	-Class extends abstrac implements interface<div>- first nonabstract subclass must implement abstract methods</div><div>- cannot be instantiated</div><div>- cannot be private or final (class or methds)</div><div>- abstract methods onlin in abstract claass and cannot have a body unless marked default</div><div>interface vars are public, static, final</div><div>-vars must be set on declare because final</div>
Enum type	- not int like c++, use ordinal() for int<div>- cannot extend</div><div>- valueOf() is case-sensitive</div><div>- only private constructor<br><div><br></div></div>
TreeMap	Map.Entry&lt;K,V&gt; ceinlingEntry(K key)<div>K ceilingKey(K key)</div><div>Map.Entry floorEntry(K key)</div><div>K floorKey(K key)</div><div>firstEntry(), lastEntry()</div><div>lowerEntry(), lowerKey()</div><div>higherEntry(), higherKey()&nbsp;</div>
Class<div>Vs</div><div>Static<br>Methods</div>	Class methods act on objects and require instances. Static methods are used from the Class reference
Integer	The&nbsp;Integer&nbsp;class wraps a value of the primitive type&nbsp;int&nbsp;in an object. An object of type&nbsp;Integer&nbsp;contains a single field whose type is&nbsp;int.<div>Integer::bitCount(int i)</div><div>Integer::parseInt(String s), Integer::parseInt(String s, int radix)</div><div>Integer::signum(int i)</div><div>Integer::compare(int&nbsp;x, int&nbsp;y)<br></div><div><br></div>
String::intern()	"<span style=""color: rgb(53, 56, 51);"">Returns a canonical representation for the string object.</span><div><span style=""color: rgb(53, 56, 51);""><br></span></div><div>When the intern method is invoked, if the pool already contains a string equal to this&nbsp;String&nbsp;object as determined by the&nbsp;equals(Object)&nbsp;method, then the string from the pool is returned. Otherwise, this&nbsp;String&nbsp;object is added to the pool and a reference to this&nbsp;String&nbsp;object is returned.<span style=""color: rgb(53, 56, 51);""><br></span></div>"
Collections::fill(List&lt;? super T&gt;&nbsp;list, T&nbsp;obj)	Replaces all of the elements of the specified list with the specified element.
Collections::frequency(Collection&lt;?&gt;&nbsp;c,&nbsp;Object&nbsp;o)	static int<div>Returns the number of elements in the specified collection equal to the specified object.<br></div>
Collections.<br>swap(List&lt;?&gt;&nbsp;list, int&nbsp;i, int&nbsp;j)	<div>static void</div>Swaps the elements at the specified positions in the specified list.
Collections.sort(List&lt;T&gt;&nbsp;list,&nbsp;Comparator&lt;? super T&gt;&nbsp;c)	Sorts the specified list according to the order induced by the specified comparator.
Collections.sort(List&lt;T&gt;&nbsp;list)	Sorts the specified list into ascending order, according to the&nbsp;natural ordering&nbsp;of its elements.
Collections.max(Collection&lt;? extends T&gt;&nbsp;coll)	Returns the maximum element of the given collection, according to the&nbsp;natural ordering&nbsp;of its elements.
Collections.max(Collection&lt;? extends T&gt;&nbsp;coll,&nbsp;Comparator&lt;? super T&gt;&nbsp;comp)	Returns the maximum element of the given collection, according to the order induced by the specified comparator.
Collections.min(Collection&lt;? extends T&gt;&nbsp;coll)	Returns the minimum element of the given collection, according to the&nbsp;natural ordering&nbsp;of its elements.
Collections.min(Collection&lt;? extends T&gt;&nbsp;coll,&nbsp;Comparator&lt;? super T&gt;&nbsp;comp)	Returns the minimum element of the given collection, according to the order induced by the specified comparator.
How to execute many tasks on a separate thread?	Executor Service
URL	"Class&nbsp;URL&nbsp;represents a Uniform Resource Locator, a pointer to a ""resource"" on the World Wide Web.<br><br><span style=""color: rgb(53, 56, 51);"">A URL can optionally specify a ""port"", which is the port number to which the TCP connection is made on the remote host machine. If the port is not specified, the default port for the protocol is used instead<br></span><br>URL(String&nbsp;spec)<div>Creates a&nbsp;URL&nbsp;object from the&nbsp;String&nbsp;representation.</div><div><br></div>URL(String&nbsp;protocol,&nbsp;String&nbsp;host, int&nbsp;port,&nbsp;String&nbsp;file)<div>Creates a&nbsp;URL&nbsp;object from the&nbsp;</div><div><br></div><div>specified&nbsp;protocol,&nbsp;host,&nbsp;port&nbsp;number, and&nbsp;file.</div>URL(String&nbsp;protocol,&nbsp;String&nbsp;host,&nbsp;<div><br></div><div><div>specified&nbsp;protocol,&nbsp;host,&nbsp;port&nbsp;number,&nbsp;file, and&nbsp;handler.</div>URL(String&nbsp;protocol,&nbsp;String&nbsp;host,&nbsp;String&nbsp;file)<div>Creates a URL from the specified&nbsp;protocol&nbsp;name,&nbsp;host&nbsp;name, and&nbsp;file&nbsp;name.</div>URL(URL&nbsp;context,&nbsp;String&nbsp;spec)<div>Creates a URL by parsing the given spec within a specified context.</div><div><br></div><div>String getAuthority()<div>Gets the authority part of this&nbsp;URL.</div>Object getContent()<div>Gets the contents of this URL.</div>Object getContent(Class[]&nbsp;classes)<div>Gets the contents of this URL.</div>int getDefaultPort()<div>Gets the default port number of the protocol associated with this&nbsp;URL.</div>String getFile()<div>Gets the file name of this&nbsp;URL.</div><div><br></div>StringgetHost()<div>Gets the host name of this&nbsp;URL, if applicable.</div><div><br></div>String getPath()<div>Gets the path part of this&nbsp;URL.</div><div><br></div>int getPort()<div>Gets the port number of this&nbsp;URL.</div><div><br></div>String getProtocol()<div>Gets the protocol name of this&nbsp;URL.</div><div><br></div>String getQuery()<div>Gets the query part of this&nbsp;URL.</div></div></div>"
URLConnection	The abstract class&nbsp;URLConnection&nbsp;is the superclass of all classes that represent a communications link between the application and a URL. Instances of this class can be used both to read from and to write to the resource referenced by the URL.<br>Two step process:<br>URL.openConnection()<div>URLConnection.connect()</div>
MulticastSocket	"<span style=""color: rgb(53, 56, 51);"">The multicast datagram socket class is useful for sending and receiving IP multicast packets. A MulticastSocket is a (UDP) DatagramSocket, with additional capabilities for joining ""groups"" of other multicast hosts on the internet.</span>"
MalformedURLException	"<span style=""color: rgb(53, 56, 51);"">Thrown to indicate that a malformed URL has occurred. Either no legal protocol could be found in a specification string or the string could not be parsed.</span>"
What is the process for sending a DatagramPacket?	Open a DatagramSocket. Client can use no-args contructor to get free port. Server needs a fixed port or way to share selected port.<div>Create a byte[] buffer for packet</div><div>Create DatagramPacket(buffer, bufferSize)</div><div>Send and receive packets with socket.receive(DatagramPacket and socket.send(DatagramPacket)</div><div><br></div><div>Address and port can be derived from the received packet for sending a response.</div>
NetworkInterface	"<span style=""color: rgb(71, 71, 71);"">This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface. It is used to identify the local interface on which a multicast group is joined. Interfaces are normally known by names such as ""le0</span>"
Contract for overriding equals()	Reflexive - x.equals(x)<div>Symmetric - x.equals(y) == y.equals(x)</div><div>Transistive - x.equals(y) == y.equals(z) == z.equals(x)</div><div>Constitent - x.equals(x) == x.equals(x)</div><div><br></div><div>Override hashCode()</div>
toString()	Always override it on your objects.
Checklist for Classes	Override equals()<div>Override hashCode()</div><div>Override toString()</div><div>implement Comparable.</div>
Checked vs Runtime Exceptions	Checked exceptions for recoverable errors.<div>Runtime Exceptions for runtime errors.</div><div><br></div><div>Any Exception that isn't a subclass of RuntimeExceptions is a checked exception.</div>
IOException	Checked Exception
IllegalArgumentException	Runtime exception
FileInputStream vs FileReader	FileInputStream::read returns an int that's 8 bits long and FileReader::read returns an int that is 16 bits long
How do readLine() and println() affect line terminators?	readLine() removes the terminator and returns the line.<div>printLine() writes the line and adds a terminator.&nbsp;</div><div>printLine() might not write the same terminator as was removed from readLine().</div>
PrintWriter	Prints formatted representations of objects to a text-output stream. This class implements all of the&nbsp;print&nbsp;methods found in&nbsp;PrintStream. It does not contain methods for writing raw bytes, for which a program should use unencoded byte streams.<div><br></div><div>Unlike the&nbsp;PrintStream&nbsp;class, if automatic flushing is enabled it will be done only when one of the&nbsp;println,&nbsp;printf, or&nbsp;format&nbsp;methods is invoked, rather than whenever a newline character happens to be output. These methods use the platform's own notion of line separator rather than the newline character.<br></div>
PrintStream	A&nbsp;PrintStream&nbsp;adds functionality to another output stream, namely the ability to print representations of various data values conveniently. Two other features are provided as well. Unlike other output streams, a&nbsp;PrintStream&nbsp;never throws an&nbsp;IOException; instead, exceptional situations merely set an internal flag that can be tested via the&nbsp;checkError&nbsp;method. Optionally, a&nbsp;PrintStream&nbsp;can be created so as to flush automatically; this means that the&nbsp;flush&nbsp;method is automatically invoked after a byte array is written, one of the&nbsp;println&nbsp;methods is invoked, or a newline character or byte ('\n') is written.
BufferedWriter	"<span style=""color: rgb(53, 56, 51);"">Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings.</span><div>The buffer size may be specified, or the default size may be accepted. The default is large enough for most purposes.</div><div>A newLine() method is provided, which uses the platform's own notion of line separator as defined by the system property&nbsp;line.separator. Not all platforms use the newline character ('\n') to terminate lines. Calling this method to terminate each output line is therefore preferred to writing a newline character directly.</div><div>In general, a Writer sends its output immediately to the underlying character or byte stream. Unless prompt output is required, it is advisable to wrap a BufferedWriter around any Writer whose write() operations may be costly, such as FileWriters and OutputStreamWriters. For example,</div>"
FileWriter	"<span style=""color: rgb(53, 56, 51);"">Convenience class for writing character files. The constructors of this class assume that the default character encoding and the default byte-buffer size are acceptable. To specify these values yourself, construct an OutputStreamWriter on a FileOutputStream.</span><div>Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one&nbsp;FileWriter&nbsp;(or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open.</div><div><code>FileWriter</code>&nbsp;is meant for writing streams of characters. For writing streams of raw bytes, consider using a&nbsp;<code>FileOutputStream</code>.</div>"
FileOutputStream	A file output stream is an output stream for writing data to a&nbsp;File&nbsp;or to a&nbsp;FileDescriptor. Whether or not a file is available or may be created depends upon the underlying platform. Some platforms, in particular, allow a file to be opened for writing by only one&nbsp;FileOutputStream&nbsp;(or other file-writing object) at a time. In such situations the constructors in this class will fail if the file involved is already open.<div>FileOutputStream&nbsp;is meant for writing streams of raw bytes such as image data. For writing streams of characters, consider using&nbsp;FileWriter.</div>
OutputStreamWriter	An OutputStreamWriter is a bridge from character streams to byte streams: Characters written to it are encoded into bytes using a specified&nbsp;charset. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted.<div>Each invocation of a write() method causes the encoding converter to be invoked on the given character(s). The resulting bytes are accumulated in a buffer before being written to the underlying output stream. The size of this buffer may be specified, but by default it is large enough for most purposes. Note that the characters passed to the write() methods are not buffered.</div><div>For top efficiency, consider wrapping an OutputStreamWriter within a BufferedWriter so as to avoid frequent converter invocations.&nbsp;</div>
BufferedReader	"<span style=""color: rgb(71, 71, 71);"">Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.</span><div>The buffer size may be specified, or the default size may be used. The default is large enough for most purposes.</div><div>In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders.</div>"
InputStreamReader	"<span style=""color: rgb(71, 71, 71);"">An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified&nbsp;</span><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/charset/Charset.html""><code>charset</code></a><span style=""color: rgb(71, 71, 71);"">. The charset that it uses may be specified by name or may be given explicitly, or the platform's default charset may be accepted.</span><div>Each invocation of one of an InputStreamReader's read() methods may cause one or more bytes to be read from the underlying byte-input stream. To enable the efficient conversion of bytes to characters, more bytes may be read ahead from the underlying stream than are necessary to satisfy the current read operation.</div><div>For top efficiency, consider wrapping an InputStreamReader within a BufferedReader.&nbsp;</div>"
BufferedInputStream	"<span style=""color: rgb(71, 71, 71);"">A&nbsp;</span><code>BufferedInputStream</code><span style=""color: rgb(71, 71, 71);"">&nbsp;adds functionality to another input stream-namely, the ability to buffer the input and to support the&nbsp;</span><code>mark</code><span style=""color: rgb(71, 71, 71);"">&nbsp;and&nbsp;</span><code>reset</code><span style=""color: rgb(71, 71, 71);"">&nbsp;methods. When the&nbsp;</span><code>BufferedInputStream</code><span style=""color: rgb(71, 71, 71);"">&nbsp;is created, an internal buffer array is created. As bytes from the stream are read or skipped, the internal buffer is refilled as necessary from the contained input stream, many bytes at a time. The&nbsp;</span><code>mark</code><span style=""color: rgb(71, 71, 71);"">&nbsp;operation remembers a point in the input stream and the&nbsp;</span><code>reset</code><span style=""color: rgb(71, 71, 71);"">&nbsp;operation causes all the bytes read since the most recent&nbsp;</span><code>mark</code><span style=""color: rgb(71, 71, 71);"">&nbsp;operation to be reread before new bytes are taken from the contained input stream.</span><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><table><tbody><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#available--"">available</a></span>()</code><div>Returns an estimate of the number of bytes that can be read (or skipped over) from this input stream without blocking by the next invocation of a method for this input stream.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#close--"">close</a></span>()</code><div>Closes this input stream and releases any system resources associated with the stream.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#mark-int-"">mark</a></span>(int&nbsp;readlimit)</code><div>See the general contract of the&nbsp;<code>mark</code>&nbsp;method of&nbsp;<code>InputStream</code>.</div></td></tr><tr><td><code>boolean</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#markSupported--"">markSupported</a></span>()</code><div>Tests if this input stream supports the&nbsp;<code>mark</code>&nbsp;and&nbsp;<code>reset</code>&nbsp;methods.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#read--"">read</a></span>()</code><div>See the general contract of the&nbsp;<code>read</code>&nbsp;method of&nbsp;<code>InputStream</code>.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#read-byte:A-int-int-"">read</a></span>(byte[]&nbsp;b, int&nbsp;off, int&nbsp;len)</code><div>Reads bytes from this byte-input stream into the specified byte array, starting at the given offset.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#reset--"">reset</a></span>()</code><div>See the general contract of the&nbsp;<code>reset</code>&nbsp;method of&nbsp;<code>InputStream</code>.</div></td></tr><tr><td><code>long</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedInputStream.html#skip-long-"">skip</a></span>(long&nbsp;n)</code><div>See the general contract of the&nbsp;<code>skip</code>&nbsp;method of&nbsp;<code>InputStream</code>.</div></td></tr></tbody></table></div>"
BufferedOutputStream	"<span style=""color: rgb(71, 71, 71);"">The class implements a buffered output stream. By setting up such an output stream, an application can write bytes to the underlying output stream without necessarily causing a call to the underlying system for each byte written.</span><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><table><tbody><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedOutputStream.html#flush--"">flush</a></span>()</code><div>Flushes this buffered output stream.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedOutputStream.html#write-byte:A-int-int-"">write</a></span>(byte[]&nbsp;b, int&nbsp;off, int&nbsp;len)</code><div>Writes&nbsp;<code>len</code>&nbsp;bytes from the specified byte array starting at offset&nbsp;<code>off</code>&nbsp;to this buffered output stream.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/BufferedOutputStream.html#write-int-"">write</a></span>(int&nbsp;b)</code><div>Writes the specified byte to this buffered output stream.</div></td></tr></tbody></table></div>"
Scanner	"<span style=""color: rgb(71, 71, 71);"">A simple text scanner which can parse primitive types and strings using regular expressions.<br><br></span>A&nbsp;Scanner&nbsp;breaks its input into tokens using a delimiter pattern, which by default matches whitespace. The resulting tokens may then be converted into values of different types using the various&nbsp;next&nbsp;methods.<br><span style=""color: rgb(71, 71, 71);""><br>String next()</span><div><span style=""color: rgb(71, 71, 71);"">boolean hasNext()</span></div><div><span style=""color: rgb(71, 71, 71);"">boolean hasNext&lt;Type&gt;()</span></div><div>Scanner useLocale(Locale&nbsp;locale)<span style=""color: rgb(71, 71, 71);""><br></span></div><div>Scanner useDelimiter(Pattern&nbsp;pattern)<br>ScanneruseDelimiter(String&nbsp;pattern)<br></div>"
Console	"Methods to access the character-based console device, if any, associated with the current Java virtual machine.<div><br></div><div>Whether a virtual machine has a console is dependent upon the underlying platform and also upon the manner in which the virtual machine is invoked. If the virtual machine is started from an interactive command line without redirecting the standard input and output streams then its console will exist and will typically be connected to the keyboard and display from which the virtual machine was launched. If the virtual machine is started automatically, for example by a background job scheduler, then it will typically not have a console.</div><br><table><tbody><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html"">Console</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#format-java.lang.String-java.lang.Object...-"">format</a></span>(<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"">String</a>&nbsp;fmt,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html"">Object</a>...&nbsp;args)</code><div>Writes a formatted string to this console's output stream using the specified format string and arguments.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html"">Console</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#printf-java.lang.String-java.lang.Object...-"">printf</a></span>(<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"">String</a>&nbsp;format,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html"">Object</a>...&nbsp;args)</code><div>A convenience method to write a formatted string to this console's output stream using the specified format string and arguments.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Reader.html"">Reader</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#reader--"">reader</a></span>()</code><div>Retrieves the unique&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Reader.html""><code>Reader</code></a>&nbsp;object associated with this console.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"">String</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readLine--"">readLine</a></span>()</code><div>Reads a single line of text from the console.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"">String</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readLine-java.lang.String-java.lang.Object...-"">readLine</a></span>(<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"">String</a>&nbsp;fmt,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html"">Object</a>...&nbsp;args)</code><div>Provides a formatted prompt, then reads a single line of text from the console.</div></td></tr><tr><td><code>char[]</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readPassword--"">readPassword</a></span>()</code><div>Reads a password or passphrase from the console with echoing disabled</div></td></tr><tr><td><code>char[]</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#readPassword-java.lang.String-java.lang.Object...-"">readPassword</a></span>(<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"">String</a>&nbsp;fmt,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Object.html"">Object</a>...&nbsp;args)</code><div>Provides a formatted prompt, then reads a password or passphrase from the console with echoing disabled.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html"">PrintWriter</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/io/Console.html#writer--"">writer</a></span>()</code><div>Retrieves the unique&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/io/PrintWriter.html""><code>PrintWriter</code></a>&nbsp;object associated with this console.</div></td></tr></tbody></table>"
What are the three Standards Streams supported by Java?	System.in, System.out, System.err
What should you do when reading a password?	Use Console.readPassword to read password into char[]<div>Fill arrays with ' ' char after done.</div><div>Avoid using Strings because they are cached.</div><div><br></div>
DataInput	The&nbsp;DataInput&nbsp;interface provides for reading bytes from a binary stream and reconstructing from them data in any of the Java primitive types. There is also a facility for reconstructing a&nbsp;String&nbsp;from data in&nbsp;modified UTF-8&nbsp;format.
DataOutput	"<span style=""color: rgb(53, 56, 51);"">The&nbsp;</span><code>DataOutput</code><span style=""color: rgb(53, 56, 51);"">&nbsp;interface provides for converting data from any of the Java primitive types to a series of bytes and writing these bytes to a binary stream. There is also a facility for converting a&nbsp;</span><code>String</code><span style=""color: rgb(53, 56, 51);"">&nbsp;into&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/io/DataInput.html#modified-utf-8"">modified UTF-8</a><span style=""color: rgb(53, 56, 51);"">&nbsp;format and writing the resulting series of bytes.</span>"
DataOutputStream	"<span style=""color: rgb(71, 71, 71);"">A data output stream lets an application write primitive Java data types to an output stream in a portable way. An application can then use a data input stream to read the data back in.</span>"
DataInputStream	"<span style=""color: rgb(71, 71, 71);"">A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way. An application uses a data output stream to write data that can later be read by a data input stream.</span><div>DataInputStream is not necessarily safe for multithreaded access. Thread safety is optional and is the responsibility of users of methods in this class.</div>"
EOFException	"<span style=""color: rgb(53, 56, 51);"">Signals that an end of file or end of stream has been reached unexpectedly during input.</span><div>This exception is mainly used by data input streams to signal end of stream. Note that many other input operations return a special value on end of stream rather than throwing an exception.</div>"
ObjectInputStream	An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream.<div>ObjectOutputStream and ObjectInputStream can provide an application with persistent storage for graphs of objects when used with a FileOutputStream and FileInputStream respectively. ObjectInputStream is used to recover those objects previously serialized. Other uses include passing objects between hosts using a socket stream or for marshaling and unmarshaling arguments and parameters in a remote communication system.</div>
ObjectOutputStream	An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream. The objects can be read (reconstituted) using an ObjectInputStream. Persistent storage of objects can be accomplished by using a file for the stream. If the stream is a network socket stream, the objects can be reconstituted on another host or in another process.<div>Only objects that support the java.io.Serializable interface can be written to streams. The class of each serializable object is encoded including the class name and signature of the class, the values of the object's fields and arrays, and the closure of any other objects referenced from the initial objects.</div>
FileInputStream	A&nbsp;FileInputStream&nbsp;obtains input bytes from a file in a file system. What files are available depends on the host environment.<div>FileInputStream&nbsp;is meant for reading streams of raw bytes such as image data. For reading streams of characters, consider using&nbsp;FileReader.</div>
Files	<div>This class consists exclusively of static methods that operate on files, directories, or other types of files.<div>In most cases, the methods defined here will delegate to the associated file system provider to perform the file operations.</div></div><div><br></div><div>static boolean exists(Path&nbsp;path,&nbsp;LinkOption...&nbsp;options)<div>Tests whether a file exists.</div></div><div>public static&nbsp;Path&nbsp;move(Path&nbsp;source, Path&nbsp;target, CopyOption...&nbsp;options) throws IOException<br></div>static&nbsp;Path copy(Path&nbsp;source,&nbsp;Path&nbsp;target,&nbsp;CopyOption...&nbsp;options)<div>static&nbsp;Path createDirectory(Path&nbsp;dir,&nbsp;FileAttribute&lt;?&gt;...&nbsp;attrs)<div>Creates a new directory.</div></div><div>static&nbsp;Path createDirectories(Path&nbsp;dir,&nbsp;FileAttribute&lt;?&gt;...&nbsp;attrs)<br></div><div>static void delete(Path&nbsp;path)<div>Deletes a file.</div>static boolean deleteIfExists(Path&nbsp;path)<div>Deletes a file if it exists.</div></div><div><br></div><div>static boolean isSameFile(Path&nbsp;path,&nbsp;Path&nbsp;path2)<div>Tests if two paths locate the same file.</div></div><div>static boolean isSymbolicLink(Path&nbsp;path)<div>Tests whether a file is a symbolic link.</div><div><br></div>static boolean isWritable(Path&nbsp;path)<div>Tests whether a file is writable.</div><div><br></div>static&nbsp;Stream&lt;String&gt; lines(Path&nbsp;path)<div>Read all lines from a file as a&nbsp;Stream.</div></div>
Paths	"<span style=""color: rgb(53, 56, 51);"">This class consists exclusively of static methods that return a&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/nio/file/Path.html""><code>Path</code></a><span style=""color: rgb(53, 56, 51);"">&nbsp;by converting a path string or&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/net/URI.html""><code>URI</code></a><span style=""color: rgb(53, 56, 51);"">.</span>"
FilesSystems	"<span style=""color: rgb(71, 71, 71);"">Factory methods for file systems. This class defines the&nbsp;</span><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/FileSystems.html#getDefault--""><code>getDefault</code></a><span style=""color: rgb(71, 71, 71);"">&nbsp;method to get the default file system and factory methods to construct other types of file systems.</span>"
Path (I/O)	boolean isAbsolute()<br>Path normalize()<div>Returns a path that is this path with redundant name elements eliminated.</div><div>Iterator&lt;Path&gt; iterator()</div><div>File toFile()</div><div>URI toUri()</div><div>Path subpath(int&nbsp;beginIndex, int&nbsp;endIndex)<br></div><div>FileSystem getFileSystem()<br></div><div>Path resolve(Path)</div>
FileSystem	Provides an interface to a file system and is the factory for objects to access files and other objects in the file system.<div>The default file system, obtained by invoking the&nbsp;FileSystems.getDefault&nbsp;method, provides access to the file system that is accessible to the Java virtual machine. The&nbsp;FileSystems&nbsp;class defines methods to create file systems that provide access to other types of (custom) file systems.</div>
"<span style=""color: rgb(71, 71, 71);"">FileSystems</span>"	Factory methods for file systems. This class defines the&nbsp;getDefault&nbsp;method to get the default file system and factory methods to construct other types of file systems.
Closeable	"<span style=""color: rgb(71, 71, 71);"">A&nbsp;</span><code>Closeable</code><span style=""color: rgb(71, 71, 71);"">&nbsp;is a source or destination of data that can be closed. The close method is invoked to release resources that the object is holding (such as open files).</span>"
AutoCloseable	<div>Required for used with try-with-resources</div>Closes this resource, relinquishing any underlying resources. This method is invoked automatically on objects managed by the&nbsp;try-with-resources statement.<div><br></div><div>While this interface method is declared to throw&nbsp;Exception, implementers are&nbsp;strongly&nbsp;encouraged to declare concrete implementations of the&nbsp;close&nbsp;method to throw more specific exceptions, or to throw no exception at all if the close operation cannot fail.</div>
CopyOptions	StandardCopyOption Enums<div>ATOMIC_MOVE, COPY_ATTRIBUTES, REPLACE_EXISTING<br></div><div><br></div><div>LinkOption Enum<br></div><div>NOFOLLOW_LINKS</div><div><br></div>
PushbackReader	A character-stream reader that allows characters to be pushed back into the stream.
How would you check if a file exists?	Files.exists(Path, LinkOptions...)<div>Files.notExists(Path).</div><div><br></div><div>!Files.exists(path)&nbsp;is not equivalent to&nbsp;Files.notExists(path)<br></div><div><br></div><div><div>When you are testing a file's existence, three results are possible:</div>The file is verified to exist.The file is verified to not exist.The file's status is unknown. This result can occur when the program does not have access to the file.<div>If both&nbsp;exists&nbsp;and&nbsp;notExists&nbsp;return&nbsp;false, the existence of the file cannot be verified.</div></div>
How do you check if a file is accessible?	boolean Files.isReadable(Path)<div>boolean Files.isWritable(Path)</div><div>boolean Files.isExecutable(Path)</div><div><br></div><div>Once any of these methods completes, there is no guarantee that the file can be accessed. A common security flaw in many applications is to perform a check and then access the file.&nbsp;<br></div><div><br></div><div>&nbsp;<code>TOCTTOU</code><br></div>
How do you check if two Paths actually point to the same file?	Files.isSameFile(Path, Path)
How would you delete a file in Java?	Files.delete(Path) throws&nbsp;NoSuchFileException&nbsp;<div>Files.deleteIfExists(Path) fails silently.</div>
How do you copy a file in Java?	Manually with input/output streams and/or Reader/Writers<div><br></div><div>File to file</div><div>Files.copy(Path, Path, CopyOptions REPLACE_EXISTING |&nbsp;COPY_ATTRIBUTES | NOFOLLOW_LINKS&nbsp;)</div><div><br></div><div>Stream to file</div><div>Files.copy(InputStream, Path, CopyOptions...)<br></div>
How do you move a file in Java?	Files.move(Path source, Path target, CopyOptions);
How do you check file metadata in Java?	public static long size(Path) Returns the size of a file in bytes<div><br></div><div>boolean isDirectory(Path, LinkOption)</div><div>boolean isRegularFile(Path, LinkOption...)</div><div>boolean isSymbolicLink(Path)</div><div>boolean isHidden(Path)</div><div>getOwner(Path, LinkOption...)<br>setOwner(Path, UserPrincipal)<br></div><div>getAttribute(Path, String, LinkOption...)<br>setAttribute(Path, String, Object, LinkOption...)<br></div>
FileStore	Storage for files. A&nbsp;FileStore&nbsp;represents a storage pool, device, partition, volume, concrete file system or other implementation specific means of file storage. The&nbsp;FileStore&nbsp;for where a file is stored is obtained by invoking the&nbsp;getFileStore&nbsp;method, or all file stores can be enumerated by invoking the&nbsp;getFileStores&nbsp;method.
File I/O Methods Arranged from Less Complex to More Complex	"<img src=""io-fileiomethods.gif"">"
What are file methods common used for simple, small files?	"Files.readAllBytes( Path) throws IOException<div>public static&nbsp;List&lt;String&gt;&nbsp;readAllLines(Path&nbsp;path) throws IOException<br></div><div>public static&nbsp;List&lt;String&gt;&nbsp;readAllLines(Path&nbsp;path, Charset&nbsp;cs) throws IOException<br></div><div>public static&nbsp;Path&nbsp;write(Path&nbsp;path, byte[]&nbsp;bytes, OpenOption...&nbsp;options) throws IOException</div><div><br></div><div><div>The following&nbsp;<code>StandardOpenOptions</code>&nbsp;enums are supported:</div><ul><li><code>WRITE</code>&nbsp;– Opens the file for write access.</li><li><code>APPEND</code>&nbsp;– Appends the new data to the end of the file. This option is used with the&nbsp;<code>WRITE</code>&nbsp;or&nbsp;<code>CREATE</code>&nbsp;options.</li><li><code>TRUNCATE_EXISTING</code>&nbsp;– Truncates the file to zero bytes. This option is used with the&nbsp;<code>WRITE</code>&nbsp;option.</li><li><code>CREATE_NEW</code>&nbsp;– Creates a new file and throws an exception if the file already exists.</li><li><code>CREATE</code>&nbsp;– Opens the file if it exists or creates a new file if it does not.</li><li><code>DELETE_ON_CLOSE</code>&nbsp;– Deletes the file when the stream is closed. This option is useful for temporary files.</li><li><code>SPARSE</code>&nbsp;– Hints that a newly created file will be sparse. This advanced option is honored on some file systems, such as NTFS, where large files with data ""gaps"" can be stored in a more efficient manner where those empty gaps do not consume disk space.</li><li><code>SYNC</code>&nbsp;– Keeps the file (both content and metadata) synchronized with the underlying storage device.</li><li><code>DSYNC</code>&nbsp;– Keeps the file content synchronized with the underlying storage device.</li></ul></div>"
How do you get buffered I/O with nio utilities in Java?	public static BufferedReader newBufferedReader(Path&nbsp;path) throws IOException<div>public static&nbsp;BufferedReader&nbsp;newBufferedReader(Path&nbsp;path, Charset&nbsp;cs) throws IOException<br></div><div>public static BufferedWriter newBufferedWriter(Path&nbsp;path, OpenOption...&nbsp;options) throws IOException<br></div><div>public static&nbsp;BufferedWriter newBufferedWriter(Path&nbsp;path, Charset&nbsp;cs, OpenOption...&nbsp;options) throws IOException<br></div><div><br></div>
How do you get unbuffered I/O with nio utilities in Java?	Methods for Unbuffered Streams and Interoperable with&nbsp;java.io&nbsp;APIs<div>public static&nbsp;InputStream&nbsp;newInputStream(Path&nbsp;path, OpenOption...&nbsp;options) throws IOException<br></div><div>public static&nbsp;OutputStream&nbsp;newOutputStream(Path&nbsp;path, OpenOption...&nbsp;options) throws IOException<br></div><div><br></div>
Channel	Interface<br><br>A nexus for I/O operations.<div>A channel represents an open connection to an entity such as a hardware device, a file, a network socket, or a program component that is capable of performing one or more distinct I/O operations, for example reading or writing.</div><div>A channel is either open or closed. A channel is open upon creation, and once closed it remains closed. Once a channel is closed, any attempt to invoke an I/O operation upon it will cause a&nbsp;ClosedChannelException&nbsp;to be thrown. Whether or not a channel is open may be tested by invoking its&nbsp;isOpen&nbsp;method.</div><div>Channels are, in general, intended to be safe for multithreaded access as described in the specifications of the interfaces and classes that extend and implement this interface.</div>
FileChannel	"<span style=""color: rgb(53, 56, 51);"">A channel for reading, writing, mapping, and manipulating a file.</span>"
SocketChannel	A selectable channel for stream-oriented connecting sockets.<div>A socket channel is created by invoking one of the&nbsp;open&nbsp;methods of this class. It is not possible to create a channel for an arbitrary, pre-existing socket. A newly-created socket channel is open but not yet connected. An attempt to invoke an I/O operation upon an unconnected channel will cause a&nbsp;NotYetConnectedException&nbsp;to be thrown. A socket channel can be connected by invoking its&nbsp;connect&nbsp;method; once connected, a socket channel remains connected until it is closed. Whether or not a socket channel is connected may be determined by invoking its&nbsp;isConnected&nbsp;method.</div>
DatagramChannel	A selectable channel for datagram-oriented sockets.<div>A datagram channel is created by invoking one of the&nbsp;open&nbsp;methods of this class. It is not possible to create a channel for an arbitrary, pre-existing datagram socket. A newly-created datagram channel is open but not connected. A datagram channel need not be connected in order for the&nbsp;send&nbsp;and&nbsp;receive&nbsp;methods to be used. A datagram channel may be connected, by invoking its&nbsp;connect&nbsp;method, in order to avoid the overhead of the security checks are otherwise performed as part of every send and receive operation. A datagram channel must be connected in order to use the&nbsp;read&nbsp;and&nbsp;write&nbsp;methods, since those methods do not accept or return socket addresses.</div>
ByteChannel	A channel that can read and write bytes. This interface simply unifies&nbsp;ReadableByteChannel&nbsp;and&nbsp;WritableByteChannel; it does not specify any new operations.
SeekableByteChannel	"<span style=""color: rgb(71, 71, 71);"">A byte channel that maintains a current&nbsp;</span><i>position</i><span style=""color: rgb(71, 71, 71);"">&nbsp;and allows the position to be changed. Useful for Random Access Files</span><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div>long position()<div>Returns this channel's position.</div>SeekableByteChannel position(long&nbsp;newPosition)<div>Sets this channel's position.</div>int read(ByteBuffer&nbsp;dst)<div>Reads a sequence of bytes from this channel into the given buffer.</div>long size()<div>Returns the current size of entity to which this channel is connected.</div>SeekableByteChannel truncate(long&nbsp;size)<div>Truncates the entity, to which this channel is connected, to the given size.</div>int write(ByteBuffer&nbsp;src)<div>Writes a sequence of bytes to this channel from the given buffer.</div></div>"
How do you create files and directories with nio in Java?	public static&nbsp;Path&nbsp;createFile(Path&nbsp;path, FileAttribute&lt;?&gt;...&nbsp;attrs) throws IOException<div>FileAlreadyExistsException<br><div><br></div><div>public static&nbsp;Path&nbsp;createDirectory(Path&nbsp;dir, FileAttribute&lt;?&gt;...&nbsp;attrs) throws IOException<br></div></div>
FileAlreadyExistsException<br>	"<span style=""color: rgb(53, 56, 51);"">Checked exception thrown when an attempt is made to create a file or directory and a file of that name already exists.</span>"
How do you create temp files with NIO.2?	public static&nbsp;Path&nbsp;createTempFile(Path&nbsp;dir, String&nbsp;prefix, String&nbsp;suffix, FileAttribute&lt;?&gt;...&nbsp;attrs) throws IOException<br><br>public static&nbsp;Path&nbsp;createTempFile(String&nbsp;prefix, String&nbsp;suffix, FileAttribute&lt;?&gt;...&nbsp;attrs) throws IOException<br>
Buffer	nio abstract<div><br></div><div><table><tbody><tr><td><br>A container for data of a specific primitive type.<div>A buffer is a linear, finite sequence of elements of a specific primitive type. Aside from its content, the essential properties of a buffer are its capacity, limit, and position:</div><blockquote><div>A buffer's&nbsp;<i>capacity</i>&nbsp;is the number of elements it contains. The capacity of a buffer is never negative and never changes.</div><div>A buffer's&nbsp;<i>limit</i>&nbsp;is the index of the first element that should not be read or written. A buffer's limit is never negative and is never greater than its capacity.</div><div>A buffer's&nbsp;<i>position</i>&nbsp;is the index of the next element to be read or written. A buffer's position is never negative and is never greater than its limit.</div></blockquote><div>There is one subclass of this class for each non-boolean primitive type.</div></td></tr></tbody></table></div>
How to create directories with Nio	createDirectory public static&nbsp;Path&nbsp;createDirectory(Path&nbsp;dir, FileAttribute&lt;?&gt;...&nbsp;attrs) throws IOException<div><br><div>public static&nbsp;Path&nbsp;createDirectories(Path&nbsp;dir, FileAttribute&lt;?&gt;...&nbsp;attrs) throws IOException&nbsp;</div><div>Creates a directory by creating all nonexistent parent directories first. Unlike the&nbsp;createDirectory&nbsp;method, an exception is not thrown if the directory could not be created because it already exists.<br></div><div><br></div><div>public static&nbsp;Path&nbsp;createTempDirectory(Path&nbsp;dir, String&nbsp;prefix, FileAttribute&lt;?&gt;...&nbsp;attrs) throws IOException<br></div><div><br></div><div><br></div><div>UnsupportedOperationException&nbsp;- if the array contains an attribute that cannot be set atomically when creating the directoryFileAlreadyExistsException&nbsp;- if a directory could not otherwise be created because a file of that name already exists&nbsp;(optional specific exception)IOException&nbsp;- if an I/O error occurs or the parent directory does not existSecurityException&nbsp;- In the case of the default provider, and a security manager is installed, the&nbsp;checkWrite&nbsp;method is invoked to check write access to the new directory.<br></div></div>
How do you list the contents of a directory with NIO.2?	DirectoryStream&lt;Path&gt; stream = Files.newDirectoryStream(Path);<div>for (Path file: stream) {</div><div>&nbsp; &nbsp; //do something</div><div>}</div><div><br></div><div>Don't forget to wrap with try statement!</div>
Creating links with NIO.2	Path Files.createLink(Path link, Path target)<div>Path createSymbolicLink(Path&nbsp;link, Path&nbsp;target, FileAttribute&lt;?&gt;...&nbsp;attrs)<div>Creates a symbolic link to a target&nbsp;(optional operation).</div></div>
SimpleFileVisitor	"<span style=""color: rgb(53, 56, 51);"">A simple visitor of files with default behavior to visit all files and to re-throw I/O errors.</span><div>Methods in this class may be overridden subject to their general contract.<br><br>FileVisitResultpostVisitDirectory(T&nbsp;dir,&nbsp;IOException&nbsp;exc)<div>Invoked for a directory after entries in the directory, and all of their descendants, have been visited.</div>FileVisitResultpreVisitDirectory(T&nbsp;dir,&nbsp;BasicFileAttributes&nbsp;attrs)<div>Invoked for a directory before entries in the directory are visited.</div>FileVisitResultvisitFile(T&nbsp;file,&nbsp;BasicFileAttributes&nbsp;attrs)<div>Invoked for a file in a directory.</div>FileVisitResultvisitFileFailed(T&nbsp;file,&nbsp;IOException&nbsp;exc)<div>Invoked for a file that could not be visited.&nbsp;</div></div>"
FileVisitResult	The result type of a&nbsp;FileVisitor. Return value used to indicated desired behavior of walk after finishing the current callback function.<div>Enum</div><div>CONTINUE<div>Continue.</div>SKIP_SIBLINGS<div>Continue without visiting the&nbsp;siblings&nbsp;of this file or directory.</div>SKIP_SUBTREE<div>Continue without visiting the entries in this directory.</div>TERMINATE<div>Terminate.</div></div>
How to walk the file tree with NIO.2 in Java?	Path Files.walkFileTree(Path, FileVisitor)<br><div>Path Files.walkFileTree(Path, Set&lt;FileVisitOption&gt;, int, FileVisitor)</div>
Watch Service API	"<table><tbody><tr><th>Modifier and Type</th><th>Method and Description</th></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchService.html#close--"">close</a></span>()</code><div>Closes this watch service.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchKey.html"">WatchKey</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchService.html#poll--"">poll</a></span>()</code><div>Retrieves and removes the next watch key, or&nbsp;<code>null</code>&nbsp;if none are present.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchKey.html"">WatchKey</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchService.html#poll-long-java.util.concurrent.TimeUnit-"">poll</a></span>(long&nbsp;timeout,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html"">TimeUnit</a>&nbsp;unit)</code><div>Retrieves and removes the next watch key, waiting if necessary up to the specified wait time if none are yet present.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchKey.html"">WatchKey</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/nio/file/WatchService.html#take--"">take</a></span>()</code><div>Retrieves and removes next watch key, waiting if none are yet present.</div></td></tr></tbody></table>"
WatchService	A watch service that&nbsp;watches&nbsp;registered objects for changes and events. For example a file manager may use a watch service to monitor a directory for changes so that it can update its display of the list of files when files are created or deleted.<div><br></div><div>A&nbsp;Watchable&nbsp;object is registered with a watch service by invoking its&nbsp;register&nbsp;method, returning a&nbsp;WatchKey&nbsp;to represent the registration. When an event for an object is detected the key is&nbsp;signalled, and if not currently signalled, it is queued to the watch service so that it can be retrieved by consumers that invoke the&nbsp;poll&nbsp;or&nbsp;take&nbsp;methods to retrieve keys and process events. Once the events have been processed the consumer invokes the key's&nbsp;reset&nbsp;method to reset the key which allows the key to be signalled and re-queued with further events.<br></div><div><br></div>
WatchKey&nbsp;register(WatchService&nbsp;watcher, WatchEvent.Kind&lt;?&gt;...&nbsp;events)	"<span style=""color: rgb(71, 71, 71);"">Registers an object with a watch service.</span>"
WatchKey	A token representing the registration of a&nbsp;watchable&nbsp;object with a&nbsp;WatchService.
LinkedList (Java)	"<span style=""color: rgb(53, 56, 51);"">Doubly-linked list implementation of the&nbsp;</span><code>List</code><span style=""color: rgb(53, 56, 51);"">&nbsp;and&nbsp;</span><code>Deque</code><span style=""color: rgb(53, 56, 51);"">&nbsp;interfaces. Implements all optional list operations, and permits all elements (including&nbsp;</span><code>null</code><span style=""color: rgb(53, 56, 51);"">).</span><div>All of the operations perform as could be expected for a doubly-linked list. Operations that index into the list will traverse the list from the beginning or the end, whichever is closer to the specified index.</div>"
HashMap (Java)	"<span style=""color: rgb(71, 71, 71);"">Hash table based implementation of the&nbsp;</span>Map<span style=""color: rgb(71, 71, 71);"">&nbsp;interface.</span><div><span style=""color: rgb(71, 71, 71);"">This implementation provides all of the optional map operations, and permits&nbsp;</span><b>null</b><span style=""color: rgb(71, 71, 71);""><b>&nbsp;</b>values and the&nbsp;</span><b>null</b><span style=""color: rgb(71, 71, 71);""><b>&nbsp;</b>key.</span><font color=""#474747""><br></font><div><span style=""color: rgb(71, 71, 71);"">Supports setting initialCapacity and a custome loadFactor.</span></div></div><div><span style=""color: rgb(71, 71, 71);"">No guarantee of order nor guarantee a previous order will remain constant over time.</span></div><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);"">V get(Object key)</span></div><div><span style=""color: rgb(71, 71, 71);"">V getOrDefault(Object key, V defaultValue)</span></div><div><span style=""color: rgb(71, 71, 71);"">V put(K key, V value)</span></div><div>V putIfAbsent(K&nbsp;key,&nbsp;V&nbsp;value)<span style=""color: rgb(71, 71, 71);""><br></span></div><div>boolean containsKey(Object key)</div><div>boolean containsValue(Object value)</div><div>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()<span style=""color: rgb(71, 71, 71);""><br></span></div><div>Set&lt;K&gt; keySet()</div><div>V remove(Object&nbsp;key)<br></div><div><br></div>"
TreeMap (Java)	"&nbsp;Red-Black tree based&nbsp;NavigableMap&nbsp;implementation. The map is sorted according to the&nbsp;natural ordering&nbsp;of its keys, or by a&nbsp;Comparator&nbsp;provided at map creation time, depending on which constructor is used.<div><br></div><div><span style=""color: rgb(71, 71, 71);"">This implementation provides guaranteed log(n) time cost for the&nbsp;</span><code>containsKey</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>get</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>put</code><span style=""color: rgb(71, 71, 71);"">&nbsp;and&nbsp;</span><code>remove</code><span style=""color: rgb(71, 71, 71);"">&nbsp;operations.</span><br></div>"
CopyOnWriteArrayList (Java)	A thread-safe variant of&nbsp;ArrayList&nbsp;in which all mutative operations (add,&nbsp;set, and so on) are implemented by making a fresh copy of the underlying array.<div>This is ordinarily too costly, but may be&nbsp;more&nbsp;efficient than alternatives when traversal operations vastly outnumber mutations, and is useful when you cannot or don't want to synchronize traversals, yet need to preclude interference among concurrent threads.</div>
ConcurrentHashMap (Java)	A hash table supporting full concurrency of retrievals and high expected concurrency for updates.&nbsp;<div>No support for locking entire table.</div><div>get() does not block so may overlap with updates(put &amp; remove).</div><div>putAll() and clear() are not atomic and retrievals might get a transient state.</div><div><br></div>
LinkedBlockingQueue&lt;E&gt; (Java)	An optionally-bounded&nbsp;blocking queue&nbsp;based on linked nodes.
LinkedBlockingDeque&lt;E&gt;	An optionally-bounded&nbsp;blocking deque&nbsp;based on linked nodes.
ConcurrentSkipListSet (Java)	A scalable concurrent&nbsp;NavigableSet&nbsp;implementation based on a&nbsp;ConcurrentSkipListMap. The elements of the set are kept sorted according to their&nbsp;natural ordering, or by a&nbsp;Comparator&nbsp;provided at set creation time, depending on which constructor is used.
ConcurrentSkipListMap (Java)	A scalable concurrent&nbsp;ConcurrentNavigableMap&nbsp;implementation. The map is sorted according to the&nbsp;natural ordering&nbsp;of its keys, or by a&nbsp;Comparator&nbsp;provided at map creation time, depending on which constructor is used.<div><br></div><div>This class implements a concurrent variant of&nbsp;SkipLists&nbsp;providing expected average&nbsp;log(n)&nbsp;time cost for the&nbsp;containsKey,&nbsp;get,&nbsp;put&nbsp;and&nbsp;remove&nbsp;operations and their variants. Insertion, removal, update, and access operations safely execute concurrently by multiple threads.<br></div>
ConcurrentLinkedQueue (Java)	"<span style=""color: rgb(71, 71, 71);"">An unbounded thread-safe&nbsp;</span><a href=""https://docs.oracle.com/javase/9/docs/api/java/util/Queue.html"">queue</a><span style=""color: rgb(71, 71, 71);"">&nbsp;based on linked nodes.</span>"
ConcurrentLinkedDeque (Java)	"<span style=""color: rgb(71, 71, 71);"">An unbounded concurrent&nbsp;</span><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Deque.html"">deque</a><span style=""color: rgb(71, 71, 71);"">&nbsp;based on linked nodes.&nbsp;</span>A&nbsp;ConcurrentLinkedDeque&nbsp;is an appropriate choice when many threads will share access to a common collection. Like most other concurrent collection implementations, this class does not permit the use of&nbsp;null&nbsp;elements.<br>"
HashSet (Java)	"<span style=""color: rgb(71, 71, 71);"">This class implements the&nbsp;</span>Set<span style=""color: rgb(71, 71, 71);"">&nbsp;interface, backed by a hash table (actually a&nbsp;</span>HashMap<span style=""color: rgb(71, 71, 71);"">&nbsp;instance). It makes no guarantees as to the iteration order of the set; in particular, it does not guarantee that the order will remain constant over time. This class permits the&nbsp;</span>null<span style=""color: rgb(71, 71, 71);"">&nbsp;element.</span>"
TreeSet&lt;E&gt; (Java)	A&nbsp;NavigableSet&nbsp;implementation based on a&nbsp;TreeMap. The elements are ordered using their&nbsp;natural ordering, or by a&nbsp;Comparator&nbsp;provided at set creation time, depending on which constructor is used.<div><br><div>This implementation provides guaranteed log(n) time cost for the basic operations (add,&nbsp;remove&nbsp;and&nbsp;contains).<br></div></div>
LinkedHashMap&lt;K,V&gt; (Java)	"<span style=""color: rgb(71, 71, 71);"">Hash table and linked list implementation of the&nbsp;</span>Map<span style=""color: rgb(71, 71, 71);"">&nbsp;interface, with predictable iteration order. This implementation differs from&nbsp;</span>HashMap<span style=""color: rgb(71, 71, 71);"">&nbsp;in that it maintains a doubly-linked list running through all of its entries. This linked list defines the iteration ordering, which is normally the order in which keys were inserted into the map (</span><i>insertion-order</i><span style=""color: rgb(71, 71, 71);"">)</span>"
<div>WeakHashMap&lt;K,V&gt; (Java)</div>	Hash table based implementation of the&nbsp;Map&nbsp;interface, with&nbsp;weak keys. An entry in a&nbsp;WeakHashMap&nbsp;will automatically be removed when its key is no longer in ordinary use. More precisely, the presence of a mapping for a given key will not prevent the key from being discarded by the garbage collector, that is, made finalizable, finalized, and then reclaimed. When a key has been discarded its entry is effectively removed from the map, so this class behaves somewhat differently from other&nbsp;Map&nbsp;implementations.<div><br></div><div>Implements Map Interface</div>
SortedSet&lt;E&gt; (Java)	<div>Interface</div><div><br></div>Set&nbsp;that further provides a&nbsp;total ordering&nbsp;on its elements. The elements are ordered using their&nbsp;natural ordering, or by a&nbsp;Comparator&nbsp;typically provided at sorted set creation time. The set's iterator will traverse the set in ascending element order.
NavigableSet&lt;E&gt; (Java)	A&nbsp;SortedSet&nbsp;extended with navigation methods reporting closest matches for given search targets. Methods&nbsp;lower,&nbsp;floor,&nbsp;ceiling, and&nbsp;higher&nbsp;return elements respectively less than, less than or equal, greater than or equal, and greater than a given element, returning&nbsp;null&nbsp;if there is no such element.
Collection&lt;E&gt; (Java)	"<span style=""color: rgb(71, 71, 71);"">The root interface in the&nbsp;</span><i>collection hierarchy</i><span style=""color: rgb(71, 71, 71);"">.&nbsp;Used only where maximum generality is desired; t</span><span style=""color: rgb(71, 71, 71);"">he JDK does not provide any&nbsp;</span><i>direct</i><span style=""color: rgb(71, 71, 71);"">&nbsp;implementations of this interface</span><span style=""color: rgb(71, 71, 71);"">.&nbsp;</span>"
CopyOnWriteArraySet&lt;E&gt; (Java)	A&nbsp;Set&nbsp;that uses an internal&nbsp;CopyOnWriteArrayList&nbsp;for all of its operations. Thus, it shares the same basic properties:<br><ul><li>It is best suited for applications in which set sizes generally stay small, read-only operations vastly outnumber mutative operations, and you need to prevent interference among threads during traversal.</li><li>It is thread-safe.</li><li>Mutative operations (<code>add</code>,&nbsp;<code>set</code>,&nbsp;<code>remove</code>, etc.) are expensive since they usually entail copying the entire underlying array.</li><li>Iterators do not support the mutative&nbsp;<code>remove</code>&nbsp;operation.</li><li>Traversal via iterators is fast and cannot encounter interference from other threads. Iterators rely on unchanging snapshots of the array at the time the iterators were constructed.</li></ul>
LinkedHashSet&lt;E&gt; (Java)	"<span style=""color: rgb(71, 71, 71);"">Hash table and linked list implementation of the&nbsp;</span>Set<span style=""color: rgb(71, 71, 71);"">&nbsp;interface, with predictable iteration order.&nbsp;</span><div>This linked list defines the iteration ordering, which is the order in which elements were inserted into the set (insertion-order).<span style=""color: rgb(71, 71, 71);""><br></span></div><div>his implementation spares its clients from the unspecified, generally chaotic ordering provided by&nbsp;HashSet, without incurring the increased cost associated with&nbsp;TreeSet.<br></div><div><br></div><div>boolean add(E&nbsp;e)<br></div><div>boolean addAll(Collection&lt;? extends&nbsp;E&gt;&nbsp;c)<br></div><div>boolean remove(Object&nbsp;o)<br></div><div>boolean contains(Object o)</div><div>boolean containsAll(Collection&lt;?&gt;&nbsp;c)<br></div><div>boolean removeAll(Collection&lt;?&gt;&nbsp;c)<br></div><div>void clear()<br></div>"
BlockingDeque&lt;E&gt;&nbsp;(Java)	"Interface<div><br></div><div><span style=""color: rgb(53, 56, 51);"">A&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html""><code>Deque</code></a><span style=""color: rgb(53, 56, 51);"">&nbsp;that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element.</span><br></div><div><span style=""color: rgb(53, 56, 51);""><br></span></div><div><table><tbody><tr><td colspan=""5""><b>First Element (Head)</b></td></tr><tr><td></td><td><em>Throws exception</em></td><td><em>Special value</em></td><td><em>Blocks</em></td><td><em>Times out</em></td></tr><tr><td><b>Insert</b></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#addFirst(E)""><code>addFirst(e)</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#offerFirst(E)""><code>offerFirst(e)</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#putFirst(E)""><code>putFirst(e)</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#offerFirst(E,%20long,%20java.util.concurrent.TimeUnit)""><code>offerFirst(e, time, unit)</code></a></td></tr><tr><td><b>Remove</b></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#removeFirst()""><code>removeFirst()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#pollFirst(long,%20java.util.concurrent.TimeUnit)""><code>pollFirst()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#takeFirst()""><code>takeFirst()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#pollFirst(long,%20java.util.concurrent.TimeUnit)""><code>pollFirst(time, unit)</code></a></td></tr><tr><td><b>Examine</b></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#getFirst()""><code>getFirst()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#peekFirst()""><code>peekFirst()</code></a></td><td><em>not applicable</em></td><td><em>not applicable</em></td></tr><tr><td colspan=""5""><b>Last Element (Tail)</b></td></tr><tr><td></td><td><em>Throws exception</em></td><td><em>Special value</em></td><td><em>Blocks</em></td><td><em>Times out</em></td></tr><tr><td><b>Insert</b></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#addLast(E)""><code>addLast(e)</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#offerLast(E)""><code>offerLast(e)</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#putLast(E)""><code>putLast(e)</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#offerLast(E,%20long,%20java.util.concurrent.TimeUnit)""><code>offerLast(e, time, unit)</code></a></td></tr><tr><td><b>Remove</b></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#removeLast()""><code>removeLast()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#pollLast()""><code>pollLast()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#takeLast()""><code>takeLast()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/BlockingDeque.html#pollLast(long,%20java.util.concurrent.TimeUnit)""><code>pollLast(time, unit)</code></a></td></tr><tr><td><b>Examine</b></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#getLast()""><code>getLast()</code></a></td><td><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/Deque.html#peekLast()""><code>peekLast()</code></a></td><td><em>not applicable</em></td><td><em>not applicable</em></td></tr></tbody></table><br></div>"
BlockingQueue&lt;E&gt;&nbsp;(Java)	A&nbsp;Queue&nbsp;that additionally supports operations that wait for the queue to become non-empty when retrieving an element, and wait for space to become available in the queue when storing an element.<div><br></div><div>A&nbsp;BlockingQueue&nbsp;does not accept&nbsp;null&nbsp;elements. Implementations throw&nbsp;NullPointerException&nbsp;on attempts to&nbsp;add,&nbsp;put&nbsp;or&nbsp;offer&nbsp;a&nbsp;null. A&nbsp;null&nbsp;is used as a sentinel value to indicate failure of&nbsp;poll&nbsp;operations.<br></div>
ArrayBlockingQueue&lt;E&gt; (Java)	Concurrent Collection<div>A bounded&nbsp;blocking queue&nbsp;backed by an array.&nbsp;<br></div><div><b>Common methods</b></div><div>boolean add(E e) - adds element or throws an exception</div><div>boolean offer(E e) - true if element added, false if full</div><div>boolean offer(E e, long timeout, TimeUnit unit) true if element was added, false if full and timeout lapsed</div><div><b>Blocked Methods</b></div><div>void put(E e) - add element and blocked until it can be added</div><div>void take() - Retrieves head of queue and blocks until no empty.</div>
PriorityBlockingQueue&lt;E&gt; (Java)	An unbounded&nbsp;blocking queue&nbsp;that uses the same ordering rules as class&nbsp;PriorityQueue&nbsp;and supplies blocking retrieval operations.
LinkedTransferQueue&lt;E&gt; (Java)	<div>An unbounded&nbsp;TransferQueue&nbsp;based on linked nodes.</div>
TransferQueue&lt;E&gt; (Java)	Interface<div><br></div><div>A&nbsp;BlockingQueue&nbsp;in which producers may wait for consumers to receive elements.<br></div>
Iterable&lt;T&gt; (Java)	"<span style=""color: rgb(53, 56, 51);"">Implementing this interface allows an object to be the target of the ""foreach"" statement.</span><div><span style=""color: rgb(53, 56, 51);""><br></span></div><div>default void forEachRemaining(Consumer&lt;? super&nbsp;E&gt;&nbsp;action)<div>Performs the given action for each remaining element until all elements have been processed or the action throws an exception.</div>boolean hasNext()<div>Returns&nbsp;true&nbsp;if the iteration has more elements.</div>E next()<div>Returns the next element in the iteration.</div>default void remove()<div>Removes from the underlying collection the last element returned by this iterator (optional operation).</div></div>"
Runtime.exec()	Process exec(String&nbsp;command)<div>Executes the specified string command in a separate process.</div>
ProcessBuilder (Java)	A container object which may or may not contain a non-null value. If a value is present,&nbsp;isPresent()&nbsp;will return&nbsp;true&nbsp;and&nbsp;get()&nbsp;will return the value.<div>Additional methods that depend on the presence or absence of a contained value are provided, such as&nbsp;orElse()&nbsp;(return a default value if value not present) and&nbsp;ifPresent()&nbsp;(execute a block of code if the value is present).</div>
What is System.in?	"The ""standard"" input stream with the Java type InputStream."
What is System.out?	"The ""standard""&nbsp;<span style=""color: rgb(53, 56, 51);"">output&nbsp;</span>stream with the Java type PrintStream. T<span style=""color: rgb(53, 56, 51);"">his stream is already open and ready to accept output data. Typically this stream corresponds to display output or another output destination specified by the host environment or user.</span>"
What is System.err?	"<span style=""color: rgb(53, 56, 51);"">The ""standard"" error output stream. This stream is already open and ready to accept output data.</span><div><span style=""color: rgb(53, 56, 51);""><br></span></div><div><span style=""color: rgb(53, 56, 51);"">Typically this stream corresponds to display output or another output destination specified by the host environment or user. By convention, this output stream is used to display error messages or other information that should come to the immediate attention of a user even if the principal output stream, the value of the variable&nbsp;</span><code>out</code><span style=""color: rgb(53, 56, 51);"">, has been redirected to a file or other destination that is typically not continuously monitored.</span><span style=""color: rgb(53, 56, 51);""><br></span></div>"
Thread.State (Java)	Enum<div>A thread state. A thread can be in one of the following states:</div><div>NEW<br>A thread that has not yet started is in this state.</div><div>RUNNABLE<br>A thread executing in the Java virtual machine is in this state.</div><div>BLOCKED<br>A thread that is blocked waiting for a monitor lock is in this state.</div><div>WAITING<br>A thread that is waiting indefinitely for another thread to perform a particular action is in this state.</div><div>TIMED_WAITING<br>A thread that is waiting for another thread to perform an action for up to a specified waiting time is in this state.</div><div>TERMINATED<br>A thread that has exited is in this state.<br></div>
Thread.activeCount()	Returns an estimate of the number of active threads in the current thread's&nbsp;thread group&nbsp;and its subgroups.
Thread.currentThread() (Java)	"<span style=""color: rgb(71, 71, 71);"">Returns a reference to the currently executing thread object.</span>"
InterruptedException (Java)	Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity. Occasionally a method may wish to test whether the current thread has been interrupted, and if so, to immediately throw this exception.
Thread::join() (Java)	The&nbsp;join&nbsp;method allows one thread to wait for the completion of another. If&nbsp;t&nbsp;is a&nbsp;Thread&nbsp;object whose thread is currently executing.
Happens-before relationships	"General:<br><ul><li>Each action in a thread&nbsp;<i>happens-before</i>&nbsp;every action in that thread that comes later in the program's order.</li><li>An unlock (<code>synchronized</code>&nbsp;block or method exit) of a monitor&nbsp;<i>happens-before</i>&nbsp;every subsequent lock (<code>synchronized</code>&nbsp;block or method entry) of that same monitor. And because the&nbsp;<i>happens-before</i>&nbsp;relation is transitive, all actions of a thread prior to unlocking&nbsp;<i>happen-before</i>&nbsp;all actions subsequent to any thread locking that monitor.</li><li>A write to a&nbsp;<code>volatile</code>&nbsp;field&nbsp;<i>happens-before</i>&nbsp;every subsequent read of that same field. Writes and reads of&nbsp;<code>volatile</code>&nbsp;fields have similar memory consistency effects as entering and exiting monitors, but do&nbsp;<em>not</em>&nbsp;entail mutual exclusion locking.</li><li>A call to&nbsp;<code>start</code>&nbsp;on a thread&nbsp;<i>happens-before</i>&nbsp;any action in the started thread.</li><li>All actions in a thread&nbsp;<i>happen-before</i>&nbsp;any other thread successfully returns from a&nbsp;<code>join</code>&nbsp;on that thread.</li></ul><span style=""color: rgb(71, 71, 71);"">The methods of all classes in&nbsp;</span><code>java.util.concurrent</code><span style=""color: rgb(71, 71, 71);"">&nbsp;and its subpackages extend these guarantees to higher-level synchronization. In particular:</span><ul><li>Actions in a thread prior to placing an object into any concurrent collection&nbsp;<i>happen-before</i>&nbsp;actions subsequent to the access or removal of that element from the collection in another thread.</li><li>Actions in a thread prior to the submission of a&nbsp;<code>Runnable</code>&nbsp;to an&nbsp;<code>Executor</code>&nbsp;<i>happen-before</i>&nbsp;its execution begins. Similarly for&nbsp;<code>Callables</code>&nbsp;submitted to an&nbsp;<code>ExecutorService</code>.</li><li>Actions taken by the asynchronous computation represented by a&nbsp;<code>Future</code>&nbsp;<i>happen-before</i>&nbsp;actions subsequent to the retrieval of the result via&nbsp;<code>Future.get()</code>&nbsp;in another thread.</li><li>Actions prior to ""releasing"" synchronizer methods such as&nbsp;<code>Lock.unlock</code>,&nbsp;<code>Semaphore.release</code>, and&nbsp;<code>CountDownLatch.countDown</code>&nbsp;<i>happen-before</i>&nbsp;actions subsequent to a successful ""acquiring"" method such as&nbsp;<code>Lock.lock</code>,&nbsp;<code>Semaphore.acquire</code>,&nbsp;<code>Condition.await</code>, and&nbsp;<code>CountDownLatch.await</code>&nbsp;on the same synchronizer object in another thread.</li><li>For each pair of threads that successfully exchange objects via an&nbsp;<code>Exchanger</code>, actions prior to the&nbsp;<code>exchange()</code>&nbsp;in each thread&nbsp;<i>happen-before</i>&nbsp;those subsequent to the corresponding&nbsp;<code>exchange()</code>&nbsp;in another thread.</li><li>Actions prior to calling&nbsp;<code>CyclicBarrier.await</code>&nbsp;and&nbsp;<code>Phaser.awaitAdvance</code>&nbsp;(as well as its variants)&nbsp;<i>happen-before</i>&nbsp;actions performed by the barrier action, and actions performed by the barrier action&nbsp;<i>happen-before</i>&nbsp;actions subsequent to a successful return from the corresponding&nbsp;<code>await</code>&nbsp;in other threads.</li></ul>"
Condition (Java)	"Interface<div>To acquire a Condition object, use Lock::newCondition() on a Lock instance.</div><div><br><div>Await() methods atomically release the lock associated with this condition, but must reacquire before returning.<br><div><table><tbody><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html#await--"">await</a></span>()</code><div>Causes the current thread to wait until it is signalled or&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/Thread.html#interrupt--"">interrupted</a>.</div></td></tr><tr><td><code>boolean</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html#await-long-java.util.concurrent.TimeUnit-"">await</a></span>(long&nbsp;time,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/TimeUnit.html"">TimeUnit</a>&nbsp;unit)</code><div>Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses.</div></td></tr></tbody></table><table><tbody><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html#signal--"">signal</a></span>()</code><div>Wakes up one waiting thread.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/locks/Condition.html#signalAll--"">signalAll</a></span>()</code><div>Wakes up all waiting threads.</div></td></tr></tbody></table><br></div></div></div><div>signal() wakes up any one thread waiting on this Condition randomly.</div><div>signalAll() wakes all threads.</div><div></div>"
ReentrantReadWriteLock.ReadLock	The lock returned by method&nbsp;ReentrantReadWriteLock.readLock().
ReentrantReadWriteLock.WriteLock	The lock returned by method&nbsp;ReentrantReadWriteLock.writeLock().
Executors (Java)	"<div><span style=""color: rgb(53, 56, 51);"">Facility for creating various types of Executors and Callables to be run on the previously mentioned executors.&nbsp;</span></div><span style=""color: rgb(53, 56, 51);""><div><span style=""color: rgb(53, 56, 51);""><br></span></div>Factory and utility methods for&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executor.html""><code>Executor</code></a><span style=""color: rgb(53, 56, 51);"">,&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html""><code>ExecutorService</code></a><span style=""color: rgb(53, 56, 51);"">,&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html""><code>ScheduledExecutorService</code></a><span style=""color: rgb(53, 56, 51);"">,&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html""><code>ThreadFactory</code></a><span style=""color: rgb(53, 56, 51);"">, and&nbsp;</span><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html""><code>Callable</code></a><span style=""color: rgb(53, 56, 51);"">&nbsp;classes defined in this package. This class supports the following kinds of methods:</span><ul><li>Methods that create and return an&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html""><code>ExecutorService</code></a>&nbsp;set up with commonly useful configuration settings.</li><li>Methods that create and return a&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html""><code>ScheduledExecutorService</code></a>&nbsp;set up with commonly useful configuration settings.</li><li>Methods that create and return a ""wrapped"" ExecutorService, that disables reconfiguration by making implementation-specific methods inaccessible.</li><li>Methods that create and return a&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html""><code>ThreadFactory</code></a>&nbsp;that sets newly created threads to a known state.</li><li>Methods that create and return a&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html""><code>Callable</code></a>&nbsp;out of other closure-like forms, so they can be used in execution methods requiring&nbsp;Callable.</li></ul><div><table><tbody><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html"">Callable</a>&lt;<a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/Object.html"">Object</a>&gt;</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#callable(java.lang.Runnable)"">callable</a></strong>(<a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html"">Runnable</a>&nbsp;task)</code><div>Returns a&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html""><code>Callable</code></a>&nbsp;object that, when called, runs the given task and returns&nbsp;null.</div></td></tr><tr><td><code>static &lt;T&gt;&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html"">Callable</a>&lt;T&gt;</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#callable(java.lang.Runnable,%20T)"">callable</a></strong>(<a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/Runnable.html"">Runnable</a>&nbsp;task, T&nbsp;result)</code><div>Returns a&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Callable.html""><code>Callable</code></a>&nbsp;object that, when called, runs the given task and returns the given result.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html"">ThreadFactory</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#defaultThreadFactory()"">defaultThreadFactory</a></strong>()</code><div>Returns a default thread factory used to create new threads.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html"">ExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool()"">newCachedThreadPool</a></strong>()</code><div>Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html"">ExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newCachedThreadPool(java.util.concurrent.ThreadFactory)"">newCachedThreadPool</a></strong>(<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html"">ThreadFactory</a>&nbsp;threadFactory)</code><div>Creates a thread pool that creates new threads as needed, but will reuse previously constructed threads when they are available, and uses the provided ThreadFactory to create new threads when needed.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html"">ExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int)"">newFixedThreadPool</a></strong>(int&nbsp;nThreads)</code><div>Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html"">ExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newFixedThreadPool(int,%20java.util.concurrent.ThreadFactory)"">newFixedThreadPool</a></strong>(int&nbsp;nThreads,&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html"">ThreadFactory</a>&nbsp;threadFactory)</code><div>Creates a thread pool that reuses a fixed number of threads operating off a shared unbounded queue, using the provided ThreadFactory to create new threads when needed.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html"">ScheduledExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newScheduledThreadPool(int)"">newScheduledThreadPool</a></strong>(int&nbsp;corePoolSize)</code><div>Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html"">ScheduledExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newScheduledThreadPool(int,%20java.util.concurrent.ThreadFactory)"">newScheduledThreadPool</a></strong>(int&nbsp;corePoolSize,&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html"">ThreadFactory</a>&nbsp;threadFactory)</code><div>Creates a thread pool that can schedule commands to run after a given delay, or to execute periodically.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html"">ExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor()"">newSingleThreadExecutor</a></strong>()</code><div>Creates an Executor that uses a single worker thread operating off an unbounded queue.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ExecutorService.html"">ExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newSingleThreadExecutor(java.util.concurrent.ThreadFactory)"">newSingleThreadExecutor</a></strong>(<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html"">ThreadFactory</a>&nbsp;threadFactory)</code><div>Creates an Executor that uses a single worker thread operating off an unbounded queue, and uses the provided ThreadFactory to create a new thread when needed.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html"">ScheduledExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newSingleThreadScheduledExecutor()"">newSingleThreadScheduledExecutor</a></strong>()</code><div>Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically.</div></td></tr><tr><td><code>static&nbsp;<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ScheduledExecutorService.html"">ScheduledExecutorService</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Executors.html#newSingleThreadScheduledExecutor(java.util.concurrent.ThreadFactory)"">newSingleThreadScheduledExecutor</a></strong>(<a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ThreadFactory.html"">ThreadFactory</a>&nbsp;threadFactory)</code><div>Creates a single-threaded executor that can schedule commands to run after a given delay, or to execute periodically.</div></td></tr></tbody></table></div>"
ThreadFactory (Java)	Interface<div><br></div><div>An object that creates new threads on demand. Using thread factories removes hardwiring of calls to&nbsp;new Thread, enabling applications to use special thread subclasses, priorities, etc.<br></div>
Fork/Join (Java)	The fork/join framework is an implementation of the&nbsp;<code>ExecutorService</code>&nbsp;interface that helps you take advantage of multiple processors. It is designed for work that can be broken into smaller pieces recursively. The goal is to use all the available processing power to enhance the performance of your application.<div><br></div><div>Uses a&nbsp;<i>work-stealing</i>&nbsp;algorithm.</div><div><br></div><div>The center of the fork/join framework is the&nbsp;ForkJoinPool&nbsp;class, an extension of the&nbsp;AbstractExecutorService&nbsp;class.&nbsp;ForkJoinPool&nbsp;implements the core work-stealing algorithm and can execute&nbsp;ForkJoinTask&nbsp;processes.<br></div>
RecursiveTask&lt;V&gt; (Java)	A recursive result-bearing&nbsp;ForkJoinTask.
ForkJoinTask&lt;V&gt; (Java)	&nbsp;ForkJoinTask&nbsp;is a thread-like entity that is much lighter weight than a normal thread. Huge numbers of tasks and subtasks may be hosted by a small number of actual threads in a ForkJoinPool, at the price of some usage limitations.
Phaser (Java)	A reusable synchronization barrier, similar in functionality to&nbsp;CyclicBarrier&nbsp;and&nbsp;CountDownLatch&nbsp;but supporting more flexible usage.
RecursiveAction (Java)	A recursive resultless&nbsp;ForkJoinTask.
BlockingQueue (Java)	<div><br>A&nbsp;Deque&nbsp;that additionally supports blocking operations that wait for the deque to become non-empty when retrieving an element, and wait for space to become available in the deque when storing an element.</div>
Concurrent Collection Interfaces&nbsp;	BlockingQueue&nbsp;defines a first-in-first-out data structure that blocks or times out when you attempt to add to a full queue, or retrieve from an empty queue.<div><br><div>ConcurrentMap&nbsp;is a subinterface of&nbsp;java.util.Map&nbsp;that defines useful atomic operations. These operations remove or replace a key-value pair only if the key is present, or add a key-value pair only if the key is absent. Making these operations atomic helps avoid synchronization.&nbsp;</div><div><br></div><div>ConcurrentNavigableMap&nbsp;is a subinterface of&nbsp;ConcurrentMap&nbsp;that supports approximate matches.&nbsp;</div></div><div><br></div>
Atomic Helper Classes	"AtomicBoolean - A&nbsp;boolean&nbsp;value that may be updated atomically.<br>AtomicInteger - An&nbsp;int&nbsp;value that may be updated atomically.<br>AtomicIntegerArray - An&nbsp;int&nbsp;array in which elements may be updated atomically.<br>AtomicIntegerFieldUpdater&lt;T&gt; - A reflection-based utility that enables atomic updates to designated&nbsp;volatile int&nbsp;fields of designated classes.<br>AtomicLong - A&nbsp;long&nbsp;value that may be updated atomically.<br>AtomicLongArray - A&nbsp;long&nbsp;array in which elements may be updated atomically.<br>AtomicLongFieldUpdater&lt;T&gt; - A reflection-based utility that enables atomic updates to designated&nbsp;volatile long&nbsp;fields of designated classes.<br>AtomicMarkableReference&lt;V&gt; - An&nbsp;AtomicMarkableReference&nbsp;maintains an object reference along with a mark bit, that can be updated atomically.<br>AtomicReference&lt;V&gt; - An object reference that may be updated atomically.<br>AtomicReferenceArray&lt;E&gt; - An array of object references in which elements may be updated atomically.<br>AtomicReferenceFieldUpdater&lt;T,V&gt; - A reflection-based utility that enables atomic updates to designated&nbsp;volatile&nbsp;reference fields of designated classes.<br>AtomicStampedReference&lt;V&gt; - An&nbsp;AtomicStampedReference&nbsp;maintains an object reference along with an integer ""stamp"", that can be updated atomically.<br>DoubleAccumulator - One or more variables that together maintain a running&nbsp;double&nbsp;value updated using a supplied function.<br>DoubleAdder - One or more variables that together maintain an initially zero&nbsp;double&nbsp;sum.<br>LongAccumulator - One or more variables that together maintain a running&nbsp;long&nbsp;value updated using a supplied function.<br>LongAdder - One or more variables that together maintain an initially zero&nbsp;long&nbsp;sum."
ThreadLocalRandom (Java)	A random number generator isolated to the current thread. Like the global&nbsp;Random&nbsp;generator used by the&nbsp;Math&nbsp;class, a&nbsp;ThreadLocalRandom&nbsp;is initialized with an internally generated seed that may not otherwise be modified. When applicable, use of&nbsp;ThreadLocalRandom&nbsp;rather than shared&nbsp;Random&nbsp;objects in concurrent programs will typically encounter much less overhead and contention. Use of&nbsp;ThreadLocalRandom&nbsp;is particularly appropriate when multiple tasks (for example, each a&nbsp;ForkJoinTask) use random numbers in parallel in thread pools.
AtomicBoolean (Java)	"A&nbsp;boolean&nbsp;value that may be updated atomically.<div><table><tbody><tr><th>Modifier and Type</th><th>Method and Description</th></tr><tr><td><code>boolean</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#compareAndSet(boolean,%20boolean)"">compareAndSet</a></strong>(boolean&nbsp;expect, boolean&nbsp;update)</code><div>Atomically sets the value to the given updated value if the current value&nbsp;<code>==</code>&nbsp;the expected value.</div></td></tr><tr><td><code>boolean</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#get()"">get</a></strong>()</code><div>Returns the current value.</div></td></tr><tr><td><code>boolean</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#getAndSet(boolean)"">getAndSet</a></strong>(boolean&nbsp;newValue)</code><div>Atomically sets to the given value and returns the previous value.</div></td></tr><tr><td><code>void</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#lazySet(boolean)"">lazySet</a></strong>(boolean&nbsp;newValue)</code><div>Eventually sets to the given value.</div></td></tr><tr><td><code>void</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#set(boolean)"">set</a></strong>(boolean&nbsp;newValue)</code><div>Unconditionally sets to the given value.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/7/docs/api/java/lang/String.html"">String</a></code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#toString()"">toString</a></strong>()</code><div>Returns the String representation of the current value.</div></td></tr><tr><td><code>boolean</code></td><td><code><strong><a href=""https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/atomic/AtomicBoolean.html#weakCompareAndSet(boolean,%20boolean)"">weakCompareAndSet</a></strong>(boolean&nbsp;expect, boolean&nbsp;update)</code><div>Atomically sets the value to the given updated value if the current value&nbsp;<code>==</code>&nbsp;the expected value.</div></td></tr></tbody></table></div>"
AtomicInteger (Java)	"<span style=""color: rgb(71, 71, 71);"">An&nbsp;</span><code>int</code><span style=""color: rgb(71, 71, 71);"">&nbsp;value that may be updated atomically.&nbsp;</span><div><table><tbody><tr><th>Modifier and Type</th><th>Method and Description</th></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#accumulateAndGet-int-java.util.function.IntBinaryOperator-"">accumulateAndGet</a></span>(int&nbsp;x,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/function/IntBinaryOperator.html"">IntBinaryOperator</a>&nbsp;accumulatorFunction)</code><div>Atomically updates the current value with the results of applying the given function to the current and given values, returning the updated value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#addAndGet-int-"">addAndGet</a></span>(int&nbsp;delta)</code><div>Atomically adds the given value to the current value.</div></td></tr><tr><td><code>boolean</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#compareAndSet-int-int-"">compareAndSet</a></span>(int&nbsp;expect, int&nbsp;update)</code><div>Atomically sets the value to the given updated value if the current value&nbsp;<code>==</code>&nbsp;the expected value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#decrementAndGet--"">decrementAndGet</a></span>()</code><div>Atomically decrements by one the current value.</div></td></tr><tr><td><code>double</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#doubleValue--"">doubleValue</a></span>()</code><div>Returns the value of this&nbsp;<code>AtomicInteger</code>&nbsp;as a&nbsp;<code>double</code>&nbsp;after a widening primitive conversion.</div></td></tr><tr><td><code>float</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#floatValue--"">floatValue</a></span>()</code><div>Returns the value of this&nbsp;<code>AtomicInteger</code>&nbsp;as a&nbsp;<code>float</code>&nbsp;after a widening primitive conversion.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#get--"">get</a></span>()</code><div>Gets the current value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndAccumulate-int-java.util.function.IntBinaryOperator-"">getAndAccumulate</a></span>(int&nbsp;x,&nbsp;<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/function/IntBinaryOperator.html"">IntBinaryOperator</a>&nbsp;accumulatorFunction)</code><div>Atomically updates the current value with the results of applying the given function to the current and given values, returning the previous value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndAdd-int-"">getAndAdd</a></span>(int&nbsp;delta)</code><div>Atomically adds the given value to the current value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndDecrement--"">getAndDecrement</a></span>()</code><div>Atomically decrements by one the current value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndIncrement--"">getAndIncrement</a></span>()</code><div>Atomically increments by one the current value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndSet-int-"">getAndSet</a></span>(int&nbsp;newValue)</code><div>Atomically sets to the given value and returns the old value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#getAndUpdate-java.util.function.IntUnaryOperator-"">getAndUpdate</a></span>(<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/function/IntUnaryOperator.html"">IntUnaryOperator</a>&nbsp;updateFunction)</code><div>Atomically updates the current value with the results of applying the given function, returning the previous value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#incrementAndGet--"">incrementAndGet</a></span>()</code><div>Atomically increments by one the current value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#intValue--"">intValue</a></span>()</code><div>Returns the value of this&nbsp;<code>AtomicInteger</code>&nbsp;as an&nbsp;<code>int</code>.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#lazySet-int-"">lazySet</a></span>(int&nbsp;newValue)</code><div>Eventually sets to the given value.</div></td></tr><tr><td><code>long</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#longValue--"">longValue</a></span>()</code><div>Returns the value of this&nbsp;<code>AtomicInteger</code>&nbsp;as a&nbsp;<code>long</code>&nbsp;after a widening primitive conversion.</div></td></tr><tr><td><code>void</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#set-int-"">set</a></span>(int&nbsp;newValue)</code><div>Sets to the given value.</div></td></tr><tr><td><code><a href=""https://docs.oracle.com/javase/8/docs/api/java/lang/String.html"">String</a></code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#toString--"">toString</a></span>()</code><div>Returns the String representation of the current value.</div></td></tr><tr><td><code>int</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#updateAndGet-java.util.function.IntUnaryOperator-"">updateAndGet</a></span>(<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/function/IntUnaryOperator.html"">IntUnaryOperator</a>&nbsp;updateFunction)</code><div>Atomically updates the current value with the results of applying the given function, returning the updated value.</div></td></tr><tr><td><code>boolean</code></td><td><code><span style=""font-weight: bold;""><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html#weakCompareAndSet-int-int-"">weakCompareAndSet</a></span>(int&nbsp;expect, int&nbsp;update)</code><div>Atomically sets the value to the given updated value if the current value&nbsp;<code>==</code>&nbsp;the expected value.</div></td></tr></tbody></table></div>"
AtomicIntegerArray (Java)	"<span style=""color: rgb(71, 71, 71);"">An&nbsp;</span><code>int</code><span style=""color: rgb(71, 71, 71);"">&nbsp;array in which elements may be updated atomically.</span><div><span style=""color: rgb(71, 71, 71);""><br></span></div>"
AtomicLong&nbsp;&nbsp;(Java)	A&nbsp;long&nbsp;value that may be updated atomically.
AtomicLong&nbsp;(Java)	A&nbsp;long&nbsp;value that may be updated atomically.
AtomicLongArray&nbsp;&nbsp;(Java)	A&nbsp;long&nbsp;array in which elements may be updated atomically.
AtomicReference&lt;V&gt;&nbsp;&nbsp;(Java)	An object reference that may be updated atomically.
AtomicReferenceArray&lt;E&gt;&nbsp;&nbsp;(Java)	An array of object references in which elements may be updated atomically.
DoubleAccumulator&nbsp;(Java)	<div>One or more variables that together maintain a running&nbsp;double&nbsp;value updated using a supplied function.</div>
DoubleAdder&nbsp;(Java)	<div>One or more variables that together maintain an initially zero&nbsp;double&nbsp;sum.</div>
LongAccumulator&nbsp;(Java)	One or more variables that together maintain a running&nbsp;long&nbsp;value updated using a supplied function.
LongAdder&nbsp;(Java)	<div>One or more variables that together maintain an initially zero&nbsp;long&nbsp;sum.<br></div>
ScheduledThreadPoolExecutor&nbsp;(Java)	A&nbsp;ThreadPoolExecutor&nbsp;that can additionally schedule commands to run after a given delay, or to execute periodically.
AbstractExecutorService&nbsp;(Java)	Provides default implementations of&nbsp;ExecutorService&nbsp;execution methods. This class implements the&nbsp;submit,&nbsp;invokeAny&nbsp;and&nbsp;invokeAll&nbsp;methods using a&nbsp;RunnableFuture&nbsp;returned by&nbsp;newTaskFor, which defaults to the&nbsp;FutureTask&nbsp;class provided in this package. For example, the implementation of&nbsp;submit(Runnable)&nbsp;creates an associated&nbsp;RunnableFuture&nbsp;that is executed and returned. Subclasses may override the&nbsp;newTaskFor&nbsp;methods to return&nbsp;RunnableFuture&nbsp;implementations other than&nbsp;FutureTask.
ByteOrder	A typesafe enumeration for byte orders.<div>static&nbsp;ByteOrder BIG_ENDIAN<div>Constant denoting big-endian byte order.</div>static&nbsp;ByteOrder LITTLE_ENDIAN<div>Constant denoting little-endian byte order.</div></div>
CharBuffer	A char buffer.<div>This class defines four categories of operations upon char buffers:</div><div>Absolute and relative&nbsp;get&nbsp;and&nbsp;put&nbsp;methods that read and write single chars;</div><div>Relative&nbsp;bulk get&nbsp;methods that transfer contiguous sequences of chars from this buffer into an array; and</div><div>Relative&nbsp;bulk put&nbsp;methods that transfer contiguous sequences of chars from a char array, a string, or some other char buffer into this buffer; and</div><div>Methods for&nbsp;compacting,&nbsp;duplicating, and&nbsp;slicing&nbsp;a char buffer.</div>
DoubleBuffer	<div>NIO</div><div><br></div>A double buffer.<div>This class defines four categories of operations upon double buffers:</div><div>Absolute and relative&nbsp;get&nbsp;and&nbsp;put&nbsp;methods that read and write single doubles;</div><div>Relative&nbsp;bulk get&nbsp;methods that transfer contiguous sequences of doubles from this buffer into an array; and</div><div>Relative&nbsp;bulk put&nbsp;methods that transfer contiguous sequences of doubles from a double array or some other double buffer into this buffer; and</div><div>Methods for&nbsp;compacting,&nbsp;duplicating, and&nbsp;slicing&nbsp;a double buffer.</div>
FloatBuffer	NIO<div><br></div><div>A float buffer.<div>This class defines four categories of operations upon float buffers:</div><div>Absolute and relative&nbsp;get&nbsp;and&nbsp;put&nbsp;methods that read and write single floats;</div><div>Relative&nbsp;bulk get&nbsp;methods that transfer contiguous sequences of floats from this buffer into an array; and</div><div>Relative&nbsp;bulk put&nbsp;methods that transfer contiguous sequences of floats from a float array or some other float buffer into this buffer; and</div><div>Methods for&nbsp;compacting,&nbsp;duplicating, and&nbsp;slicing&nbsp;a float buffer.</div></div>
IntBuffer	NIO<div><br></div><div><div>This class defines four categories of operations upon int buffers:</div><div>Absolute and relative&nbsp;get&nbsp;and&nbsp;put&nbsp;methods that read and write single ints;</div><div>Relative&nbsp;bulk get&nbsp;methods that transfer contiguous sequences of ints from this buffer into an array; and</div><div>Relative&nbsp;bulk put&nbsp;methods that transfer contiguous sequences of ints from an int array or some other int buffer into this buffer; and</div><div>Methods for&nbsp;compacting,&nbsp;duplicating, and&nbsp;slicing&nbsp;an int buffer.</div></div>
LongBuffer	NIO<div><br></div><div>A long buffer.<div>This class defines four categories of operations upon long buffers:</div><div>Absolute and relative&nbsp;get&nbsp;and&nbsp;put&nbsp;methods that read and write single longs;</div><div>Relative&nbsp;bulk get&nbsp;methods that transfer contiguous sequences of longs from this buffer into an array; and</div><div>Relative&nbsp;bulk put&nbsp;methods that transfer contiguous sequences of longs from a long array or some other long buffer into this buffer; and</div><div>Methods for&nbsp;compacting,&nbsp;duplicating, and&nbsp;slicing&nbsp;a long buffer.</div></div>
MappedByteBuffer	A direct byte buffer whose content is a memory-mapped region of a file.<div>Mapped byte buffers are created via the&nbsp;FileChannel.map&nbsp;method. This class extends the&nbsp;ByteBuffer&nbsp;class with operations that are specific to memory-mapped file regions.</div><div>A mapped byte buffer and the file mapping that it represents remain valid until the buffer itself is garbage-collected.</div><div>The content of a mapped byte buffer can change at any time, for example if the content of the corresponding region of the mapped file is changed by this program or another. Whether or not such changes occur, and when they occur, is operating-system dependent and therefore unspecified.</div>
ShortBuffer	NIO<div><br></div><div>A short buffer.<div>This class defines four categories of operations upon short buffers:</div><div>Absolute and relative&nbsp;get&nbsp;and&nbsp;put&nbsp;methods that read and write single shorts;</div><div>Relative&nbsp;bulk get&nbsp;methods that transfer contiguous sequences of shorts from this buffer into an array; and</div><div>Relative&nbsp;bulk put&nbsp;methods that transfer contiguous sequences of shorts from a short array or some other short buffer into this buffer; and</div><div>Methods for&nbsp;compacting,&nbsp;duplicating, and&nbsp;slicing&nbsp;a short buffer.</div></div>
CompletionService&lt;V&gt;	<div>Interface</div><div><br></div><div>A service that decouples the production of new asynchronous tasks from the consumption of the results of completed tasks.</div><div><br></div><div>Typically, a&nbsp;CompletionService&nbsp;relies on a separate&nbsp;Executor&nbsp;to actually execute the tasks, in which case the&nbsp;CompletionService&nbsp;only manages an internal completion queue. The&nbsp;ExecutorCompletionService&nbsp;class provides an implementation of this approach.<br></div><div><br></div><div>Future&lt;V&gt;poll()<div>Retrieves and removes the Future representing the next completed task or&nbsp;null&nbsp;if none are present.</div>Future&lt;V&gt;poll(long&nbsp;timeout,&nbsp;TimeUnit&nbsp;unit)<div>Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.</div>Future&lt;V&gt;submit(Callable&lt;V&gt;&nbsp;task)<div>Submits a value-returning task for execution and returns a Future representing the pending results of the task.</div>Future&lt;V&gt;submit(Runnable&nbsp;task,&nbsp;V&nbsp;result)<div>Submits a Runnable task for execution and returns a Future representing that task.</div>Future&lt;V&gt;take()<div>Retrieves and removes the Future representing the next completed task, waiting if none are yet present.</div></div>
ExecutorCompletionService&lt;V&gt;	A&nbsp;CompletionService&nbsp;that uses a supplied&nbsp;Executor&nbsp;to execute tasks. This class arranges that submitted tasks are, upon completion, placed on a queue accessible using&nbsp;take. The class is lightweight enough to be suitable for transient use when processing groups of tasks.<div><br></div><div>Future&lt;V&gt;poll()<div>Retrieves and removes the Future representing the next completed task or&nbsp;null&nbsp;if none are present.</div>Future&lt;V&gt;poll(long&nbsp;timeout,&nbsp;TimeUnit&nbsp;unit)<div>Retrieves and removes the Future representing the next completed task, waiting if necessary up to the specified wait time if none are yet present.</div>Future&lt;V&gt;submit(Callable&lt;V&gt;&nbsp;task)<div>Submits a value-returning task for execution and returns a Future representing the pending results of the task.</div>Future&lt;V&gt;submit(Runnable&nbsp;task,&nbsp;V&nbsp;result)<div>Submits a Runnable task for execution and returns a Future representing that task.</div>Future&lt;V&gt;take()<div>Retrieves and removes the Future representing the next completed task, waiting if none are yet present.</div></div>
ConcurrentNavigableMap&lt;K,V&gt; (Java)	<div>A&nbsp;ConcurrentMap&nbsp;supporting&nbsp;NavigableMap&nbsp;operations, and recursively so for its navigable sub-maps.</div>
Delayed	A mix-in style interface for marking objects that should be acted upon after a given delay.
RunnableFuture&lt;V&gt; (Java)	A&nbsp;Future&nbsp;that is&nbsp;Runnable.
RunnableScheduledFuture&lt;V&gt; (Java)	A&nbsp;ScheduledFuture&nbsp;that is&nbsp;Runnable.
ScheduledFuture&lt;V&gt; (Java)	A delayed result-bearing action that can be cancelled.
What is another name for the catch block in a try-catch statement	Exception handlers. Exception Handlers
What is the Catch or Specify Requirement?	"In Java, if an exception is declared in for a method called, the caller must either catch the exception via a try-catch or also declare the exception may be thrown in the method signature with a ""throws Exception"""
What are the 3 kinds of exceptions in Java?	Checked Exceptions - well-written applications should anticipate and recover from e.g. program is supplied an incorrect file name.<div>All Exceptions not subclasses of RuntimeException or Error are checked exceptions.&nbsp;<br><div>RuntimeException - Usually a programming error. Can catch and recover, but most likely better to fix the bug that caused it in the first place.</div><div>Error - Exceptional conditions that are external to the application and that the application likely shouldn't try to recover from.</div></div><div>The latter two are collectively called unchecked exceptions</div>
IndexOutOfBoundsException	Unchecked Exception<div><br></div><div>Usually thrown when attempting to access data out of bounds i.e. i &lt; 0 or size &lt; i</div>
True or false: Finally block will always execute.	False: finally block will always execute- even if the an exception is caught and rethrown- unless the JVM exits i.e. System.exit() before or the thread is interrupted aor.&nbsp;
What is the one thing that prevents a finally block from being executed?	If execution is somehow stopped e.g. the system or thread exiting(thread killed or interrupted) before the end of the try or catch blocks.
Throwable (Java)	The&nbsp;Throwable&nbsp;class is the superclass of all errors and exceptions in the Java language. Only objects that are instances of this class (or one of its subclasses) can be thrown with throw or caught in a catch block
What is a short-hand for catching multiple types of exceptions that are handled the same way	<div>Catch block with exception types separated by a |.</div><div>ex:</div>catch (IOException|SQLException ex) {&nbsp;<div>&nbsp; &nbsp; logger.log(ex);</div><div>&nbsp; &nbsp; throw ex;&nbsp;</div><div>}</div>
Suppressed Exceptions	If the body of a try-with-resouces throws an exception then the resources throw an exception/s, those exceptions are suppressed. They can be access via&nbsp;Throwable.getSuppressed() on the first thrown exception from the body.
Chained Exception	An application often responds to an exception by throwing another exception. In effect, the first exception&nbsp;<i>causes</i>&nbsp;the second exception. It can be very helpful to know when one exception causes another.<div>Methods for using chained exceptions</div><div>Throwable getCause() - returns Throwable that caused exception</div><div>Throwable initCause(Throwable) sets Throwable that caused this exception</div><div>Throwable(String, Throwable)&nbsp;</div><div>Throwable(Throwable)<br></div>
StackTraceElement	An element in a stack trace, as returned by&nbsp;Throwable.getStackTrace(). Each element represents a single stack frame. All stack frames except for the one at the top of the stack represent a method invocation. The frame at the top of the stack represents the execution point at which the stack trace was generated. Typically, this is the point at which the throwable corresponding to the stack trace was created.
Throwable.getStackTrace()	Returns an array of StackTraceElements each representing a frame of the stack trace
Benefits of Packages	1) Organize types that are related.<div>2) Names of types won't conflict because package creates a namespace.</div><div>3) Restrict access to public API classes while restricting other access.</div>
IllegalStateException	"<span style=""color: rgb(53, 56, 51);"">Signals that a method has been invoked at an illegal or inappropriate time. In other words, the Java environment or Java application is not in an appropriate state for the requested operation.</span>"
Deque (Java)	"Interface<div>Summary of Deque methods<table><tbody><tr><td></td><td colspan=""2""><b>First Element (Head)</b></td><td colspan=""2""><b>Last Element (Tail)</b></td></tr><tr><td></td><td><em>Throws exception</em></td><td><em>Special value</em></td><td><em>Throws exception</em></td><td><em>Special value</em></td></tr><tr><td><b>Insert</b></td><td>addFirst(e)<br></td><td>offerFirst(e)<br></td><td>addLast(e)<br></td><td>offerLast(e)<br></td></tr><tr><td><b>Remove</b></td><td>removeFirst()<br></td><td>pollFirst()<br></td><td>removeLast()<br></td><td>pollLast()<br></td></tr><tr><td><b>Examine</b></td><td>getFirst()<br></td><td>peekFirst()<br></td><td>getLast()<br></td><td>peekLast()<br></td></tr></tbody></table><br></div>"
What Deque methods access the first element and thrown an exception?	addFirst(e) - add element to head of the deque.<div>removeFirst() - remove and return front element.</div><div>getFirst() - return front element without removing.</div>
What Deque methods access the first element and return a special value(element|boolean|null)?	offerFirst(e) - add to from&nbsp;<div>pollFirst() - remove and returns first element, but null if empty.</div><div>peekFirst() - returns first element without removing, but null if empty.</div>
What Deque methods access the last element and thrown an exception?	addLast(e) - add element to the tail of the deque, throws exception if bounded and full. Prefer offerFirst(e) if deque is bounded.<div>removeLast() - remove and returns last element. Throws an exception if empty</div><div>getLast() - returns last element. Throws an exception if empty.</div>
What Deque methods access the last element and return a special value(element|boolean|null)?	offerLast(e) - add to front<div>pollLast() - remove and returns first element, but null if empty.</div><div>peekLast() - returns first element without removing, but null if empty.</div>
What Deque methods would be used for a Queue use-case?	Comparison of Queue and Deque methods<table><tbody><tr><td><b>Queue Method</b></td><td><b>Equivalent Deque Method</b></td></tr><tr><td>add(e)<br></td><td>addLast(e)<br></td></tr><tr><td>offer(e)<br></td><td>offerLast(e)<br></td></tr><tr><td>remove()<br></td><td>removeFirst()<br></td></tr><tr><td>poll()<br></td><td>pollFirst()<br></td></tr><tr><td>element()<br></td><td>getFirst()<br></td></tr><tr><td>peek()<br></td><td>peekFirst()<br></td></tr></tbody></table>
What Deque methods would be used for a Stack use-case?	Comparison of Stack and Deque methods<table><tbody><tr><td><b>Stack Method</b></td><td><b>Equivalent Deque Method</b></td></tr><tr><td>push(e)<br></td><td>addFirst(e)<br></td></tr><tr><td>pop()<br></td><td>removeFirst()<br></td></tr><tr><td>peek()<br></td><td>peekFirst()<br></td></tr></tbody></table><br>
How can you make a Collection thread-safe?	static &lt;T&gt;&nbsp;Collection&lt;T&gt;synchronizedCollection(Collection&lt;T&gt;&nbsp;c)<div>static &lt;T&gt;&nbsp;List&lt;T&gt;synchronizedList(List&lt;T&gt;&nbsp;list)<br></div><div>static &lt;K,V&gt;&nbsp;Map&lt;K,V&gt;synchronizedMap(Map&lt;K,V&gt;&nbsp;m)<br></div><div>static &lt;K,V&gt;&nbsp;NavigableMap&lt;K,V&gt;synchronizedNavigableMap(NavigableMap&lt;K,V&gt;&nbsp;m)<br></div><div>static &lt;T&gt;&nbsp;NavigableSet&lt;T&gt;synchronizedNavigableSet(NavigableSet&lt;T&gt;&nbsp;s)<br></div><div>static &lt;T&gt;&nbsp;Set&lt;T&gt;synchronizedSet(Set&lt;T&gt;&nbsp;s)<br></div><div>static &lt;K,V&gt;&nbsp;SortedMap&lt;K,V&gt;synchronizedSortedMap(SortedMap&lt;K,V&gt;&nbsp;m)<br></div><div>static &lt;T&gt;&nbsp;SortedSet&lt;T&gt;synchronizedSortedSet(SortedSet&lt;T&gt;&nbsp;s)<br></div>
"<span style=""color: rgb(36, 41, 46);"">UnsupportedOperationException (Java)</span>"	Exception thrown to indicated requested operation isn't supported by the class implementing the interface.
What value does compare to if the arg for Comparable.compareTo(T arg) is bigger?	-1 is returned for args that are bigger than the object compareTo() is called on
What value does compare to if the arg for Comparable.compareTo(T arg) is smaller?	1 is returned for args that are smaller than the object compareTo() is called on
What value does compare to if the arg for Comparable.compareTo(T arg) is equal?	0 is returned for args that are equal to the object compareTo() is called on.
Raw type	A generic type that is used without the type parameter i.e. no &lt;Type&gt;
Class (Java)	"<span style=""color: rgb(71, 71, 71);"">Instances of the class&nbsp;</span><code>Class</code><span style=""color: rgb(71, 71, 71);"">&nbsp;represent classes and interfaces in a running Java application. An enum is a kind of class and an annotation is a kind of interface. Every array also belongs to a class that is reflected as a&nbsp;</span><code>Class</code><span style=""color: rgb(71, 71, 71);"">&nbsp;object that is shared by all arrays with the same element type and number of dimensions. The primitive Java types (</span><code>boolean</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>byte</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>char</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>short</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>int</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>long</code><span style=""color: rgb(71, 71, 71);"">,&nbsp;</span><code>float</code><span style=""color: rgb(71, 71, 71);"">, and&nbsp;</span><code>double</code><span style=""color: rgb(71, 71, 71);"">), and the keyword&nbsp;</span><code>void</code><span style=""color: rgb(71, 71, 71);"">&nbsp;are also represented as&nbsp;</span><code>Class</code><span style=""color: rgb(71, 71, 71);"">&nbsp;objects.</span>"
What method is used to check if an entry exists in a Map?	Map.containsKey()
What method is used to check if a Map contains a value, no matter the key?	Map.containsValue(Object value)
What method is used to retrieved the entries of a map e.g. for iterating?	Set&lt;Map.Entry&lt;K, V&gt;&gt; Map.entrySet()
What method is used for retrieving the set of keys in a Map?	Set&lt;K&gt; Map.keySet()
InetSocketAddress	"<span style=""color: rgb(53, 56, 51);"">This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the hostname. If resolution fails then the address is said to be&nbsp;</span><i>unresolved</i><span style=""color: rgb(53, 56, 51);"">&nbsp;but can still be used on some circumstances like connecting through a proxy.</span><div>It provides an immutable object used by sockets for binding, connecting, or as returned values.</div>"
