CountDownLatch	"<span style=""color: rgb(53, 56, 51);"">A synchronization aid that allows one or more threads to wait until a set of operations being performed in other threads completes.<br><br></span>- void await()&nbsp;&nbsp;-&nbsp;Causes the current thread to wait until the latch has counted down to zero, unless the thread is&nbsp;interrupted.<br><br><div>-&nbsp;boolean await(long&nbsp;timeout,&nbsp;TimeUnit&nbsp;unit)&nbsp;- Causes the current thread to wait until the latch has counted down to zero, unless the thread is&nbsp;interrupted, or the specified waiting time elapses.<br><br></div><div>-&nbsp;void countDown()&nbsp;- Decrements the count of the latch, releasing all waiting threads if the count reaches zero.<br><br></div><div>-&nbsp;long getCount() - Returns the current count.</div>"
notify()	
Java Memory Model	
<div>List Interface</div>	"ex ArrayList, LInkedList, Vector, Stack<div>boolean add(E e), add(int idx, E e), addAll(Collections&lt;E&gt;)</div><div>clear(), isEmpty()</div><div>contains(Object o)</div><div>get(int idx), indexOf(Object o), subList(int fromInc, int toExcl )</div><div>remove(int idx), remove(Object o)</div><div>E set(int idx, E e) - like add, but also gets prev value</div><div>Object[] toArray()</div><div>sort(<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html"">Comparator</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&lt;? super&nbsp;</span><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/List.html"">E</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&gt;&nbsp;c</span>) *<span style=""color: rgb(53, 56, 51);"">well-suited to merging two or more sorted arrays</span></div><div>&lt;T&gt;&nbsp;T[] toArray(T[]&nbsp;a) - *Remember List contains objects, not primitives</div>"
Method Reference	"syntax sugar, clarity<div>sometimes lambda just calls existing function</div><div>Method reference clearer</div><div>ClassName::MedthodName &lt;- without ""()""</div>"
BitSet	"<div><span style=""color: rgb(53, 56, 51);"">a vector of bits that grows as needed. Uses booleans to represent whether set instead of 0 or 1.</span><br></div>and(BitSet) , andNot(BitSet) , or(BitSet)&nbsp;<div>set(index), set(int idx, boolean val), set(int fromInc, int toExcl)</div><div>set(int fromInc, int toExcln, boolean)<br></div><div>boolean get(int), BitSet get(fromInc, toExcl)</div><div>nextClearBit(int from), nextSetBit(int from)</div><div>flip(int), flip(fromInc, toExcl)</div><div>clear(), clear(from, to)</div><div><br></div><div><br></div>"
Iterator&lt;E&gt;	Iterator over a collection, Iterator Pattern<div>forEachRemaining(Consumer&lt;? super E&gt; action)</div><div>boolean hasNext()</div><div>E next()</div><div>default void remove() - if not implemented, throws&nbsp;UnsupportedOperationException&nbsp;<br><div><br></div></div>
? super E	Lower Bounded Wildcard<div>Write a method that works on anything that might hold E values i.e. E or super classes of E</div><div>Here be dragons, but check that super class references actually hold the subclass.</div>
Lower Bounded Wildcard(format)	? super T
Unbounded Wildcards	Class&lt;?&gt; e.g. Class&lt;T&gt; where the methods used don't depend on the class being i.e. relies purely on Object class methods<div><br></div>
Upper Bounded Wildcards	? extends T<br>For methods that operate on T and all subclasses of T using T's methods.
? extends T<br>	Upper Bounded Wildcards
Deadlock Prevention	<br>Causes of Deadlock:<div>1. Mutal Exclusion - only 1 process can access at a time.</div><div>2. Hold and wait: Process already holding a resource</div><div>3. No premption: one process cannot forcibly remove reources from another</div><div>4. Circular Wait: Two or more processes for a circular chain where each process is waiting on another resource in the chain</div><div>Remove 1 of 1-4 to prevent Deadlock</div><div>*Most often focuses on preventing circular wait</div>
Circular Wait	"<span style=""color: rgb(34, 34, 34);"">each process must be&nbsp;</span><b>waiting</b><span style=""color: rgb(34, 34, 34);"">&nbsp;for a resource which is being held by another process, which in turn is&nbsp;</span><b>waiting</b><span style=""color: rgb(34, 34, 34);"">&nbsp;for the first process to release the resource.</span>"
<div><div><div><div><div><div><div><div>Resource preemption</div></div></div></div></div></div></div></div>	"<span style=""color: rgb(34, 34, 34);"">Technique used to break a deadlock in a computer system<br>Drawbacks<br>1 Select Victim</span><div><span style=""color: rgb(34, 34, 34);"">2 How to rollback process</span></div><div><font color=""#222222"">3 Improper usage can lead to Starvation</font></div>"
Starvation	Problem encountered in&nbsp;concurrent computing&nbsp;where a&nbsp;process&nbsp;is perpetually denied necessary&nbsp;resources&nbsp;to process its work.<div>Caused by problems with scheduling, mutual exclusion algorithm, or resource leak.</div>
System	Static helpers<div>arraycopy(src, srcPos, dest, destPos, length)</div><div>currentTimeMillis()</div><div>exit()</div>
Arrays	Static helpers<div>Arrays.asList(T... args)</div><div>int binarySearch(T[], T key)</div><div>copyOf(T[], int newLength)</div><div>copyOfRange(T[]&nbsp;original, int&nbsp;from, int&nbsp;to)</div><div>equals(T[] arr1, T[]&nbsp; arr2)</div><div>fill(T[] arr, val)</div><div>toString(T[] a)</div>
Set interface	ex. HashSet, TreeSet<div>boolean add(E) // returns true if added i.e. E is unique</div><div>booleanaddAll(Collection&lt;? extends&nbsp;E&gt;&nbsp;c)<br></div><div>void clear(),&nbsp;<br></div><div>boolean contains(Object&nbsp;o),&nbsp;containsAll(Collection&lt;?&gt;&nbsp;c)<br></div><div>boolean remove(Object&nbsp;o), removeAll(Object&nbsp;o) - true if contained<br></div>
Lambdas<br>	1 arg a -&gt; a.doStuff()<div>1 arg with optional type (Animal a ) -&gt; {a.doStuff();}</div>
Supplier&lt;T&gt;	T get()
Consumer&lt;T&gt;	void accept(T t)
Biconsumer&lt;T, U&gt;	void accept(T t, U u)
Predicate&lt;T&gt;	boolean test(T t)
BiPredicate&lt;T,U&gt;	boolean test(T t, U u)
Function&lt;T,R&gt;	R apply(T t)
BiFunction&lt;T,U&gt;	R apply(T t, U u)
UnaryOperator&lt;T&gt;	T apply(T t)
BinaryOperator&lt;T,T&gt;	T apply(T t1, T t2)
Comparator	<div>- function interface</div><div>- custom sorting</div><div>- compare(a, b)</div><div>- lambda</div><div>- java.util</div><div>Collections.sort needs Comparator if not Comparable</div><div>Collections that sort have same requirement</div>
Comparable	- interface<div>- public int compareTo(T obj)</div><div>- java.lang</div><div>returns</div><div>0 if equal</div><div>&lt; 0 if arg obj is bigger</div><div>0&lt; if arg obj is smaller</div><div>legacy code requires casting before generics inside object to compare</div>
ArrayList	"Implements List interface<br><div>boolean add(E e), add(int idx, E e), addAll(Collections&lt;E&gt;)</div><div>clear(), isEmpty()</div><div>contains(Object o)</div><div>get(int idx), indexOf(Object o),&nbsp;</div><div>subList(int fromInc, int toExcl )</div><div>remove(int idx), remove(Object o)</div><div>E set(int idx, E e) - like add, but also gets prev value</div><div>Object[] toArray()</div><div>sort(<a href=""https://docs.oracle.com/javase/8/docs/api/java/util/Comparator.html"">Comparator</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&lt;? super&nbsp;</span><a href=""https://docs.oracle.com/javase/8/docs/api/java/util/List.html"">E</a><span style=""color: rgb(53, 56, 51); background-color: rgb(238, 238, 239);"">&gt;&nbsp;c</span>) *<span style=""color: rgb(53, 56, 51);"">well-suited to merging two or more sorted arrays</span></div><div>&lt;T&gt;&nbsp;T[] toArray(T[]&nbsp;a) - *Remember List contains objects, not primitives</div>"
System.arraycopy<br>(Method Signature)	System.arraycopy(src[], int srcPos, dest[], int destPos, int length)
Collections	Static Helpers<br>addAll(Collection c, T... element)<div>fill(List&lt;T&gt;, T obj)</div><div>min(Collection c), min( Collection, Comparator)</div>max(Collection c), max( Collection, Comparator)<div>frequency(Collection c, obj)</div><div>replaceAll(List, T oldVal, T newVal)</div><div>reverse()</div><div>reverseOrder(), reverseOrder(Comparator)</div><div>swap(List&lt;T&gt;)</div><div>synchronized&lt;Collection|List|Map|Set&gt;</div>
Map Interface	ex. HashMap, TreeMap, LinkedHashMap<div>Map&lt;K,V&gt;</div><div>V get(Object keys)</div><div>void put(K key, V value)</div><div>Set&lt;Entry&lt;K.V&gt;&gt; entrySet()</div><div>Set&lt;K&gt; keySet()</div><div>Collection&lt;V&gt;&nbsp; values()</div><div><br></div><div>merge(K&nbsp;key,&nbsp;V&nbsp;value,&nbsp;BiFunction&lt;? super&nbsp;V,? super&nbsp;V,? extends&nbsp;V&gt;&nbsp;remappingFunction)<br></div><div>compute(K&nbsp;key, BiFunction&lt;? super K,? super V,? extends V&gt;&nbsp;remappingFunction)</div><div>computeIfPresent(...)</div><div>computeIfAbsent(...)</div><div><br></div><div><br></div><div>Android</div><div>use ArrayMap to save memory for &lt;1000</div><div><br></div>
Deque Interface	<div>addLast() - add element or exception Queue</div><div>offerLast() - add element or bool Queue</div><div>removeFirst() //exception Queue And Stack</div><div>pollFirst() - remove/get element or null Queue And Stack</div><div>getFirst() //exception Queue And Stack</div><div>peekFirst() get element or null Queue And Stack</div>
String	Immutable<div>*concatenation creates new String obj</div><div>- length() -trim()</div><div>- charAt(int idx)&nbsp;</div><div>- indexOf(int&nbsp;ch) -indexOf(int ch, int fromIndex)</div><div>- indexOf(String str) -indexOf(String str, int fromIndex)<br></div><div>- substring(int&nbsp;beginIncl)</div><div>- substring(int&nbsp;beginIndex, int&nbsp;endExcl)</div><div>- startsWith(), endsWith()</div><div>- equals(), equalsIgnoreCase()</div><div>- contains(String s)</div><div>- replace(String regex, String replacement)</div>
StringBuilder	Many of String methods<div>- append(String str)</div><div>- insert(int offset, String&nbsp;</div>- delete(int&nbsp;start, int&nbsp;end), deleteCharAt(int idx)<div>- reverse()</div><div>- toString()</div>
Random	"<span style=""color: rgb(71, 71, 71);"">An instance of this class is used to generate a stream of pseudorandom numbers.</span><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);"">If two instances of&nbsp;</span><code>Random</code><span style=""color: rgb(71, 71, 71);"">&nbsp;are created with the same seed, and the same sequence of method calls is made for each, they will generate and return identical sequences of numbers.&nbsp;</span><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);"">ThreadLocalRandom instead of shared Random class better for concurrency Math.random() for just doubles</span></div><div><font color=""#474747"">One random number nextBoolean(), nextInt(), nextDouble(), nextFloat()&nbsp;</font></div><div><font color=""#474747"">nextInt() has an overload that takes an int exclusiveBound</font></div><div><font color=""#474747"">Stream of random numbers doubles(), ints(), longs()</font></div><div><font color=""#474747"">Each stream type has an overload that takes an int for size</font></div><div><span style=""color: rgb(71, 71, 71);""><br></span></div><div><span style=""color: rgb(71, 71, 71);""><br></span></div>"
ReadWriteLock	readLock() acquire lock for reading.<div>Lock writeLock() acquire lock for writing</div>
Lock	Tool for controlling access to shared resource by multiple threads.<div>Synchronized methods/block aquire implicit lock and release in reverse, using lock allows a hand-over-hand locking algorithm</div><div>lock(), unlock()</div><div>lockInterruptibly()</div><div>Condition new Condition()</div><div>boolean tryLock()</div><div>boolean tryLock(long time, TimeUnit unit)</div>
Multithreading	implement Runnable or use lambda<div>extend Thread and override run()</div><div>Future&lt;V&gt;</div><div>Callable&lt;V&gt;</div><div>synchronized modifier</div><div>synchronized(object) {} block private object</div><div>Lock lock;</div>
Collectors	averagingDouble(ToDoubleFunction&lt;? super T&gt;&nbsp;mapper)<div>averagingInt(ToIntFunction&lt;? super T&gt;&nbsp;mapper)<br>averagingLong(ToLongFunction&lt;? super T&gt;&nbsp;mapper)<br></div><div><br></div><div>counting()<br></div><div><br></div><div>groupingBy(Function&lt;? super T,? extends K&gt;&nbsp;classifier) - collects into Map<br></div><div><br></div><div>joining() - Stream to String<br></div><div><br></div><div>maxBy(Comparator&lt;? super T&gt;&nbsp;comparator)</div>minBy(Comparator&lt;? super T&gt;&nbsp;comparator)<div><br><div>partitioningBy(Predicate&lt;? super T&gt;&nbsp;predicate) - Map w/ only True and False<br></div></div>
Collector&lt;T,A,R&gt;	T - type of input elements to the reduction op<div>A - mutable accumulation type of reduction op</div><div>R - result type of reduction op</div><div>Supplier&lt;A&gt; supplier Biconsumer&lt;A,T&gt; accumulator</div><div>BinaryOperator cominder, Funciton&lt;A,R&gt; finisher()</div><div>static Collector.of(Supplier accumulator, combiner, finisher, Collector.Characteristics)</div>
Stream	Object toArray() &lt;A&gt; A[] toArray(IntFunction&lt;A[]&gt;)<div>Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator)</div><div>Stream&lt;T&gt; skip(long n)</div><div>Stream&lt;T&gt; of(T t) | of(T... values)</div><div>Optional&lt;T&gt; min(Comarator) max(Comparator)</div><div>Int | Long | DoubleStream mapToInt|Long|Double(Function mapper)</div><div>Stream&lt;T&gt; limit(long maxSize) stream of maxSize length shorter</div><div>Stream&lt;T&gt; generate( Supplier&lt;T&gt; s)</div><div>Stream&lt;T&gt; distinct()</div><div>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</div>
Comparator Methods	int compare(T obj1, T obj2)<div><br></div><div>Helper Methods</div><div>naturalOrdering() nullsFirst|Last(Comparator)</div><div>reversed() - Comparator reversed of this Comparator</div><div>reverseOrder() - reversed natural ordering<br></div><div>comparingInt|Long|Double(ToInt|Double|LongFunction)</div><div>thenComparing(...) - similar to above<br><div><br></div></div>
NavigableMap&lt;K,V&gt;	Allows for inexact key retrieval<div>Sorted Map</div><div>ceilingEntry(K key) entry for first key &lt;= key paramenter</div><div>firstEntry(), lastEntry(), pollFirstEntry(), pollLastEntry()</div><div>subMap(K from, K to), subMap(K from, boolean isIncl, K to, boolean isIncl),</div><div>&nbsp;</div>
Concurrent Collections	No ConcurrentModificationException<div>collections.synchronizedcollection(Collection|List|Map|Set)</div><div>ConcurrentHashMap</div><div>ConcurrentLinkedDeque</div><div>ConcurrentLinkedQueue</div><div>ConcurrentSkipListMap</div><div>concurrentSkipListSet</div><div>CopyOnWriteArraySet</div><div>CopyOnWriteArrayList</div><div>LinkedBlockingDeque</div><div>LinkedBlockingQueue</div>
Syncronization	synchronized on method or block<div>private synchronized void doSTuff()</div><div>synchronized (privateFinalObject) {}</div>
Future&lt;V&gt;	"<span style=""color: rgb(53, 56, 51);"">A&nbsp;</span>Future<span style=""color: rgb(53, 56, 51);"">&nbsp;represents the result of an asynchronous computation.<br></span><br><span style=""color: rgb(53, 56, 51);"">If you would like to use a&nbsp;</span>Future<span style=""color: rgb(53, 56, 51);"">&nbsp;for the sake of cancellability but not provide a usable result, you can declare types of the form&nbsp;</span><code>Future&lt;?&gt;</code><span style=""color: rgb(53, 56, 51);"">&nbsp;and return&nbsp;</span>null<span style=""color: rgb(53, 56, 51);"">&nbsp;as a result of the underlying task.</span><div><font color=""#353833""><br></font>boolean isDone()<div>boolean isCancelled()</div><div>boolean cancel()</div><div>V get()</div><div>V get(long timeout, TimeUnit units)</div></div>"
TimeUnit	TimeUnit.SECONDS<div>TimeUnit.MINUTES<br></div><div>TimeUnit.HOURS<br></div><div>TimeUnit.DAYS<br></div>
Constructors	first call super() if subclass<div>super() implicit when absent</div><div>super() after first functional line is compiler error</div><div>private constructor prevents subclassing</div>
Java Primitives	boolean<div>byte</div><div>short</div><div>int</div><div>long</div><div>float = 123.45f</div><div>double = 123.45</div><div>char = 'c' using only single-quotes</div><div>binary starts with 0b</div><div>hex starts with 0x</div><div>octal starts with 0</div>
Wrapper Classes	Important because Data Structures don't hold primitives<div>Primitives to Wrapper classes done via autoboxing, but be aware of autoboxing overhead</div><div>Boolean</div><div>Byte</div><div>Short</div><div>Integer</div><div>Long</div><div>Float</div><div>Double</div><div>Character</div>
Class Order of Initialization	1) Superclass if exists<div>2) Static variables, initializers blocks in order</div><div>3) Instance variables, initalizers, blocks in order</div><div>4) Constructor</div>
Aspects of an Immutable Class	1) No setters<div>2 All fields are final<br><div>3) Constructor sets final fields</div><div>4) Doesn't return mutable objects or...</div><div>5) Returns clones of internal mutable objects.</div></div>
Bitwise Operators	| - OR<div>&amp; - AND</div><div>^ - XOR</div><div>~ 0 Complement/Negation all bits inversed</div><div>&gt;&gt; - Signed Right Shift</div><div>&gt;&gt;&gt; - Unsigned Right Shift</div><div>&lt;&lt; Signed Left Shift</div><div>&lt;&lt;&lt; Unsigned Left Shift</div>
| Operator	OR inclusive<div>Set a bit even if set</div>
&amp; Operator	AND Operator<div>Set bit only already set</div><div>Used to check a bit is set i.e. flag</div>
^ Operator	Exclusive OR<br>Set a bit if either is 1, but unset if both are 1<div>Used to toggle a bit's value</div>
~ Operator	Negation/ Complement Operator<div>Flips the bits from 1 to 0 and 0 to 1</div>
Abstract Class	-Class extends abstrac implements interface<div>- first nonabstract subclass must implement abstract methods</div><div>- cannot be instantiated</div><div>- cannot be private or final (class or methds)</div><div>- abstract methods onlin in abstract claass and cannot have a body unless marked default</div><div>interface vars are public, static, final</div><div>-vars must be set on declare because final</div>
Enum type	- not int like c++, use ordinal() for int<div>- cannot extend</div><div>- valueOf() is case-sensitive</div><div>- only private constructor<br><div><br></div></div>
TreeMap	Map.Entry&lt;K,V&gt; ceinlingEntry(K key)<div>K ceilingKey(K key)</div><div>Map.Entry floorEntry(K key)</div><div>K floorKey(K key)</div><div>firstEntry(), lastEntry()</div><div>lowerEntry(), lowerKey()</div><div>higherEntry(), higherKey()&nbsp;</div>
