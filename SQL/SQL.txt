to mark the value you want returned	SELECT
to indicate you want a tally of the SELECTed field	COUNT() 
to return the value as a new field	AS
to mark the table data comes from	FROM
to create an inner join	INNER JOIN
to specify the fields that should be matched in the join	ON [] = [] 
to group returned results by a given field	GROUP BY
to specify a numerical threshold for results	HAVING COUNT() <>=
queries always end with	;
to specify parameters	WHERE with Boolean operators
to set the polarity of a grouping	ASC / DESC as last element
to remove duplicates from a return	DISTINCT immediately after select
to make an outer join	LEFT/RIGHT/FULL JOIN
to execute a full join	SELECT... UNION SELECT where the two selects are a left and a right join
to modify a comparison	ANY/SOME/ALL
to take the highest or lowest value	MAX() / MIN() 
to indicate that a value should not be present in a given returned result or table	NOT IN
to indicate a value should be empty	IS NULL
to indicate that there should be a return from the query	EXISTS
to take the average of a field	AVG() 
to form a parameter query	:field
exporting to CSV	"SELECT *<br>FROM table<br>INTO OUTFILE 'filename.csv'<br>FIELDS TERMINATED BY ',' OPTIONALLY ENCLOSED BY '""'<br>LINES TERMINATED BY '\n"";"
SQL Functions<div>MIN() MAX() IFNULL() ISNULL()</div><div>COUNT() AVG() SUM()</div><div>CONCAT() COALESCE()&nbsp;</div>	
DISTINCT	return only distinct(different) values
SELECT	"SELECT statement is used to select data from a database<div><br></div><div><span style=""color: mediumblue;"">SELECT</span>&nbsp;<em>column1</em>,<em>&nbsp;column2, ...</em><br><span style=""color: mediumblue;"">FROM</span>&nbsp;<em>table_name</em>;<br></div>"
SELECT DISTINCT	SELECT DISTINCT statement is used to return only distinct (different) values.<div><br></div><div>SELECT&nbsp;DISTINCT&nbsp;column1,&nbsp;column2, ...<br>FROM&nbsp;table_name;<br></div>
WHERE	WHERE clause is used to filter records.<div><br></div>
AND	Combine WHERE conditions. Displays a record if all the conditions are TRUE
OR	Combine WHERE conditions. Displays a record if any of the conditions are TRUE
NOT&nbsp;	Negatte WHERE conditions. Displays a record if all the conditions are NOT TRUE
ORDER BY&nbsp;	ORDER BY keyword is used to sort the result-set in ascending or descending order. ASC, DESC follows columns<div><br></div><div>SELECT&nbsp;column1,&nbsp;column2, ...<br>FROM&nbsp;table_name<br>ORDER&nbsp;BY&nbsp;column1, column2, ...&nbsp;ASC|DESC;<br></div>
INSERT INTO	INSERT INTO statement is used to insert new records in a table.<div><br><div>Specifies both the column names and the values to be inserted:<br></div><div>INSERT&nbsp;INTO&nbsp;table_name&nbsp;(column1,&nbsp;column2,&nbsp;column3, ...)<br>VALUES&nbsp;(value1,&nbsp;value2,&nbsp;value3, ...);<br></div><div><br></div><div>If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table.<br></div><div>INSERT&nbsp;INTO&nbsp;table_name<br>VALUES&nbsp;(value1,&nbsp;value2,&nbsp;value3, ...);<br></div></div>
NULL&nbsp;	A field with a NULL value is a field with no value.<div><br></div><div>If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.<br></div><div><br></div><div>IS NULL Syntax<br></div><div>SELECT&nbsp;column_names<br>FROM&nbsp;table_name<br>WHERE&nbsp;column_name&nbsp;IS&nbsp;NULL;<br></div><div><br></div><div>IS NOT NULL Syntax<br></div><div>SELECT&nbsp;column_names<br>FROM&nbsp;table_name<br>WHERE&nbsp;column_name&nbsp;IS&nbsp;NOT&nbsp;NULL;<br></div>
UPDATE	The UPDATE statement is used to modify the existing records in a table.<div><br></div><div>UPDATE&nbsp;table_name<br>SET&nbsp;column1&nbsp;=&nbsp;value1,&nbsp;column2&nbsp;=&nbsp;value2, ...<br>WHERE&nbsp;condition;<br></div>
DELETE&nbsp;	The DELETE statement is used to delete existing records in a table.<div><br></div><div>DELETE&nbsp;FROM&nbsp;table_name&nbsp;WHERE&nbsp;condition;<br></div>
MIN()&nbsp;	The MIN() function returns the smallest value of the selected column.<div>SELECT&nbsp;MIN(column_name)<br>FROM&nbsp;table_name<br>WHERE&nbsp;condition;<br></div>
MAX()&nbsp;	The MAX() function returns the largest value of the selected column.<div><br></div><div>SELECT&nbsp;MAX(column_name)<br>FROM&nbsp;table_name<br>WHERE&nbsp;condition;<br></div>
COUNT()	COUNT() function returns the number of rows that matches a specified criterion.<div><br></div><div>SELECT&nbsp;COUNT(column_name)<br>FROM&nbsp;table_name<br>WHERE&nbsp;condition;<br></div>
AVG()	The AVG() function returns the average value of a numeric column.<div><br></div><div>SELECT&nbsp;AVG(column_name)<br>FROM&nbsp;table_name<br>WHERE&nbsp;condition;<br></div>
SUM()	The SUM() function returns the total sum of a numeric column.<div><br></div><div>SELECT&nbsp;SUM(column_name)<br>FROM&nbsp;table_name<br>WHERE&nbsp;condition;<br></div>
LIKE&nbsp;	LIKE operator is used in a WHERE clause to search for a specified pattern in a column.<div><br></div><div><div>There are two wildcards often used in conjunction with the LIKE operator:</div><ul><li>% - The percent sign represents zero, one, or multiple characters</li><li>_ - The underscore represents a single character</li></ul><div>SELECT&nbsp;column1, column2, ...<br>FROM&nbsp;table_name<br>WHERE&nbsp;columnN&nbsp;LIKE&nbsp;pattern;<br></div></div>
IN	<div>The IN operator allows you to specify multiple values in a WHERE clause.</div><div>The IN operator is a shorthand for multiple OR conditions.</div><div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;column_name&nbsp;IN&nbsp;(value1,&nbsp;value2, ...);<br></div><div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;column_name&nbsp;IN&nbsp;(SELECT&nbsp;STATEMENT);<br></div>
BETWEEN&nbsp;	<div>The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.</div><div>The BETWEEN operator is inclusive: begin and end values are included.&nbsp;</div><div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;column_name&nbsp;BETWEEN&nbsp;value1&nbsp;AND&nbsp;value2;<br></div>
SQL Aliases	<div>SQL aliases are used to give a table, or a column in a table, a temporary name.</div><div>Aliases are often used to make column names more readable.</div><div>An alias only exists for the duration of the query.</div><div><br></div><div>Alias Column Syntax<br></div><div>SELECT&nbsp;column_name&nbsp;AS&nbsp;alias_name<br>FROM&nbsp;table_name;<br></div><div><br></div><div>Alias Table Syntax<br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name&nbsp;AS&nbsp;alias_name;<br></div>
JOIN	A JOIN clause is used to combine rows from two or more tables, based on a related column between them.<div><br></div><div>SELECT&nbsp;Orders.OrderID, Customers.CustomerName, Orders.OrderDate<br>FROM&nbsp;Orders<br>INNER&nbsp;JOIN&nbsp;Customers&nbsp;ON&nbsp;Orders.CustomerID=Customers.CustomerID;<br></div>
INNER JOIN	The INNER JOIN keyword selects records that have matching values in both tables.<div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table1<br>INNER&nbsp;JOIN&nbsp;table2<br>ON&nbsp;table1.column_name&nbsp;=&nbsp;table2.column_name;<br></div>
LEFT JOIN	The LEFT JOIN keyword returns all records from the left table (table1), and the matched records from the right table (table2). The result is NULL from the right side, if there is no match.<div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table1<br>LEFT&nbsp;JOIN&nbsp;table2<br>ON&nbsp;table1.column_name&nbsp;=&nbsp;table2.column_name;<br></div>
RIGHT JOIN	The RIGHT JOIN keyword returns all records from the right table (table2), and the matched records from the left table (table1). The result is NULL from the left side, when there is no match.<div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table1<br>RIGHT&nbsp;JOIN&nbsp;table2<br>ON&nbsp;table1.column_name&nbsp;=&nbsp;table2.column_name;<br></div>
FULL OUTER JOIN	<div>The FULL OUTER JOIN keyword returns all records when there is a match in left (table1) or right (table2) table records.</div><div>Note:&nbsp;FULL OUTER JOIN can potentially return very large result-sets!</div><div>Tip:&nbsp;FULL OUTER JOIN and FULL JOIN are the same.</div><div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table1<br>FULL&nbsp;OUTER&nbsp;JOIN&nbsp;table2<br>ON&nbsp;table1.column_name&nbsp;=&nbsp;table2.column_name<br>WHERE&nbsp;condition;<br></div>
UNION&nbsp;	<div>The UNION operator is used to combine the result-set of two or more SELECT statements.</div><ul><li>Each SELECT statement within UNION must have the same number of columns</li><li>The columns must also have similar data types</li><li>The columns in each SELECT statement must also be in the same order</li></ul><div>SELECT&nbsp;column_name(s)&nbsp;FROM&nbsp;table1<br>UNION<br>SELECT&nbsp;column_name(s)&nbsp;FROM&nbsp;table2;<br></div>
GROUP BY	"<div>The GROUP BY statement groups rows that have the same values into summary rows, like ""find the number of customers in each country"".</div><div>The GROUP BY statement is often used with aggregate functions (COUNT, MAX, MIN, SUM, AVG) to group the result-set by one or more columns.</div><div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;condition<br>GROUP&nbsp;BY&nbsp;column_name(s)<br>ORDER&nbsp;BY&nbsp;column_name(s);<br></div>"
HAVING&nbsp;	The HAVING clause was added to SQL because the WHERE keyword could not be used with aggregate functions.<div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;condition<br>GROUP&nbsp;BY&nbsp;column_name(s)<br>HAVING&nbsp;condition<br>ORDER&nbsp;BY&nbsp;column_name(s);<br></div>
EXISTS&nbsp;	<div>The EXISTS operator is used to test for the existence of any record in a subquery.</div><div>The EXISTS operator returns true if the subquery returns one or more records.</div><div><br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;EXISTS<br>(SELECT&nbsp;column_name&nbsp;FROM&nbsp;table_name&nbsp;WHERE&nbsp;condition);<br></div>
ANY and ALL	<div>The ANY and ALL operators are used with a WHERE or HAVING clause.</div><div>The ANY operator returns true if any of the subquery values meet the condition.</div><div>The ALL operator returns true if all of the subquery values meet the condition.</div><div><br></div><div>ANY Syntax<br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;column_name operator&nbsp;ANY<br>(SELECT&nbsp;column_name&nbsp;FROM&nbsp;table_name&nbsp;WHERE&nbsp;condition);<br></div><div><br></div><div>ALL Syntax<br></div><div>SELECT&nbsp;column_name(s)<br>FROM&nbsp;table_name<br>WHERE&nbsp;column_name operator&nbsp;ALL<br>(SELECT&nbsp;column_name&nbsp;FROM&nbsp;table_name&nbsp;WHERE&nbsp;condition);<br></div>
CREATE DATABASE	The CREATE DATABASE statement is used to create a new SQL database.<div><br></div><div>CREATE&nbsp;DATABASE&nbsp;databasename;<br></div>
DROP DATABASE	The DROP DATABASE statement is used to drop an existing SQL database.<div><br></div><div>DROP&nbsp;DATABASE&nbsp;databasename;<br></div>
CREATE TABLE	The CREATE TABLE statement is used to create a new table in a database.<div><br></div><div>CREATE&nbsp;TABLE&nbsp;table_name&nbsp;(<br>&nbsp;&nbsp;&nbsp; column1 datatype,<br>&nbsp;&nbsp;&nbsp; column2 datatype,<br>&nbsp;&nbsp;&nbsp; column3 datatype,<br>&nbsp;&nbsp; ....<br>);</div>
DROP TABLE	The DROP TABLE statement is used to drop an existing table in a database.<div><br></div><div>DROP&nbsp;TABLE&nbsp;table_name;<br></div>
ALTER TABLE	<div>The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.</div><div>The ALTER TABLE statement is also used to add and drop various constraints on an existing table.</div><div><br></div><div>ADD Column<br></div><div>ALTER&nbsp;TABLE&nbsp;table_name<br>ADD&nbsp;column_name datatype;<br></div><div><br></div><div>DROP COLUMN<br></div><div>ALTER&nbsp;TABLE&nbsp;table_name<br>DROP&nbsp;COLUMN&nbsp;column_name;<br></div>
SQL Constraints	<div>The following constraints are commonly used in SQL:</div><ul><li>NOT NULL&nbsp;- Ensures that a column cannot have a NULL value</li><li>UNIQUE&nbsp;- Ensures that all values in a column are different</li><li>PRIMARY KEY&nbsp;- A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table</li><li>FOREIGN KEY&nbsp;- Uniquely identifies a row/record in another table</li><li>CHECK&nbsp;- Ensures that all values in a column satisfies a specific condition</li><li>DEFAULT&nbsp;- Sets a default value for a column when no value is specified</li><li>INDEX&nbsp;- Used to create and retrieve data from the database very quickly</li></ul><div></div><div></div>
NOT NULL	<div>By default, a column can hold NULL values.</div><div>The NOT NULL constraint enforces a column to NOT accept NULL values.</div><div><br></div><div>CREATE&nbsp;TABLE&nbsp;Persons (<br>&nbsp;&nbsp;&nbsp; ID int&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp;&nbsp;LastName varchar(255)&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; FirstName varchar(255)&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; Age int<br>);<br></div>
UNIQUE	Constraint<div><div>The UNIQUE constraint ensures that all values in a column are different.</div><div>Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.</div><div>A PRIMARY KEY constraint automatically has a UNIQUE constraint.</div><div>However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.</div></div><div><br></div><div>CREATE&nbsp;TABLE&nbsp;Persons (<br>&nbsp;&nbsp;&nbsp; ID int&nbsp;NOT&nbsp;NULL&nbsp;UNIQUE,<br>&nbsp;&nbsp;&nbsp; LastName varchar(255)&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; FirstName varchar(255),<br>&nbsp;&nbsp;&nbsp; Age int<br>);<br></div>
PRIMARY KEY	Constraint<div><div>The PRIMARY KEY constraint uniquely identifies each record in a table.</div><div>Primary keys must contain UNIQUE values, and cannot contain NULL values.</div><div>A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).</div></div><div><br></div><div>CREATE&nbsp;TABLE&nbsp;Persons (<br>&nbsp;&nbsp;&nbsp; ID int&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; LastName varchar(255)&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; FirstName varchar(255),<br>&nbsp;&nbsp;&nbsp; Age int,<br>&nbsp;&nbsp;&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;(ID)<br>);<br></div>
FOREIGN KEY	<div>A FOREIGN KEY is a key used to link two tables together.</div><div>A FOREIGN KEY is a field (or collection of fields) in one table that refers to the PRIMARY KEY in another table.</div><div>The table containing the foreign key is called the child table, and the table containing the candidate key is called the referenced or parent table.</div><div><br></div><div>CREATE&nbsp;TABLE&nbsp;Orders (<br>&nbsp;&nbsp;&nbsp; OrderID int&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; OrderNumber int&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; PersonID int,<br>&nbsp;&nbsp;&nbsp;&nbsp;PRIMARY&nbsp;KEY&nbsp;(OrderID),<br>&nbsp;&nbsp;&nbsp;&nbsp;FOREIGN&nbsp;KEY&nbsp;(PersonID)&nbsp;REFERENCES&nbsp;Persons(PersonID)<br>);<br></div>
CHECK<div><br></div>	<div>The CHECK constraint is used to limit the value range that can be placed in a column.</div><div>If you define a CHECK constraint on a single column it allows only certain values for this column.</div><div>If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.</div><div><br></div><div>CREATE&nbsp;TABLE&nbsp;Persons (<br>&nbsp;&nbsp;&nbsp; ID int&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; LastName varchar(255)&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; FirstName varchar(255),<br>&nbsp;&nbsp;&nbsp; Age int,<br>&nbsp;&nbsp;&nbsp;&nbsp;CHECK&nbsp;(Age&gt;=18)<br>);<br></div>
DEFAULT	<div>The DEFAULT constraint is used to provide a default value for a column.</div><div>The default value will be added to all new records IF no other value is specified.</div><div><br></div><div>CREATE&nbsp;TABLE&nbsp;Persons (<br>&nbsp;&nbsp;&nbsp; ID int&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; LastName varchar(255)&nbsp;NOT&nbsp;NULL,<br>&nbsp;&nbsp;&nbsp; FirstName varchar(255),<br>&nbsp;&nbsp;&nbsp; Age int,<br>&nbsp;&nbsp;&nbsp; City varchar(255)&nbsp;DEFAULT&nbsp;'Sandnes'<br>);<br></div>
CREATE INDEX	<div>The CREATE INDEX statement is used to create indexes in tables.</div><div>Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.</div><div><br></div><div>CREATE&nbsp;INDEX&nbsp;index_name<br>ON&nbsp;table_name&nbsp;(column1,&nbsp;column2, ...);<br></div>
SQL Injection<br>	<div>SQL injection is a code injection technique that might destroy your database.</div><div>SQL injection is one of the most common web hacking techniques.</div><div>SQL injection is the placement of malicious code in SQL statements, via web page input.</div>
